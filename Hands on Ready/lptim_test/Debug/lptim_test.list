
lptim_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f8  08000234  08000234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800262c  0800262c  0000362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800263c  0800263c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800263c  0800263c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800263c  0800263c  0000363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002640  08002640  00003640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20030000  08002644  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2003000c  08002650  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003007c  08002650  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d22c  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e97  00000000  00000000  0001126e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00013108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d9  00000000  00000000  00013cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002baa3  00000000  00000000  000145b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd19  00000000  00000000  00040054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011195f  00000000  00000000  0004bd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015d6cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff0  00000000  00000000  0015d710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00160700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	@ (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2003000c 	.word	0x2003000c
 8000250:	00000000 	.word	0x00000000
 8000254:	08002614 	.word	0x08002614

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	@ (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	@ (8000270 <frame_dummy+0x18>)
 8000262:	f3af 8000 	nop.w
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20030010 	.word	0x20030010
 8000270:	08002614 	.word	0x08002614

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fb0c 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f830 	bl	80002e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Enable the SMPS regulator to improve power efficiency */
    if(HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000280:	2002      	movs	r0, #2
 8000282:	f001 f9df 	bl	8001644 <HAL_PWREx_ConfigSupply>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <main+0x1c>
    {
  	  Error_Handler();
 800028c:	f000 f99c 	bl	80005c8 <Error_Handler>
    }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f000 f8f4 	bl	800047c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8000294:	f000 f8a8 	bl	80003e8 <MX_LPTIM1_Init>
  MX_ICACHE_Init();
 8000298:	f000 f892 	bl	80003c0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  /* Flash Bank2 off*/
  //HAL_FLASHEx_EnablePowerDown(FLASH_BANK_2);
  /*Flash in power down mode during Stop mode - by default after reset */
  HAL_PWREx_DisableFlashFastWakeUp();
 800029c:	f001 fa42 	bl	8001724 <HAL_PWREx_DisableFlashFastWakeUp>

  /*Reduce SRAM2 retention to 8 kB*/
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM2_PAGE2_STOP_RETENTION); // reduction -600nA
 80002a0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80002a4:	f001 fa2c 	bl	8001700 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM2_PAGE3_STOP_RETENTION);
 80002a8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80002ac:	f001 fa28 	bl	8001700 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_FDCAN_USB_STOP_RETENTION);
 80002b0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80002b4:	f001 fa24 	bl	8001700 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_PKA_STOP_RETENTION);
 80002b8:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80002bc:	f001 fa20 	bl	8001700 <HAL_PWREx_DisableRAMsContentStopRetention>

  /*Put full SRAM1 in power down mode*/
  HAL_PWREx_EnableRAMsPowerDown(PWR_SRAM1_POWERDOWN); // reduction - 500nA
 80002c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80002c4:	f001 fa0a 	bl	80016dc <HAL_PWREx_EnableRAMsPowerDown>

  HAL_LPTIM_PWM_Start(&hlptim1, LPTIM_CHANNEL_1);
 80002c8:	2100      	movs	r1, #0
 80002ca:	4804      	ldr	r0, [pc, #16]	@ (80002dc <main+0x68>)
 80002cc:	f000 ffac 	bl	8001228 <HAL_LPTIM_PWM_Start>

  /* Enter STOP 2 mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERMODE_STOP2, PWR_STOPENTRY_WFI);
 80002d0:	2101      	movs	r1, #1
 80002d2:	2002      	movs	r0, #2
 80002d4:	f001 f91c 	bl	8001510 <HAL_PWR_EnterSTOPMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d8:	bf00      	nop
 80002da:	e7fd      	b.n	80002d8 <main+0x64>
 80002dc:	20030028 	.word	0x20030028

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b094      	sub	sp, #80	@ 0x50
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	2238      	movs	r2, #56	@ 0x38
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 f964 	bl	80025bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]
 8000302:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 8000304:	2100      	movs	r1, #0
 8000306:	2001      	movs	r0, #1
 8000308:	f002 f914 	bl	8002534 <HAL_RCCEx_EpodBoosterClkConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000312:	f000 f959 	bl	80005c8 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 8000316:	f001 f969 	bl	80015ec <HAL_PWREx_EnableEpodBooster>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000320:	f000 f952 	bl	80005c8 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000324:	2002      	movs	r0, #2
 8000326:	f001 f923 	bl	8001570 <HAL_PWREx_ControlVoltageScaling>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000330:	f000 f94a 	bl	80005c8 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8000334:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <SystemClock_Config+0xd8>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f023 030f 	bic.w	r3, r3, #15
 800033c:	4a1e      	ldr	r2, [pc, #120]	@ (80003b8 <SystemClock_Config+0xd8>)
 800033e:	f043 0302 	orr.w	r3, r3, #2
 8000342:	6013      	str	r3, [r2, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000344:	f001 f8d8 	bl	80014f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000348:	4b1c      	ldr	r3, [pc, #112]	@ (80003bc <SystemClock_Config+0xdc>)
 800034a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800034e:	4a1b      	ldr	r2, [pc, #108]	@ (80003bc <SystemClock_Config+0xdc>)
 8000350:	f023 0318 	bic.w	r3, r3, #24
 8000354:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSIS;
 8000358:	2324      	movs	r3, #36	@ 0x24
 800035a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800035c:	2381      	movs	r3, #129	@ 0x81
 800035e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8000364:	2300      	movs	r3, #0
 8000366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV2;
 8000368:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800036c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	4618      	mov	r0, r3
 8000374:	f001 f9e6 	bl	8001744 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800037e:	f000 f923 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	231f      	movs	r3, #31
 8000384:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	463b      	mov	r3, r7
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fd26 	bl	8001df0 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xce>
  {
    Error_Handler();
 80003aa:	f000 f90d 	bl	80005c8 <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3750      	adds	r7, #80	@ 0x50
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40022000 	.word	0x40022000
 80003bc:	40030c00 	.word	0x40030c00

080003c0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 fdff 	bl	8000fc8 <HAL_ICACHE_ConfigAssociativityMode>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003d0:	f000 f8fa 	bl	80005c8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003d4:	f000 fe18 	bl	8001008 <HAL_ICACHE_Enable>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003de:	f000 f8f3 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPTIM1_Init 0 */

  /* USER CODE END LPTIM1_Init 0 */

  LPTIM_OC_ConfigTypeDef sConfig1 = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80003f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 80003f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000478 <MX_LPTIM1_Init+0x90>)
 80003fa:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000402:	4b1c      	ldr	r3, [pc, #112]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000408:	4b1a      	ldr	r3, [pc, #104]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 800040a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800040e:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 327;
 8000410:	4b18      	ldr	r3, [pc, #96]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 8000412:	f240 1247 	movw	r2, #327	@ 0x147
 8000416:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000418:	4b16      	ldr	r3, [pc, #88]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 8000420:	2200      	movs	r2, #0
 8000422:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 8000426:	2200      	movs	r2, #0
 8000428:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 800042c:	2200      	movs	r2, #0
 800042e:	631a      	str	r2, [r3, #48]	@ 0x30
  hlptim1.Init.RepetitionCounter = 0;
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 8000432:	2200      	movs	r2, #0
 8000434:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000436:	480f      	ldr	r0, [pc, #60]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 8000438:	f000 fdf6 	bl	8001028 <HAL_LPTIM_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_LPTIM1_Init+0x5e>
  {
    Error_Handler();
 8000442:	f000 f8c1 	bl	80005c8 <Error_Handler>
  }
  sConfig1.Pulse = 164;
 8000446:	23a4      	movs	r3, #164	@ 0xa4
 8000448:	603b      	str	r3, [r7, #0]
  sConfig1.OCPolarity = LPTIM_OCPOLARITY_HIGH;
 800044a:	2300      	movs	r3, #0
 800044c:	607b      	str	r3, [r7, #4]
  if (HAL_LPTIM_OC_ConfigChannel(&hlptim1, &sConfig1, LPTIM_CHANNEL_1) != HAL_OK)
 800044e:	463b      	mov	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	4807      	ldr	r0, [pc, #28]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 8000456:	f000 ff51 	bl	80012fc <HAL_LPTIM_OC_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_LPTIM1_Init+0x7c>
  {
    Error_Handler();
 8000460:	f000 f8b2 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */
  HAL_LPTIM_MspPostInit(&hlptim1);
 8000464:	4803      	ldr	r0, [pc, #12]	@ (8000474 <MX_LPTIM1_Init+0x8c>)
 8000466:	f000 f907 	bl	8000678 <HAL_LPTIM_MspPostInit>

}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20030028 	.word	0x20030028
 8000478:	40044400 	.word	0x40044400

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	@ 0x28
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000492:	4b47      	ldr	r3, [pc, #284]	@ (80005b0 <MX_GPIO_Init+0x134>)
 8000494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000498:	4a45      	ldr	r2, [pc, #276]	@ (80005b0 <MX_GPIO_Init+0x134>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004a2:	4b43      	ldr	r3, [pc, #268]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	613b      	str	r3, [r7, #16]
 80004ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b0:	4b3f      	ldr	r3, [pc, #252]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004b6:	4a3e      	ldr	r2, [pc, #248]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004c0:	4b3b      	ldr	r3, [pc, #236]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b38      	ldr	r3, [pc, #224]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004d4:	4a36      	ldr	r2, [pc, #216]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004de:	4b34      	ldr	r3, [pc, #208]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ec:	4b30      	ldr	r3, [pc, #192]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004f2:	4a2f      	ldr	r2, [pc, #188]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004fc:	4b2c      	ldr	r3, [pc, #176]	@ (80005b0 <MX_GPIO_Init+0x134>)
 80004fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800050a:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <MX_GPIO_Init+0x134>)
 800050c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000510:	4a27      	ldr	r2, [pc, #156]	@ (80005b0 <MX_GPIO_Init+0x134>)
 8000512:	f043 0308 	orr.w	r3, r3, #8
 8000516:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800051a:	4b25      	ldr	r3, [pc, #148]	@ (80005b0 <MX_GPIO_Init+0x134>)
 800051c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000520:	f003 0308 	and.w	r3, r3, #8
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC0 PC2 PC3
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3
 8000528:	f643 73cd 	movw	r3, #16333	@ 0x3fcd
 800052c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052e:	2303      	movs	r3, #3
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4619      	mov	r1, r3
 800053c:	481d      	ldr	r0, [pc, #116]	@ (80005b4 <MX_GPIO_Init+0x138>)
 800053e:	f000 fbb9 	bl	8000cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000542:	230b      	movs	r3, #11
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000546:	2303      	movs	r3, #3
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4619      	mov	r1, r3
 8000554:	4818      	ldr	r0, [pc, #96]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 8000556:	f000 fbad 	bl	8000cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800055a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800055e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000560:	2303      	movs	r3, #3
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	4813      	ldr	r0, [pc, #76]	@ (80005bc <MX_GPIO_Init+0x140>)
 8000570:	f000 fba0 	bl	8000cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000574:	f24e 53ff 	movw	r3, #58879	@ 0xe5ff
 8000578:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <MX_GPIO_Init+0x144>)
 800058a:	f000 fb93 	bl	8000cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800058e:	2304      	movs	r3, #4
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000592:	2303      	movs	r3, #3
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <MX_GPIO_Init+0x148>)
 80005a2:	f000 fb87 	bl	8000cb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005a6:	bf00      	nop
 80005a8:	3728      	adds	r7, #40	@ 0x28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40030c00 	.word	0x40030c00
 80005b4:	42020800 	.word	0x42020800
 80005b8:	42021c00 	.word	0x42021c00
 80005bc:	42020000 	.word	0x42020000
 80005c0:	42020400 	.word	0x42020400
 80005c4:	42020c00 	.word	0x42020c00

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <Error_Handler+0x8>

080005d4 <HAL_MspInit>:
void HAL_LPTIM_MspPostInit(LPTIM_HandleTypeDef *hlptim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <HAL_MspInit+0x30>)
 80005dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005e0:	4a08      	ldr	r2, [pc, #32]	@ (8000604 <HAL_MspInit+0x30>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <HAL_MspInit+0x30>)
 80005ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40030c00 	.word	0x40030c00

08000608 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0a2      	sub	sp, #136	@ 0x88
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2278      	movs	r2, #120	@ 0x78
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f001 ffcf 	bl	80025bc <memset>
  if(hlptim->Instance==LPTIM1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a13      	ldr	r2, [pc, #76]	@ (8000670 <HAL_LPTIM_MspInit+0x68>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d11f      	bne.n	8000668 <HAL_LPTIM_MspInit+0x60>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000628:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800062c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800062e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000632:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fd0c 	bl	8002058 <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_LPTIM_MspInit+0x42>
    {
      Error_Handler();
 8000646:	f7ff ffbf 	bl	80005c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <HAL_LPTIM_MspInit+0x6c>)
 800064c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000650:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <HAL_LPTIM_MspInit+0x6c>)
 8000652:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000656:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_LPTIM_MspInit+0x6c>)
 800065c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8000668:	bf00      	nop
 800066a:	3788      	adds	r7, #136	@ 0x88
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40044400 	.word	0x40044400
 8000674:	40030c00 	.word	0x40030c00

08000678 <HAL_LPTIM_MspPostInit>:

void HAL_LPTIM_MspPostInit(LPTIM_HandleTypeDef* hlptim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <HAL_LPTIM_MspPostInit+0x68>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d11e      	bne.n	80006d8 <HAL_LPTIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN LPTIM1_MspPostInit 0 */

    /* USER CODE END LPTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_LPTIM_MspPostInit+0x6c>)
 800069c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006a0:	4a10      	ldr	r2, [pc, #64]	@ (80006e4 <HAL_LPTIM_MspPostInit+0x6c>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <HAL_LPTIM_MspPostInit+0x6c>)
 80006ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
    /**LPTIM1 GPIO Configuration
    PC1     ------> LPTIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	4619      	mov	r1, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <HAL_LPTIM_MspPostInit+0x70>)
 80006d4:	f000 faee 	bl	8000cb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN LPTIM1_MspPostInit 1 */

    /* USER CODE END LPTIM1_MspPostInit 1 */
  }

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40044400 	.word	0x40044400
 80006e4:	40030c00 	.word	0x40030c00
 80006e8:	42020800 	.word	0x42020800

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <NMI_Handler+0x4>

080006f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <MemManage_Handler+0x4>

08000704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <UsageFault_Handler+0x4>

08000714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000742:	f000 f945 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	@ (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000776:	4b2c      	ldr	r3, [pc, #176]	@ (8000828 <SystemCoreClockUpdate+0xb8>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 030c 	and.w	r3, r3, #12
 800077e:	2b08      	cmp	r3, #8
 8000780:	d034      	beq.n	80007ec <SystemCoreClockUpdate+0x7c>
 8000782:	2b08      	cmp	r3, #8
 8000784:	d836      	bhi.n	80007f4 <SystemCoreClockUpdate+0x84>
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <SystemCoreClockUpdate+0x20>
 800078a:	2b04      	cmp	r3, #4
 800078c:	d02a      	beq.n	80007e4 <SystemCoreClockUpdate+0x74>
 800078e:	e031      	b.n	80007f4 <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <SystemCoreClockUpdate+0xb8>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00f      	beq.n	80007c0 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	da03      	bge.n	80007ae <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 80007a6:	4b21      	ldr	r3, [pc, #132]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 80007a8:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <SystemCoreClockUpdate+0xc0>)
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e002      	b.n	80007b4 <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 80007b0:	4a20      	ldr	r2, [pc, #128]	@ (8000834 <SystemCoreClockUpdate+0xc4>)
 80007b2:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0f5b      	lsrs	r3, r3, #29
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	e009      	b.n	80007d4 <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 80007c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <SystemCoreClockUpdate+0xc0>)
 80007c4:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <SystemCoreClockUpdate+0xb8>)
 80007c8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80007cc:	0b1b      	lsrs	r3, r3, #12
 80007ce:	f003 0303 	and.w	r3, r3, #3
 80007d2:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	fa22 f303 	lsr.w	r3, r2, r3
 80007de:	4a13      	ldr	r2, [pc, #76]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 80007e0:	6013      	str	r3, [r2, #0]
    break;
 80007e2:	e00c      	b.n	80007fe <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 80007e6:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <SystemCoreClockUpdate+0xc8>)
 80007e8:	601a      	str	r2, [r3, #0]
    break;
 80007ea:	e008      	b.n	80007fe <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <SystemCoreClockUpdate+0xc8>)
 80007f0:	601a      	str	r2, [r3, #0]
    break;
 80007f2:	e004      	b.n	80007fe <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 80007f6:	f04f 32ff 	mov.w	r2, #4294967295
 80007fa:	601a      	str	r2, [r3, #0]
    break;
 80007fc:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <SystemCoreClockUpdate+0xb8>)
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <SystemCoreClockUpdate+0xcc>)
 8000808:	5cd3      	ldrb	r3, [r2, r3]
 800080a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	fa22 f303 	lsr.w	r3, r2, r3
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <SystemCoreClockUpdate+0xbc>)
 8000818:	6013      	str	r3, [r2, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40030c00 	.word	0x40030c00
 800082c:	20030000 	.word	0x20030000
 8000830:	016e3600 	.word	0x016e3600
 8000834:	05b8d800 	.word	0x05b8d800
 8000838:	00f42400 	.word	0x00f42400
 800083c:	0800262c 	.word	0x0800262c

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000878 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f7ff ff82 	bl	800074c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000848:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800084a:	e003      	b.n	8000854 <LoopCopyDataInit>

0800084c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800084c:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800084e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000850:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000852:	3104      	adds	r1, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000854:	480a      	ldr	r0, [pc, #40]	@ (8000880 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000856:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000858:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800085a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800085c:	d3f6      	bcc.n	800084c <CopyDataInit>
	ldr	r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000860:	e002      	b.n	8000868 <LoopFillZerobss>

08000862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000862:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000864:	f842 3b04 	str.w	r3, [r2], #4

08000868 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <LoopForever+0x16>)
	cmp	r2, r3
 800086a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800086c:	d3f9      	bcc.n	8000862 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800086e:	f001 fead 	bl	80025cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff fcff 	bl	8000274 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000878:	20032000 	.word	0x20032000
	ldr	r3, =_sidata
 800087c:	08002644 	.word	0x08002644
	ldr	r0, =_sdata
 8000880:	20030000 	.word	0x20030000
	ldr	r3, =_edata
 8000884:	2003000c 	.word	0x2003000c
	ldr	r2, =_sbss
 8000888:	2003000c 	.word	0x2003000c
	ldr	r3, = _ebss
 800088c:	2003007c 	.word	0x2003007c

08000890 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_IRQHandler>
	...

08000894 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <HAL_Init+0x3c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0c      	ldr	r2, [pc, #48]	@ (80008d0 <HAL_Init+0x3c>)
 800089e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f966 	bl	8000b76 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 80008aa:	f7ff ff61 	bl	8000770 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008ae:	2004      	movs	r0, #4
 80008b0:	f000 f9a8 	bl	8000c04 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008b4:	200f      	movs	r0, #15
 80008b6:	f000 f80d 	bl	80008d4 <HAL_InitTick>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e002      	b.n	80008ca <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff fe86 	bl	80005d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <HAL_InitTick+0xe8>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e062      	b.n	80009b2 <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80008ec:	4b34      	ldr	r3, [pc, #208]	@ (80009c0 <HAL_InitTick+0xec>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d10c      	bne.n	8000912 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80008f8:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <HAL_InitTick+0xf0>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <HAL_InitTick+0xe8>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e03d      	b.n	800098e <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <HAL_InitTick+0xf4>)
 8000914:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000918:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800091c:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000924:	d025      	beq.n	8000972 <HAL_InitTick+0x9e>
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800092c:	d82e      	bhi.n	800098c <HAL_InitTick+0xb8>
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d004      	beq.n	800093e <HAL_InitTick+0x6a>
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800093a:	d00d      	beq.n	8000958 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 800093c:	e026      	b.n	800098c <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800093e:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <HAL_InitTick+0xf0>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <HAL_InitTick+0xe8>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800094c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000950:	fbb2 f3f3 	udiv	r3, r2, r3
 8000954:	60fb      	str	r3, [r7, #12]
        break;
 8000956:	e01a      	b.n	800098e <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_InitTick+0xe8>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000962:	fbb3 f3f2 	udiv	r3, r3, r2
 8000966:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	60fb      	str	r3, [r7, #12]
        break;
 8000970:	e00d      	b.n	800098e <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_InitTick+0xe8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800097c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000980:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000984:	fbb2 f3f3 	udiv	r3, r2, r3
 8000988:	60fb      	str	r3, [r7, #12]
        break;
 800098a:	e000      	b.n	800098e <HAL_InitTick+0xba>
        break;
 800098c:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f916 	bl	8000bc0 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e009      	b.n	80009b2 <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099e:	2200      	movs	r2, #0
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	f04f 30ff 	mov.w	r0, #4294967295
 80009a6:	f000 f8f1 	bl	8000b8c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <HAL_InitTick+0xf8>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20030008 	.word	0x20030008
 80009c0:	e000e010 	.word	0xe000e010
 80009c4:	20030000 	.word	0x20030000
 80009c8:	40030c00 	.word	0x40030c00
 80009cc:	20030004 	.word	0x20030004

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20030008 	.word	0x20030008
 80009f4:	20030078 	.word	0x20030078

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20030078 	.word	0x20030078

08000a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff ffee 	bl	80009f8 <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d005      	beq.n	8000a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_Delay+0x44>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a36:	bf00      	nop
 8000a38:	f7ff ffde 	bl	80009f8 <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <HAL_Delay+0x28>
  {
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20030008 	.word	0x20030008

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	@ (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	@ 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	@ 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff6a 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9a:	f7ff ff81 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000b9e:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	6978      	ldr	r0, [r7, #20]
 8000ba6:	f7ff ffb3 	bl	8000b10 <NVIC_EncodePriority>
 8000baa:	4602      	mov	r2, r0
 8000bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff82 	bl	8000abc <__NVIC_SetPriority>
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd0:	d301      	bcc.n	8000bd6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e00d      	b.n	8000bf2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_SYSTICK_Config+0x40>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <HAL_SYSTICK_Config+0x40>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_SYSTICK_Config+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <HAL_SYSTICK_Config+0x40>)
 8000bea:	f043 0303 	orr.w	r3, r3, #3
 8000bee:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d844      	bhi.n	8000c9c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000c12:	a201      	add	r2, pc, #4	@ (adr r2, 8000c18 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c3b 	.word	0x08000c3b
 8000c1c:	08000c59 	.word	0x08000c59
 8000c20:	08000c7b 	.word	0x08000c7b
 8000c24:	08000c9d 	.word	0x08000c9d
 8000c28:	08000c2d 	.word	0x08000c2d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1e      	ldr	r2, [pc, #120]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6013      	str	r3, [r2, #0]
      break;
 8000c38:	e031      	b.n	8000c9e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c40:	f023 0304 	bic.w	r3, r3, #4
 8000c44:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000c46:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c48:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c4c:	4a18      	ldr	r2, [pc, #96]	@ (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c4e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c52:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8000c56:	e022      	b.n	8000c9e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a13      	ldr	r2, [pc, #76]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c5e:	f023 0304 	bic.w	r3, r3, #4
 8000c62:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c66:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c6a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c6e:	4a10      	ldr	r2, [pc, #64]	@ (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c74:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8000c78:	e011      	b.n	8000c9e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c80:	f023 0304 	bic.w	r3, r3, #4
 8000c84:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c88:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c8c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c90:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c96:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8000c9a:	e000      	b.n	8000c9e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000c9c:	bf00      	nop
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010
 8000cb0:	40030c00 	.word	0x40030c00

08000cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cc2:	e162      	b.n	8000f8a <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 8154 	beq.w	8000f84 <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d005      	beq.n	8000cf4 <HAL_GPIO_Init+0x40>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d130      	bne.n	8000d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	f003 0201 	and.w	r2, r3, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d109      	bne.n	8000d76 <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d11b      	bne.n	8000da6 <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d017      	beq.n	8000da6 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d123      	bne.n	8000dfa <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	08da      	lsrs	r2, r3, #3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3208      	adds	r2, #8
 8000df4:	6939      	ldr	r1, [r7, #16]
 8000df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0203 	and.w	r2, r3, #3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80a4 	beq.w	8000f84 <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3318      	adds	r3, #24
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a52      	ldr	r2, [pc, #328]	@ (8000fac <HAL_GPIO_Init+0x2f8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d025      	beq.n	8000eb4 <HAL_GPIO_Init+0x200>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a51      	ldr	r2, [pc, #324]	@ (8000fb0 <HAL_GPIO_Init+0x2fc>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d01f      	beq.n	8000eb0 <HAL_GPIO_Init+0x1fc>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a50      	ldr	r2, [pc, #320]	@ (8000fb4 <HAL_GPIO_Init+0x300>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d019      	beq.n	8000eac <HAL_GPIO_Init+0x1f8>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb8 <HAL_GPIO_Init+0x304>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1f4>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4e      	ldr	r2, [pc, #312]	@ (8000fbc <HAL_GPIO_Init+0x308>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1f0>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc0 <HAL_GPIO_Init+0x30c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1ec>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc4 <HAL_GPIO_Init+0x310>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e8>
 8000e98:	2307      	movs	r3, #7
 8000e9a:	e00c      	b.n	8000eb6 <HAL_GPIO_Init+0x202>
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	e00a      	b.n	8000eb6 <HAL_GPIO_Init+0x202>
 8000ea0:	2306      	movs	r3, #6
 8000ea2:	e008      	b.n	8000eb6 <HAL_GPIO_Init+0x202>
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x202>
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e004      	b.n	8000eb6 <HAL_GPIO_Init+0x202>
 8000eac:	2302      	movs	r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x202>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e000      	b.n	8000eb6 <HAL_GPIO_Init+0x202>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	00d2      	lsls	r2, r2, #3
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000ec6:	4938      	ldr	r1, [pc, #224]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3318      	adds	r3, #24
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000efa:	4a2b      	ldr	r2, [pc, #172]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000f02:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f28:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f54:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_GPIO_Init+0x2f4>)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f47f ae95 	bne.w	8000cc4 <HAL_GPIO_Init+0x10>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	371c      	adds	r7, #28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40032000 	.word	0x40032000
 8000fac:	42020000 	.word	0x42020000
 8000fb0:	42020400 	.word	0x42020400
 8000fb4:	42020800 	.word	0x42020800
 8000fb8:	42020c00 	.word	0x42020c00
 8000fbc:	42021000 	.word	0x42021000
 8000fc0:	42021800 	.word	0x42021800
 8000fc4:	42021c00 	.word	0x42021c00

08000fc8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e007      	b.n	8000ff6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 0204 	bic.w	r2, r3, #4
 8000fee:	4905      	ldr	r1, [pc, #20]	@ (8001004 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	40030400 	.word	0x40030400

08001008 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_ICACHE_Enable+0x1c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_ICACHE_Enable+0x1c>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40030400 	.word	0x40030400

08001028 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0e7      	b.n	800120a <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d106      	bne.n	800105a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fad7 	bl	8000608 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2202      	movs	r2, #2
 800105e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0201 	orr.w	r2, r2, #1
 8001070:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800107a:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8001086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f96a 	bl	8001364 <LPTIM_WaitForFlag>
 8001090:	4603      	mov	r3, r0
 8001092:	2b03      	cmp	r3, #3
 8001094:	d101      	bne.n	800109a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e0b7      	b.n	800120a <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2210      	movs	r2, #16
 80010a0:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6a12      	ldr	r2, [r2, #32]
 80010aa:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80010ac:	2110      	movs	r1, #16
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f958 	bl	8001364 <LPTIM_WaitForFlag>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d101      	bne.n	80010be <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e0a5      	b.n	800120a <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10e      	bne.n	80010ea <HAL_LPTIM_Init+0xc2>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d107      	bne.n	80010ea <HAL_LPTIM_Init+0xc2>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d004      	beq.n	8001104 <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001102:	d103      	bne.n	800110c <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f023 031e 	bic.w	r3, r3, #30
 800110a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001114:	4293      	cmp	r3, r2
 8001116:	d005      	beq.n	8001124 <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800111e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001122:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4b3b      	ldr	r3, [pc, #236]	@ (8001214 <HAL_LPTIM_Init+0x1ec>)
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001134:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.Clock.Prescaler |
 800113a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8001140:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d107      	bne.n	8001160 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001158:	4313      	orrs	r3, r2
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d004      	beq.n	8001172 <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001170:	d107      	bne.n	8001182 <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800117a:	4313      	orrs	r3, r2
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118a:	4293      	cmp	r3, r2
 800118c:	d00a      	beq.n	80011a4 <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001196:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800119c:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a19      	ldr	r2, [pc, #100]	@ (8001218 <HAL_LPTIM_Init+0x1f0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d004      	beq.n	80011c0 <HAL_LPTIM_Init+0x198>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a18      	ldr	r2, [pc, #96]	@ (800121c <HAL_LPTIM_Init+0x1f4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d108      	bne.n	80011d2 <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80011d0:	e00e      	b.n	80011f0 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <HAL_LPTIM_Init+0x1f8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d004      	beq.n	80011e6 <HAL_LPTIM_Init+0x1be>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <HAL_LPTIM_Init+0x1fc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d104      	bne.n	80011f0 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011ee:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	ff39f1fe 	.word	0xff39f1fe
 8001218:	40044400 	.word	0x40044400
 800121c:	40009400 	.word	0x40009400
 8001220:	40044800 	.word	0x40044800
 8001224:	40044c00 	.word	0x40044c00

08001228 <HAL_LPTIM_PWM_Start>:
  *            @arg LPTIM_CHANNEL_1: LPTIM Channel 1 selected
  *            @arg LPTIM_CHANNEL_2: LPTIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Channel)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));

  /* Check LPTIM channel state */
  if (LPTIM_CHANNEL_STATE_GET(hlptim, Channel) != HAL_LPTIM_CHANNEL_STATE_READY)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d109      	bne.n	800124c <HAL_LPTIM_PWM_Start+0x24>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	e008      	b.n	800125e <HAL_LPTIM_PWM_Start+0x36>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b01      	cmp	r3, #1
 8001256:	bf14      	ite	ne
 8001258:	2301      	movne	r3, #1
 800125a:	2300      	moveq	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_LPTIM_PWM_Start+0x3e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e044      	b.n	80012f0 <HAL_LPTIM_PWM_Start+0xc8>
  }

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2202      	movs	r2, #2
 800126a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Set the LPTIM channel state */
  LPTIM_CHANNEL_STATE_SET(hlptim, Channel, HAL_LPTIM_CHANNEL_STATE_BUSY);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d104      	bne.n	800127e <HAL_LPTIM_PWM_Start+0x56>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2202      	movs	r2, #2
 8001278:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800127c:	e003      	b.n	8001286 <HAL_LPTIM_PWM_Start+0x5e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2202      	movs	r2, #2
 8001282:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8001294:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	611a      	str	r2, [r3, #16]

  /* Enable LPTIM signal on the corresponding output pin */
  __HAL_LPTIM_CAPTURE_COMPARE_ENABLE(hlptim, Channel);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_LPTIM_PWM_Start+0x8c>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d009      	beq.n	80012c6 <HAL_LPTIM_PWM_Start+0x9e>
 80012b2:	e010      	b.n	80012d6 <HAL_LPTIM_PWM_Start+0xae>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0202 	orr.w	r2, r2, #2
 80012c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012c4:	e007      	b.n	80012d6 <HAL_LPTIM_PWM_Start+0xae>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f042 0204 	orr.w	r2, r2, #4
 80012e4:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_LPTIM_OC_ConfigChannel>:
  *         this delay, leads to unpredictable results.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_OC_ConfigChannel(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig,
                                             uint32_t Channel)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_CCX_INSTANCE(hlptim->Instance, Channel));
  assert_param(IS_LPTIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_LPTIM_PULSE(sConfig->Pulse));

  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  switch (Channel)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_LPTIM_OC_ConfigChannel+0x22>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00b      	beq.n	8001334 <HAL_LPTIM_OC_ConfigChannel+0x38>
        return status;
      }
      break;
    }
    default:
      break;
 800131c:	e018      	b.n	8001350 <HAL_LPTIM_OC_ConfigChannel+0x54>
      status = LPTIM_OC1_SetConfig(hlptim, sConfig);
 800131e:	68b9      	ldr	r1, [r7, #8]
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 f84f 	bl	80013c4 <LPTIM_OC1_SetConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00c      	beq.n	800134a <HAL_LPTIM_OC_ConfigChannel+0x4e>
        return status;
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	e012      	b.n	800135a <HAL_LPTIM_OC_ConfigChannel+0x5e>
      status = LPTIM_OC2_SetConfig(hlptim, sConfig);
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 f890 	bl	800145c <LPTIM_OC2_SetConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_LPTIM_OC_ConfigChannel+0x52>
        return status;
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	e007      	b.n	800135a <HAL_LPTIM_OC_ConfigChannel+0x5e>
      break;
 800134a:	bf00      	nop
 800134c:	e000      	b.n	8001350 <HAL_LPTIM_OC_ConfigChannel+0x54>
      break;
 800134e:	bf00      	nop
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <LPTIM_WaitForFlag+0x58>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <LPTIM_WaitForFlag+0x5c>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0b9b      	lsrs	r3, r3, #14
 800137e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3b01      	subs	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	4013      	ands	r3, r2
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d002      	beq.n	80013ae <LPTIM_WaitForFlag+0x4a>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1ec      	bne.n	8001388 <LPTIM_WaitForFlag+0x24>

  return result;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	20030000 	.word	0x20030000
 80013c0:	d1b71759 	.word	0xd1b71759

080013c4 <LPTIM_OC1_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC1_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d4:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC1P_Msk | LPTIM_CCMR1_CC1SEL_Msk);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f023 030d 	bic.w	r3, r3, #13
 80013dc:	60fb      	str	r3, [r7, #12]

  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC1P_Pos;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0201 	orr.w	r2, r2, #1
 80013f8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2208      	movs	r2, #8
 8001400:	605a      	str	r2, [r3, #4]

  /* Write to CCR1 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_1, sConfig->Pulse);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CCR1 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP1OK) == HAL_TIMEOUT)
 800140c:	2108      	movs	r1, #8
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ffa8 	bl	8001364 <LPTIM_WaitForFlag>
 8001414:	4603      	mov	r3, r0
 8001416:	2b03      	cmp	r3, #3
 8001418:	d101      	bne.n	800141e <LPTIM_OC1_SetConfig+0x5a>
  {
    return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e01a      	b.n	8001454 <LPTIM_OC1_SetConfig+0x90>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10e      	bne.n	800144a <LPTIM_OC1_SetConfig+0x86>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d107      	bne.n	800144a <LPTIM_OC1_SetConfig+0x86>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <LPTIM_OC2_SetConfig>:
  *                the configuration information for LPTIM module.
  * @param  sConfig The output configuration structure
  * @retval None
  */
static HAL_StatusTypeDef LPTIM_OC2_SetConfig(LPTIM_HandleTypeDef *hlptim, const LPTIM_OC_ConfigTypeDef *sConfig)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1;

  tmpccmr1 = hlptim->Instance->CCMR1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146c:	60fb      	str	r3, [r7, #12]
  tmpccmr1 &= ~(LPTIM_CCMR1_CC2P_Msk | LPTIM_CCMR1_CC2SEL_Msk);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8001474:	60fb      	str	r3, [r7, #12]
  tmpccmr1 |= sConfig->OCPolarity << LPTIM_CCMR1_CC2P_Pos;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	049b      	lsls	r3, r3, #18
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800149a:	605a      	str	r2, [r3, #4]

  /* Write to CCR2 register */
  __HAL_LPTIM_COMPARE_SET(hlptim, LPTIM_CHANNEL_2, sConfig->Pulse);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Wait for the completion of the write operation to the LPTIM_CCR2 register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMP2OK) != HAL_OK)
 80014a6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ff5a 	bl	8001364 <LPTIM_WaitForFlag>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <LPTIM_OC2_SetConfig+0x5e>
  {
    return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e01a      	b.n	80014f0 <LPTIM_OC2_SetConfig+0x94>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10e      	bne.n	80014e6 <LPTIM_OC2_SetConfig+0x8a>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <LPTIM_OC2_SetConfig+0x8a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0201 	bic.w	r2, r2, #1
 80014e4:	611a      	str	r2, [r3, #16]

  /* Write to CCMR1 register */
  hlptim->Instance->CCMR1 = tmpccmr1;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->DBPR, PWR_DBPR_DBP);
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_PWR_EnableBkUpAccess+0x14>)
 80014fe:	2201      	movs	r2, #1
 8001500:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40030800 	.word	0x40030800

08001510 <HAL_PWR_EnterSTOPMode>:
  *                     @arg @ref PWR_STOPENTRY_WFE_NO_EVT_CLEAR enter Stop mode with Wait
  *                               For Event request and no clear of pending event before.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode(uint32_t StopMode, uint8_t STOPEntry)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_PWR_STOPMODE(StopMode));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Configure Stop mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, StopMode);
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_PWR_EnterSTOPMode+0x58>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 0207 	bic.w	r2, r3, #7
 8001524:	4910      	ldr	r1, [pc, #64]	@ (8001568 <HAL_PWR_EnterSTOPMode+0x58>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_PWR_EnterSTOPMode+0x5c>)
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_PWR_EnterSTOPMode+0x5c>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Wait For Interrupt Request */
    __WFI();
 800153e:	bf30      	wfi
 8001540:	e005      	b.n	800154e <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if (STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b03      	cmp	r3, #3
 8001546:	d001      	beq.n	800154c <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8001548:	bf40      	sev
      __WFE();
 800154a:	bf20      	wfe
    }

    /* Request Wait For Event */
    __WFE();
 800154c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <HAL_PWR_EnterSTOPMode+0x5c>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	4a06      	ldr	r2, [pc, #24]	@ (800156c <HAL_PWR_EnterSTOPMode+0x5c>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6113      	str	r3, [r2, #16]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40030800 	.word	0x40030800
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 8001578:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f023 0303 	bic.w	r3, r3, #3
 8001580:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2232      	movs	r2, #50	@ 0x32
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	0c9b      	lsrs	r3, r3, #18
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	041b      	lsls	r3, r3, #16
 80015aa:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 80015ac:	e002      	b.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4013      	ands	r3, r2
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d002      	beq.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x58>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f2      	bne.n	80015ae <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e000      	b.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 80015d2:	2300      	movs	r3, #0
  }
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40030800 	.word	0x40030800
 80015e4:	20030000 	.word	0x20030000
 80015e8:	431bde83 	.word	0x431bde83

080015ec <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <HAL_PWREx_EnableEpodBooster+0x54>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <HAL_PWREx_EnableEpodBooster+0x54>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fc:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80015fe:	f7ff f9fb 	bl	80009f8 <HAL_GetTick>
 8001602:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8001604:	e00f      	b.n	8001626 <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8001606:	f7ff f9f7 	bl	80009f8 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b01      	cmp	r3, #1
 8001612:	d908      	bls.n	8001626 <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_PWREx_EnableEpodBooster+0x54>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001620:	d001      	beq.n	8001626 <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e007      	b.n	8001636 <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_PWREx_EnableEpodBooster+0x54>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800162e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001632:	d1e8      	bne.n	8001606 <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40030800 	.word	0x40030800

08001644 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_MODE_CHANGE_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800164c:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HAL_PWREx_ConfigSupply+0x8c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2232      	movs	r2, #50	@ 0x32
 8001652:	fb02 f303 	mul.w	r3, r2, r3
 8001656:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <HAL_PWREx_ConfigSupply+0x90>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply  */
  if (SupplySource == PWR_LDO_SUPPLY)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d113      	bne.n	8001690 <HAL_PWREx_ConfigSupply+0x4c>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <HAL_PWREx_ConfigSupply+0x94>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a1a      	ldr	r2, [pc, #104]	@ (80016d8 <HAL_PWREx_ConfigSupply+0x94>)
 800166e:	f023 0302 	bic.w	r3, r3, #2
 8001672:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001674:	e002      	b.n	800167c <HAL_PWREx_ConfigSupply+0x38>
    {
      timeout--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3b01      	subs	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_PWREx_ConfigSupply+0x94>)
 800167e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b02      	cmp	r3, #2
 8001686:	d116      	bne.n	80016b6 <HAL_PWREx_ConfigSupply+0x72>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f3      	bne.n	8001676 <HAL_PWREx_ConfigSupply+0x32>
 800168e:	e012      	b.n	80016b6 <HAL_PWREx_ConfigSupply+0x72>
  }
  /* Configure the SMPS as system regulator supply  */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_PWREx_ConfigSupply+0x94>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a10      	ldr	r2, [pc, #64]	@ (80016d8 <HAL_PWREx_ConfigSupply+0x94>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800169c:	e002      	b.n	80016a4 <HAL_PWREx_ConfigSupply+0x60>
    {
      timeout--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_PWREx_ConfigSupply+0x94>)
 80016a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <HAL_PWREx_ConfigSupply+0x72>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f3      	bne.n	800169e <HAL_PWREx_ConfigSupply+0x5a>
    }
  }

  /* Check time out  */
  if (timeout == 0U)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_PWREx_ConfigSupply+0x7c>
  {
    return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e000      	b.n	80016c2 <HAL_PWREx_ConfigSupply+0x7e>
  }

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20030000 	.word	0x20030000
 80016d4:	431bde83 	.word	0x431bde83
 80016d8:	40030800 	.word	0x40030800

080016dc <HAL_PWREx_EnableRAMsPowerDown>:
  *                      @arg PWR_SRAM1_POWERDOWN  : SRAM1 powered off.
  *                      @arg PWR_SRAM2_POWERDOWN  : SRAM2 powered off.
  * @retval None.
  */
void HAL_PWREx_EnableRAMsPowerDown(uint32_t RAMSelection)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_RAM_POWERDOWN(RAMSelection));

  /* SRAMi powered off */
  SET_BIT(PWR->CR1, RAMSelection);
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_PWREx_EnableRAMsPowerDown+0x20>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4904      	ldr	r1, [pc, #16]	@ (80016fc <HAL_PWREx_EnableRAMsPowerDown+0x20>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40030800 	.word	0x40030800

08001700 <HAL_PWREx_DisableRAMsContentStopRetention>:
  *                      @arg PWR_FDCAN_USB_STOP_RETENTION   : FDCAN & USB SRAM retention.
  *                      @arg PWR_PKA_STOP_RETENTION         : PKA SRAM retention.
  * @retval None.
  */
void HAL_PWREx_DisableRAMsContentStopRetention(uint32_t RAMSelection)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_RAM_STOP_RETENTION(RAMSelection));

  /* Disable RAM retention in Stop mode */
  SET_BIT(PWR->CR2, RAMSelection);
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_PWREx_DisableRAMsContentStopRetention+0x20>)
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4904      	ldr	r1, [pc, #16]	@ (8001720 <HAL_PWREx_DisableRAMsContentStopRetention+0x20>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40030800 	.word	0x40030800

08001724 <HAL_PWREx_DisableFlashFastWakeUp>:
  *         mode in Stop 0 and Stop 1 modes, which causes a slower startup time
  *         with lower consumption.
  * @retval None.
  */
void HAL_PWREx_DisableFlashFastWakeUp(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_FLASHFWU);
 8001728:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <HAL_PWREx_DisableFlashFastWakeUp+0x1c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a04      	ldr	r2, [pc, #16]	@ (8001740 <HAL_PWREx_DisableFlashFastWakeUp+0x1c>)
 800172e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8001732:	6053      	str	r3, [r2, #4]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40030800 	.word	0x40030800

08001744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e340      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001756:	4b98      	ldr	r3, [pc, #608]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80ad 	beq.w	80018c8 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	f040 80a5 	bne.w	80018c8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e32a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d04f      	beq.n	800182a <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 8001794:	4b88      	ldr	r3, [pc, #544]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a87      	ldr	r2, [pc, #540]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800179a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e02f      	b.n	8001802 <HAL_RCC_OscConfig+0xbe>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x82>
 80017ac:	4b82      	ldr	r3, [pc, #520]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a81      	ldr	r2, [pc, #516]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b7f      	ldr	r3, [pc, #508]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a7e      	ldr	r2, [pc, #504]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e01d      	b.n	8001802 <HAL_RCC_OscConfig+0xbe>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0xa6>
 80017d0:	4b79      	ldr	r3, [pc, #484]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a78      	ldr	r2, [pc, #480]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017d6:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a75      	ldr	r2, [pc, #468]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0xbe>
 80017ea:	4b73      	ldr	r3, [pc, #460]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a72      	ldr	r2, [pc, #456]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b70      	ldr	r3, [pc, #448]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6f      	ldr	r2, [pc, #444]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017fc:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8001800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff f8f9 	bl	80009f8 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180a:	f7ff f8f5 	bl	80009f8 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	@ 0x64
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e2dd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181c:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0xc6>
 8001828:	e04e      	b.n	80018c8 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0xfe>
 8001834:	4b60      	ldr	r3, [pc, #384]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a5f      	ldr	r2, [pc, #380]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800183a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	e02f      	b.n	80018a2 <HAL_RCC_OscConfig+0x15e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800184a:	d10c      	bne.n	8001866 <HAL_RCC_OscConfig+0x122>
 800184c:	4b5a      	ldr	r3, [pc, #360]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a59      	ldr	r2, [pc, #356]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001852:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b57      	ldr	r3, [pc, #348]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a56      	ldr	r2, [pc, #344]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e01d      	b.n	80018a2 <HAL_RCC_OscConfig+0x15e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x146>
 8001870:	4b51      	ldr	r3, [pc, #324]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a50      	ldr	r2, [pc, #320]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001876:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a4d      	ldr	r2, [pc, #308]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x15e>
 800188a:	4b4b      	ldr	r3, [pc, #300]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a4a      	ldr	r2, [pc, #296]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b48      	ldr	r3, [pc, #288]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a47      	ldr	r2, [pc, #284]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800189c:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a2:	f7ff f8a9 	bl	80009f8 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018aa:	f7ff f8a5 	bl	80009f8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b64      	cmp	r3, #100	@ 0x64
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e28d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018bc:	4b3e      	ldr	r3, [pc, #248]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d054      	beq.n	800197e <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d110      	bne.n	80018fc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e278      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	041b      	lsls	r3, r3, #16
 80018f4:	4930      	ldr	r1, [pc, #192]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	610b      	str	r3, [r1, #16]
 80018fa:	e040      	b.n	800197e <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001904:	4b2c      	ldr	r3, [pc, #176]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2b      	ldr	r2, [pc, #172]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800190a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800190e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f872 	bl	80009f8 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff f86e 	bl	80009f8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e256      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192a:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	041b      	lsls	r3, r3, #16
 8001944:	491c      	ldr	r1, [pc, #112]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001946:	4313      	orrs	r3, r2
 8001948:	610b      	str	r3, [r1, #16]
 800194a:	e018      	b.n	800197e <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff f84e 	bl	80009f8 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff f84a 	bl	80009f8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e232      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	d038      	beq.n	80019fc <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01b      	beq.n	80019ca <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff f82b 	bl	80009f8 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a6:	f7ff f827 	bl	80009f8 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d903      	bls.n	80019bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e20f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
 80019b8:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019bc:	4ba0      	ldr	r3, [pc, #640]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ee      	beq.n	80019a6 <HAL_RCC_OscConfig+0x262>
 80019c8:	e018      	b.n	80019fc <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ca:	4b9d      	ldr	r3, [pc, #628]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a9c      	ldr	r2, [pc, #624]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 80019d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f80f 	bl	80009f8 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019de:	f7ff f80b 	bl	80009f8 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1f3      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80019f0:	4b93      	ldr	r3, [pc, #588]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80a7 	beq.w	8001b58 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8001a0e:	4b8c      	ldr	r3, [pc, #560]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d110      	bne.n	8001a3e <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b88      	ldr	r3, [pc, #544]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a22:	4a87      	ldr	r2, [pc, #540]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a2c:	4b84      	ldr	r3, [pc, #528]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001a3e:	4b81      	ldr	r3, [pc, #516]	@ (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	4a80      	ldr	r2, [pc, #512]	@ (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d051      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 8001a52:	4b7b      	ldr	r3, [pc, #492]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001a54:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001a58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a5c:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 8001a68:	4a75      	ldr	r2, [pc, #468]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7fe ffc2 	bl	80009f8 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7fe ffbe 	bl	80009f8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1a4      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8e:	4b6c      	ldr	r3, [pc, #432]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001a90:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ed      	beq.n	8001a78 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01e      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7fe ffa5 	bl	80009f8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e18b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001ac2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0ed      	beq.n	8001aaa <HAL_RCC_OscConfig+0x366>
 8001ace:	e038      	b.n	8001b42 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7fe ff92 	bl	80009f8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e178      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ae6:	4b56      	ldr	r3, [pc, #344]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001ae8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ed      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x38c>
 8001af4:	e025      	b.n	8001b42 <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 8001af6:	4b52      	ldr	r3, [pc, #328]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001af8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001afc:	4a50      	ldr	r2, [pc, #320]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001afe:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8001b02:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b06:	4b4e      	ldr	r3, [pc, #312]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001b08:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7fe ff6f 	bl	80009f8 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7fe ff6b 	bl	80009f8 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e151      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b34:	4b42      	ldr	r3, [pc, #264]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001b36:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ed      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b42:	7efb      	ldrb	r3, [r7, #27]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d078      	beq.n	8001c56 <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8001b64:	4b36      	ldr	r3, [pc, #216]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001b66:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001b6a:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d050      	beq.n	8001c16 <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d023      	beq.n	8001bca <HAL_RCC_OscConfig+0x486>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01e      	beq.n	8001bca <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8001b94:	4a2a      	ldr	r2, [pc, #168]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7fe ff2c 	bl	80009f8 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7fe ff28 	bl	80009f8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b14      	cmp	r3, #20
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e110      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001bb8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ef      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7fe ff23 	bl	8000a10 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8001be4:	4a16      	ldr	r2, [pc, #88]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7fe ff04 	bl	80009f8 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7fe ff00 	bl	80009f8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b14      	cmp	r3, #20
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0e8      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001c08:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ef      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4b0>
 8001c14:	e01f      	b.n	8001c56 <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8001c1e:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_RCC_OscConfig+0x4fc>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c26:	f7fe fee7 	bl	80009f8 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8001c2c:	e00c      	b.n	8001c48 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7fe fee3 	bl	80009f8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b14      	cmp	r3, #20
 8001c3a:	d905      	bls.n	8001c48 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0cb      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
 8001c40:	40030c00 	.word	0x40030c00
 8001c44:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8001c48:	4b65      	ldr	r3, [pc, #404]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001c4a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1eb      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d068      	beq.n	8001d34 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b1      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 8001c74:	4b5a      	ldr	r3, [pc, #360]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a59      	ldr	r2, [pc, #356]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	e03b      	b.n	8001cfe <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 8001c86:	4b56      	ldr	r3, [pc, #344]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0305 	and.w	r3, r3, #5
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0a0      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 8001c96:	4b52      	ldr	r3, [pc, #328]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001c9e:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cb2:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8001cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d116      	bne.n	8001cee <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cc0:	f000 f982 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	4945      	ldr	r1, [pc, #276]	@ (8001de4 <HAL_RCC_OscConfig+0x6a0>)
 8001cd0:	5ccb      	ldrb	r3, [r1, r3]
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a44      	ldr	r2, [pc, #272]	@ (8001de8 <HAL_RCC_OscConfig+0x6a4>)
 8001cd8:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cda:	4b44      	ldr	r3, [pc, #272]	@ (8001dec <HAL_RCC_OscConfig+0x6a8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fdf8 	bl	80008d4 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e074      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 8001cee:	4b3c      	ldr	r3, [pc, #240]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfe:	f7fe fe7b 	bl	80009f8 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8001d04:	e00f      	b.n	8001d26 <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d06:	f7fe fe77 	bl	80009f8 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d908      	bls.n	8001d26 <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8001d14:	4b32      	ldr	r3, [pc, #200]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e058      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8001d26:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1e8      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d04a      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d108      	bne.n	8001d5a <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8001d48:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a24      	ldr	r2, [pc, #144]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d4e:	f023 0308 	bic.w	r3, r3, #8
 8001d52:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	e022      	b.n	8001da0 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0318 	and.w	r3, r3, #24
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e036      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 8001d72:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d88:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8001d8a:	4a15      	ldr	r2, [pc, #84]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da0:	f7fe fe2a 	bl	80009f8 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da8:	f7fe fe26 	bl	80009f8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d908      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e007      	b.n	8001dd8 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_RCC_OscConfig+0x69c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d1e8      	bne.n	8001da8 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40030c00 	.word	0x40030c00
 8001de4:	0800262c 	.word	0x0800262c
 8001de8:	20030000 	.word	0x20030000
 8001dec:	20030004 	.word	0x20030004

08001df0 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d2      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b68      	ldr	r3, [pc, #416]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020f 	bic.w	r2, r3, #15
 8001e1a:	4966      	ldr	r1, [pc, #408]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b64      	ldr	r3, [pc, #400]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0ba      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d040      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8001e40:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d106      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d113      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0a6      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d108      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e09b      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e094      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e80:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f023 0203 	bic.w	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	494a      	ldr	r1, [pc, #296]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e92:	f7fe fdb1 	bl	80009f8 <HAL_GetTick>
 8001e96:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9a:	f7fe fdad 	bl	80009f8 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e07c      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8001eb0:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f003 020c 	and.w	r2, r3, #12
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d1eb      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f023 030f 	bic.w	r3, r3, #15
 8001ede:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001eea:	2301      	movs	r3, #1
 8001eec:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f00:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f22:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8001f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f54:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d210      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 020f 	bic.w	r2, r3, #15
 8001f6a:	4912      	ldr	r1, [pc, #72]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e012      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f84:	f000 f820 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	490a      	ldr	r1, [pc, #40]	@ (8001fbc <HAL_RCC_ClockConfig+0x1cc>)
 8001f94:	5ccb      	ldrb	r3, [r1, r3]
 8001f96:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9a:	4a09      	ldr	r2, [pc, #36]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1d4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fc96 	bl	80008d4 <HAL_InitTick>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40030c00 	.word	0x40030c00
 8001fbc:	0800262c 	.word	0x0800262c
 8001fc0:	20030000 	.word	0x20030000
 8001fc4:	20030004 	.word	0x20030004

08001fc8 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x80>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCC_GetSysClockFreq+0x84>)
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	e029      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d102      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8001fea:	4b18      	ldr	r3, [pc, #96]	@ (800204c <HAL_RCC_GetSysClockFreq+0x84>)
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	e023      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x80>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00d      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	da02      	bge.n	800200c <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x88>)
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	e001      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x8c>)
 800200e:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0f5b      	lsrs	r3, r3, #29
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	e008      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x88>)
 800201e:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8002020:	4b09      	ldr	r3, [pc, #36]	@ (8002048 <HAL_RCC_GetSysClockFreq+0x80>)
 8002022:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002026:	0b1b      	lsrs	r3, r3, #12
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8002038:	683b      	ldr	r3, [r7, #0]
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40030c00 	.word	0x40030c00
 800204c:	00f42400 	.word	0x00f42400
 8002050:	016e3600 	.word	0x016e3600
 8002054:	05b8d800 	.word	0x05b8d800

08002058 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206c:	4bad      	ldr	r3, [pc, #692]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800206e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002072:	f023 0201 	bic.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	49aa      	ldr	r1, [pc, #680]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800208e:	4ba5      	ldr	r3, [pc, #660]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002090:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002094:	f023 0204 	bic.w	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	49a1      	ldr	r1, [pc, #644]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020b0:	4b9c      	ldr	r3, [pc, #624]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80020b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80020b6:	f023 0210 	bic.w	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	4999      	ldr	r1, [pc, #612]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020d2:	4b94      	ldr	r3, [pc, #592]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80020d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80020d8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	4990      	ldr	r1, [pc, #576]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 80020f4:	4b8b      	ldr	r3, [pc, #556]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80020f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80020fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	4988      	ldr	r1, [pc, #544]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002116:	4b83      	ldr	r3, [pc, #524]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002118:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800211c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	497f      	ldr	r1, [pc, #508]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002138:	4b7a      	ldr	r3, [pc, #488]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800213a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800213e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4977      	ldr	r1, [pc, #476]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 800215a:	4b72      	ldr	r3, [pc, #456]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800215c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002160:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	496e      	ldr	r1, [pc, #440]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 800217c:	4b69      	ldr	r3, [pc, #420]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800217e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002182:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	4966      	ldr	r1, [pc, #408]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800219e:	4b61      	ldr	r3, [pc, #388]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80021a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80021a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	495d      	ldr	r1, [pc, #372]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 80021c0:	4b58      	ldr	r3, [pc, #352]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80021c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80021c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	4955      	ldr	r1, [pc, #340]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 80021e2:	4b50      	ldr	r3, [pc, #320]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80021e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80021e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	494c      	ldr	r1, [pc, #304]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002204:	4b47      	ldr	r3, [pc, #284]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002206:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800220a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002212:	4944      	ldr	r1, [pc, #272]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 8002226:	4b3f      	ldr	r3, [pc, #252]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002228:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800222c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002234:	493b      	ldr	r1, [pc, #236]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 8002248:	4b36      	ldr	r3, [pc, #216]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800224a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800224e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002256:	4933      	ldr	r1, [pc, #204]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 800226a:	4b2e      	ldr	r3, [pc, #184]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800226c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002270:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	492a      	ldr	r1, [pc, #168]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800228e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002292:	f023 0203 	bic.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	4922      	ldr	r1, [pc, #136]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 80022ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80022b0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80022b4:	f023 0208 	bic.w	r2, r3, #8
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022bc:	4919      	ldr	r1, [pc, #100]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80022d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80022d6:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	4911      	ldr	r1, [pc, #68]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80022f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80022f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002300:	4908      	ldr	r1, [pc, #32]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d019      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002316:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800231a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	e002      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002322:	bf00      	nop
 8002324:	40030c00 	.word	0x40030c00
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	4980      	ldr	r1, [pc, #512]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 8002332:	4b7e      	ldr	r3, [pc, #504]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002334:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002338:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	497a      	ldr	r1, [pc, #488]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8002354:	4b75      	ldr	r3, [pc, #468]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002356:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800235a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	4972      	ldr	r1, [pc, #456]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 8002376:	4b6d      	ldr	r3, [pc, #436]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002378:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800237c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002384:	4969      	ldr	r1, [pc, #420]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002398:	4b64      	ldr	r3, [pc, #400]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800239a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023a6:	4961      	ldr	r1, [pc, #388]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ba:	4b5c      	ldr	r3, [pc, #368]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80023bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023c0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023c8:	4958      	ldr	r1, [pc, #352]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80023de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ea:	4950      	ldr	r1, [pc, #320]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fe:	4b4b      	ldr	r3, [pc, #300]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002400:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002404:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240c:	4947      	ldr	r1, [pc, #284]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f280 8082 	bge.w	8002522 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 800241e:	4b43      	ldr	r3, [pc, #268]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002420:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002424:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002428:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800242c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002430:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	d072      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8002440:	4b3a      	ldr	r3, [pc, #232]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d110      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b37      	ldr	r3, [pc, #220]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002454:	4a35      	ldr	r2, [pc, #212]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800245e:	4b33      	ldr	r3, [pc, #204]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800246c:	2301      	movs	r3, #1
 800246e:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002470:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8002472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002474:	4a2e      	ldr	r2, [pc, #184]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00f      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002482:	4b2a      	ldr	r3, [pc, #168]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002484:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002488:	4a28      	ldr	r2, [pc, #160]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002492:	4b26      	ldr	r3, [pc, #152]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002494:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002498:	4a24      	ldr	r2, [pc, #144]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800249e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024a8:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024be:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 80024c0:	4a1a      	ldr	r2, [pc, #104]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01c      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe fa91 	bl	80009f8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80024d8:	e011      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fa8d 	bl	80009f8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d908      	bls.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e012      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002500:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0e6      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800250c:	7efb      	ldrb	r3, [r7, #27]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800251a:	f023 0304 	bic.w	r3, r3, #4
 800251e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40030c00 	.word	0x40030c00
 8002530:	40030800 	.word	0x40030800

08002534 <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e027      	b.n	80025aa <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d107      	bne.n	8002570 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e01c      	b.n	80025aa <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d107      	bne.n	8002586 <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e011      	b.n	80025aa <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 8002586:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4313      	orrs	r3, r2
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4313      	orrs	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 80025a0:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40030c00 	.word	0x40030c00

080025bc <memset>:
 80025bc:	4402      	add	r2, r0
 80025be:	4603      	mov	r3, r0
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d100      	bne.n	80025c6 <memset+0xa>
 80025c4:	4770      	bx	lr
 80025c6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ca:	e7f9      	b.n	80025c0 <memset+0x4>

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002604 <__libc_init_array+0x38>)
 80025d0:	2600      	movs	r6, #0
 80025d2:	4c0d      	ldr	r4, [pc, #52]	@ (8002608 <__libc_init_array+0x3c>)
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	42a6      	cmp	r6, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	4d0b      	ldr	r5, [pc, #44]	@ (800260c <__libc_init_array+0x40>)
 80025de:	2600      	movs	r6, #0
 80025e0:	4c0b      	ldr	r4, [pc, #44]	@ (8002610 <__libc_init_array+0x44>)
 80025e2:	f000 f817 	bl	8002614 <_init>
 80025e6:	1b64      	subs	r4, r4, r5
 80025e8:	10a4      	asrs	r4, r4, #2
 80025ea:	42a6      	cmp	r6, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f4:	3601      	adds	r6, #1
 80025f6:	4798      	blx	r3
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fe:	3601      	adds	r6, #1
 8002600:	4798      	blx	r3
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	0800263c 	.word	0x0800263c
 8002608:	0800263c 	.word	0x0800263c
 800260c:	0800263c 	.word	0x0800263c
 8002610:	08002640 	.word	0x08002640

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
