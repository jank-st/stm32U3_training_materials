
SPI_Auto_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004054  08000234  08000234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004288  08004288  00005288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004298  08004298  00006084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004298  08004298  00006084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004298  08004298  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004298  08004298  00005298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800429c  0800429c  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080042a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000084  08004324  00006084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004324  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014343  00000000  00000000  000060ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae8  00000000  00000000  0001a3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0001cee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  0001dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d516  00000000  00000000  0001ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013344  00000000  00000000  0004c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011adb5  00000000  00000000  0005f53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a2f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  0017a334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0017ea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	@ (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000084 	.word	0x20000084
 8000250:	00000000 	.word	0x00000000
 8000254:	08004270 	.word	0x08004270

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	@ (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	@ (8000270 <frame_dummy+0x18>)
 8000262:	f3af 8000 	nop.w
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000088 	.word	0x20000088
 8000270:	08004270 	.word	0x08004270

08000274 <Buffercmp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint16_t Buffercmp(uint8_t *pBuffer1, uint8_t *pBuffer2,
		uint16_t BufferLength) {
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	4613      	mov	r3, r2
 8000280:	80fb      	strh	r3, [r7, #6]
	while (BufferLength--) {
 8000282:	e00d      	b.n	80002a0 <Buffercmp+0x2c>
		if ((*pBuffer1) != *pBuffer2) {
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	781a      	ldrb	r2, [r3, #0]
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	429a      	cmp	r2, r3
 800028e:	d001      	beq.n	8000294 <Buffercmp+0x20>
			return BufferLength;
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	e00b      	b.n	80002ac <Buffercmp+0x38>
		}
		pBuffer1++;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	3301      	adds	r3, #1
 8000298:	60fb      	str	r3, [r7, #12]
		pBuffer2++;
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	3301      	adds	r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
	while (BufferLength--) {
 80002a0:	88fb      	ldrh	r3, [r7, #6]
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	80fa      	strh	r2, [r7, #6]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1ec      	bne.n	8000284 <Buffercmp+0x10>
	}

	return 0;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	80fb      	strh	r3, [r7, #6]
	/*Compare the sent and received buffers*/
	if (Buffercmp((uint8_t*) aTxBuffer, (uint8_t*) aRxBuffer, BUFFERSIZE) == 0) {
 80002c2:	2278      	movs	r2, #120	@ 0x78
 80002c4:	4907      	ldr	r1, [pc, #28]	@ (80002e4 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 80002c6:	4808      	ldr	r0, [pc, #32]	@ (80002e8 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 80002c8:	f7ff ffd4 	bl	8000274 <Buffercmp>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d103      	bne.n	80002da <HAL_GPIO_EXTI_Rising_Callback+0x22>
		/* Buffers OK */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002d2:	2120      	movs	r1, #32
 80002d4:	4805      	ldr	r0, [pc, #20]	@ (80002ec <HAL_GPIO_EXTI_Rising_Callback+0x34>)
 80002d6:	f001 fe49 	bl	8001f6c <HAL_GPIO_TogglePin>
	}
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000250 	.word	0x20000250
 80002e8:	20000000 	.word	0x20000000
 80002ec:	42020000 	.word	0x42020000

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f6:	f000 fcb7 	bl	8000c68 <HAL_Init>

  /* USER CODE BEGIN Init */
  /*Reset backup domain and RTC wakeup timer*/
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fa:	4b31      	ldr	r3, [pc, #196]	@ (80003c0 <main+0xd0>)
 80002fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000300:	4a2f      	ldr	r2, [pc, #188]	@ (80003c0 <main+0xd0>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800030a:	4b2d      	ldr	r3, [pc, #180]	@ (80003c0 <main+0xd0>)
 800030c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 8000318:	f001 fea4 	bl	8002064 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_BACKUPRESET_FORCE();
 800031c:	4b28      	ldr	r3, [pc, #160]	@ (80003c0 <main+0xd0>)
 800031e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000322:	4a27      	ldr	r2, [pc, #156]	@ (80003c0 <main+0xd0>)
 8000324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000328:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY))
 800032c:	bf00      	nop
 800032e:	4b24      	ldr	r3, [pc, #144]	@ (80003c0 <main+0xd0>)
 8000330:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000334:	f003 0302 	and.w	r3, r3, #2
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f8      	bne.n	800032e <main+0x3e>
		;
  __HAL_RCC_BACKUPRESET_RELEASE();
 800033c:	4b20      	ldr	r3, [pc, #128]	@ (80003c0 <main+0xd0>)
 800033e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000342:	4a1f      	ldr	r2, [pc, #124]	@ (80003c0 <main+0xd0>)
 8000344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000348:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f846 	bl	80003dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 8000350:	2002      	movs	r0, #2
 8000352:	f001 ff2d 	bl	80021b0 <HAL_PWREx_ConfigSupply>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000356:	f000 f9b3 	bl	80006c0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800035a:	f000 f8b7 	bl	80004cc <MX_GPDMA1_Init>
  MX_ICACHE_Init();
 800035e:	f000 f8dd 	bl	800051c <MX_ICACHE_Init>
  MX_SPI1_Init();
 8000362:	f000 f93d 	bl	80005e0 <MX_SPI1_Init>
  MX_RTC_Init();
 8000366:	f000 f8ed 	bl	8000544 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /*Start the Full Duplex Communication process ########################*/
  	/* While the SPI in TransmitReceive process, user can transmit data through
  	 "aTxBuffer" buffer & receive data through "aRxBuffer" */
  	if (HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t*) aTxBuffer,(uint8_t*) aRxBuffer, BUFFERSIZE) != HAL_OK) {
 800036a:	2378      	movs	r3, #120	@ 0x78
 800036c:	4a15      	ldr	r2, [pc, #84]	@ (80003c4 <main+0xd4>)
 800036e:	4916      	ldr	r1, [pc, #88]	@ (80003c8 <main+0xd8>)
 8000370:	4816      	ldr	r0, [pc, #88]	@ (80003cc <main+0xdc>)
 8000372:	f003 f957 	bl	8003624 <HAL_SPI_TransmitReceive_DMA>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <main+0x90>
  		/* Transfer error in transmission process */
  		Error_Handler();
 800037c:	f000 f9fc 	bl	8000778 <Error_Handler>
  	}

  	__HAL_DMA_DISABLE_IT(&handle_GPDMA1_Channel7, (DMA_IT_TC | DMA_IT_HT | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8000380:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <main+0xe0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	695a      	ldr	r2, [r3, #20]
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <main+0xe0>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f422 42be 	bic.w	r2, r2, #24320	@ 0x5f00
 800038e:	615a      	str	r2, [r3, #20]
  	__HAL_DMA_DISABLE_IT(&handle_GPDMA1_Channel6,(DMA_IT_TC | DMA_IT_HT | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8000390:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <main+0xe4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	695a      	ldr	r2, [r3, #20]
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <main+0xe4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f422 42be 	bic.w	r2, r2, #24320	@ 0x5f00
 800039e:	615a      	str	r2, [r3, #20]


  	  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80003a0:	2204      	movs	r2, #4
 80003a2:	2101      	movs	r1, #1
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <main+0xe8>)
 80003a6:	f002 ffb9 	bl	800331c <HAL_RTCEx_SetWakeUpTimer>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <main+0xc4>
  	 {
  	 Error_Handler();
 80003b0:	f000 f9e2 	bl	8000778 <Error_Handler>
  	 }

  	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERMODE_STOP1, PWR_STOPENTRY_WFI);
 80003b4:	2101      	movs	r1, #1
 80003b6:	2001      	movs	r0, #1
 80003b8:	f001 fe60 	bl	800207c <HAL_PWR_EnterSTOPMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <main+0xcc>
 80003c0:	40030c00 	.word	0x40030c00
 80003c4:	20000250 	.word	0x20000250
 80003c8:	20000000 	.word	0x20000000
 80003cc:	200000d0 	.word	0x200000d0
 80003d0:	20000160 	.word	0x20000160
 80003d4:	200001d8 	.word	0x200001d8
 80003d8:	200000a0 	.word	0x200000a0

080003dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b094      	sub	sp, #80	@ 0x50
 80003e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e2:	f107 0318 	add.w	r3, r7, #24
 80003e6:	2238      	movs	r2, #56	@ 0x38
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 ff14 	bl	8004218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f0:	463b      	mov	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]
 80003fe:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 8000400:	2100      	movs	r1, #0
 8000402:	2001      	movs	r0, #1
 8000404:	f002 fe18 	bl	8003038 <HAL_RCCEx_EpodBoosterClkConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800040e:	f000 f9b3 	bl	8000778 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 8000412:	f001 fea1 	bl	8002158 <HAL_PWREx_EnableEpodBooster>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800041c:	f000 f9ac 	bl	8000778 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000420:	2002      	movs	r0, #2
 8000422:	f001 fe5b 	bl	80020dc <HAL_PWREx_ControlVoltageScaling>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800042c:	f000 f9a4 	bl	8000778 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8000430:	4b24      	ldr	r3, [pc, #144]	@ (80004c4 <SystemClock_Config+0xe8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f023 030f 	bic.w	r3, r3, #15
 8000438:	4a22      	ldr	r2, [pc, #136]	@ (80004c4 <SystemClock_Config+0xe8>)
 800043a:	f043 0302 	orr.w	r3, r3, #2
 800043e:	6013      	str	r3, [r2, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000440:	f001 fe10 	bl	8002064 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000444:	4b20      	ldr	r3, [pc, #128]	@ (80004c8 <SystemClock_Config+0xec>)
 8000446:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800044a:	4a1f      	ldr	r2, [pc, #124]	@ (80004c8 <SystemClock_Config+0xec>)
 800044c:	f023 0318 	bic.w	r3, r3, #24
 8000450:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSIS
 8000454:	2364      	movs	r3, #100	@ 0x64
 8000456:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000458:	2381      	movs	r3, #129	@ 0x81
 800045a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 8000460:	2300      	movs	r3, #0
 8000462:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV2;
 8000464:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000468:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSI_ON;
 800046a:	2301      	movs	r3, #1
 800046c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIKSource = RCC_MSI_RC1;
 800046e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000472:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.MSIKDiv = RCC_MSI_DIV8;
 8000474:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8000478:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fee2 	bl	8002248 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800048a:	f000 f975 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	231f      	movs	r3, #31
 8000490:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 8000492:	2300      	movs	r3, #0
 8000494:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a6:	463b      	mov	r3, r7
 80004a8:	2102      	movs	r1, #2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f002 fa22 	bl	80028f4 <HAL_RCC_ClockConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0xde>
  {
    Error_Handler();
 80004b6:	f000 f95f 	bl	8000778 <Error_Handler>
  }
}
 80004ba:	bf00      	nop
 80004bc:	3750      	adds	r7, #80	@ 0x50
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40022000 	.word	0x40022000
 80004c8:	40030c00 	.word	0x40030c00

080004cc <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80004d2:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <MX_GPDMA1_Init+0x4c>)
 80004d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000518 <MX_GPDMA1_Init+0x4c>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80004e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <MX_GPDMA1_Init+0x4c>)
 80004e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 0, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	2023      	movs	r0, #35	@ 0x23
 80004f6:	f000 fd51 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 80004fa:	2023      	movs	r0, #35	@ 0x23
 80004fc:	f000 fd68 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	2024      	movs	r0, #36	@ 0x24
 8000506:	f000 fd49 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 800050a:	2024      	movs	r0, #36	@ 0x24
 800050c:	f000 fd60 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40030c00 	.word	0x40030c00

0800051c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000520:	2000      	movs	r0, #0
 8000522:	f001 fd6f 	bl	8002004 <HAL_ICACHE_ConfigAssociativityMode>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800052c:	f000 f924 	bl	8000778 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000530:	f001 fd88 	bl	8002044 <HAL_ICACHE_Enable>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800053a:	f000 f91d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	615a      	str	r2, [r3, #20]
 800055a:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800055c:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <MX_RTC_Init+0x94>)
 800055e:	4a1f      	ldr	r2, [pc, #124]	@ (80005dc <MX_RTC_Init+0x98>)
 8000560:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <MX_RTC_Init+0x94>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_RTC_Init+0x94>)
 800056a:	227f      	movs	r2, #127	@ 0x7f
 800056c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_RTC_Init+0x94>)
 8000570:	22ff      	movs	r2, #255	@ 0xff
 8000572:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <MX_RTC_Init+0x94>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_RTC_Init+0x94>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_RTC_Init+0x94>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_RTC_Init+0x94>)
 8000588:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800058e:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <MX_RTC_Init+0x94>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000594:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <MX_RTC_Init+0x94>)
 8000596:	2200      	movs	r2, #0
 8000598:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800059a:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <MX_RTC_Init+0x94>)
 800059c:	f002 fd90 	bl	80030c0 <HAL_RTC_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80005a6:	f000 f8e7 	bl	8000778 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <MX_RTC_Init+0x94>)
 80005c0:	f002 ff12 	bl	80033e8 <HAL_RTCEx_PrivilegeModeSet>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80005ca:	f000 f8d5 	bl	8000778 <Error_Handler>
 // not here
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000a0 	.word	0x200000a0
 80005dc:	40007800 	.word	0x40007800

080005e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005f0:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 80005f2:	4a31      	ldr	r2, [pc, #196]	@ (80006b8 <MX_SPI1_Init+0xd8>)
 80005f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005f6:	4b2f      	ldr	r3, [pc, #188]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 80005f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005fe:	4b2d      	ldr	r3, [pc, #180]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000604:	4b2b      	ldr	r3, [pc, #172]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000606:	2207      	movs	r2, #7
 8000608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800060a:	4b2a      	ldr	r3, [pc, #168]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000618:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800061c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000624:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000626:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800062c:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 800063a:	2207      	movs	r2, #7
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000640:	2200      	movs	r2, #0
 8000642:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000644:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000646:	2200      	movs	r2, #0
 8000648:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000652:	2200      	movs	r2, #0
 8000654:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000658:	2200      	movs	r2, #0
 800065a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 800065e:	2200      	movs	r2, #0
 8000660:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000664:	2200      	movs	r2, #0
 8000666:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 800066a:	2200      	movs	r2, #0
 800066c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000670:	2200      	movs	r2, #0
 8000672:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 8000676:	2200      	movs	r2, #0
 8000678:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 800067c:	f002 fee2 	bl	8003444 <HAL_SPI_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8000686:	f000 f877 	bl	8000778 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_ENABLE;
 800068a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800068e:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_RTC_WUT_TRG;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_SPI1_Init+0xdc>)
 8000692:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_SPI1_Init+0xd4>)
 800069e:	f003 fd7a 	bl	8004196 <HAL_SPIEx_SetConfigAutonomousMode>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80006a8:	f000 f866 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000d0 	.word	0x200000d0
 80006b8:	40013000 	.word	0x40013000
 80006bc:	100b0000 	.word	0x100b0000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b25      	ldr	r3, [pc, #148]	@ (800076c <MX_GPIO_Init+0xac>)
 80006d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006dc:	4a23      	ldr	r2, [pc, #140]	@ (800076c <MX_GPIO_Init+0xac>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_GPIO_Init+0xac>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_GPIO_Init+0xac>)
 80006f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006fa:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <MX_GPIO_Init+0xac>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_GPIO_Init+0xac>)
 8000706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4816      	ldr	r0, [pc, #88]	@ (8000770 <MX_GPIO_Init+0xb0>)
 8000718:	f001 fc10 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800071c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000720:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000722:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000728:	2302      	movs	r3, #2
 800072a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	4810      	ldr	r0, [pc, #64]	@ (8000774 <MX_GPIO_Init+0xb4>)
 8000734:	f001 fa78 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000738:	2320      	movs	r3, #32
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4808      	ldr	r0, [pc, #32]	@ (8000770 <MX_GPIO_Init+0xb0>)
 8000750:	f001 fa6a 	bl	8001c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2018      	movs	r0, #24
 800075a:	f000 fc1f 	bl	8000f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800075e:	2018      	movs	r0, #24
 8000760:	f000 fc36 	bl	8000fd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40030c00 	.word	0x40030c00
 8000770:	42020000 	.word	0x42020000
 8000774:	42020800 	.word	0x42020800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_MspInit+0x30>)
 800078c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000790:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x30>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x30>)
 800079c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40030c00 	.word	0x40030c00

080007b8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0a2      	sub	sp, #136	@ 0x88
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2278      	movs	r2, #120	@ 0x78
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 fd25 	bl	8004218 <memset>
  if(hrtc->Instance==RTC)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a17      	ldr	r2, [pc, #92]	@ (8000830 <HAL_RTC_MspInit+0x78>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d127      	bne.n	8000828 <HAL_RTC_MspInit+0x70>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80007dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 f9b6 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80007f6:	f7ff ffbf 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <HAL_RTC_MspInit+0x7c>)
 80007fc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000800:	4a0c      	ldr	r2, [pc, #48]	@ (8000834 <HAL_RTC_MspInit+0x7c>)
 8000802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000806:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_RTC_MspInit+0x7c>)
 800080c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <HAL_RTC_MspInit+0x7c>)
 8000812:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000816:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_RTC_MspInit+0x7c>)
 800081c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000820:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000828:	bf00      	nop
 800082a:	3788      	adds	r7, #136	@ 0x88
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40007800 	.word	0x40007800
 8000834:	40030c00 	.word	0x40030c00

08000838 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b0aa      	sub	sp, #168	@ 0xa8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  DMA_DataHandlingConfTypeDef DataHandlingConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2278      	movs	r2, #120	@ 0x78
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f003 fcdd 	bl	8004218 <memset>
  if(hspi->Instance==SPI1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a7d      	ldr	r2, [pc, #500]	@ (8000a58 <HAL_SPI_MspInit+0x220>)
 8000864:	4293      	cmp	r3, r2
 8000866:	f040 80f3 	bne.w	8000a50 <HAL_SPI_MspInit+0x218>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800086a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800086e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_MSIK;
 8000870:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000874:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4618      	mov	r0, r3
 800087c:	f002 f96e 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 8000886:	f7ff ff77 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800088a:	4b74      	ldr	r3, [pc, #464]	@ (8000a5c <HAL_SPI_MspInit+0x224>)
 800088c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000890:	4a72      	ldr	r2, [pc, #456]	@ (8000a5c <HAL_SPI_MspInit+0x224>)
 8000892:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000896:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800089a:	4b70      	ldr	r3, [pc, #448]	@ (8000a5c <HAL_SPI_MspInit+0x224>)
 800089c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b6c      	ldr	r3, [pc, #432]	@ (8000a5c <HAL_SPI_MspInit+0x224>)
 80008aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008ae:	4a6b      	ldr	r2, [pc, #428]	@ (8000a5c <HAL_SPI_MspInit+0x224>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80008b8:	4b68      	ldr	r3, [pc, #416]	@ (8000a5c <HAL_SPI_MspInit+0x224>)
 80008ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80008c6:	23c2      	movs	r3, #194	@ 0xc2
 80008c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008de:	2305      	movs	r3, #5
 80008e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80008e8:	4619      	mov	r1, r3
 80008ea:	485d      	ldr	r0, [pc, #372]	@ (8000a60 <HAL_SPI_MspInit+0x228>)
 80008ec:	f001 f99c 	bl	8001c28 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_RX Init */
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 80008f0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 80008f2:	4a5d      	ldr	r2, [pc, #372]	@ (8000a68 <HAL_SPI_MspInit+0x230>)
 80008f4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_SPI1_RX;
 80008f6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 80008f8:	2206      	movs	r2, #6
 80008fa:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel7.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80008fc:	4b59      	ldr	r3, [pc, #356]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel7.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000902:	4b58      	ldr	r3, [pc, #352]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel7.Init.SrcInc = DMA_SINC_FIXED;
 8000908:	4b56      	ldr	r3, [pc, #344]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel7.Init.DestInc = DMA_DINC_INCREMENTED;
 800090e:	4b55      	ldr	r3, [pc, #340]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000910:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000914:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000916:	4b53      	ldr	r3, [pc, #332]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel7.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800091c:	4b51      	ldr	r3, [pc, #324]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel7.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000922:	4b50      	ldr	r3, [pc, #320]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
 8000928:	4b4e      	ldr	r3, [pc, #312]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 800092a:	2201      	movs	r2, #1
 800092c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
 800092e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000930:	2201      	movs	r2, #1
 8000932:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000934:	4b4b      	ldr	r3, [pc, #300]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000936:	2200      	movs	r2, #0
 8000938:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800093a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
 8000940:	4b48      	ldr	r3, [pc, #288]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000942:	2200      	movs	r2, #0
 8000944:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8000946:	4847      	ldr	r0, [pc, #284]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000948:	f000 fbca 	bl	80010e0 <HAL_DMA_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8000952:	f7ff ff11 	bl	8000778 <Error_Handler>
    }

    DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_DMAEx_ConfigDataHandling(&handle_GPDMA1_Channel7, &DataHandlingConfig) != HAL_OK)
 8000962:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000966:	4619      	mov	r1, r3
 8000968:	483e      	ldr	r0, [pc, #248]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 800096a:	f001 f8f9 	bl	8001b60 <HAL_DMAEx_ConfigDataHandling>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 8000974:	f7ff ff00 	bl	8000778 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmarx, handle_GPDMA1_Channel7);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 800097c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000980:	4a38      	ldr	r2, [pc, #224]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000986:	2110      	movs	r1, #16
 8000988:	4836      	ldr	r0, [pc, #216]	@ (8000a64 <HAL_SPI_MspInit+0x22c>)
 800098a:	f000 fecb 	bl	8001724 <HAL_DMA_ConfigChannelAttributes>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 8000994:	f7ff fef0 	bl	8000778 <Error_Handler>
    }

    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA1_Channel6.Instance = GPDMA1_Channel6;
 8000998:	4b34      	ldr	r3, [pc, #208]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 800099a:	4a35      	ldr	r2, [pc, #212]	@ (8000a70 <HAL_SPI_MspInit+0x238>)
 800099c:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel6.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 800099e:	4b33      	ldr	r3, [pc, #204]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel6.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80009a4:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel6.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009aa:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel6.Init.SrcInc = DMA_SINC_INCREMENTED;
 80009b2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009b4:	2208      	movs	r2, #8
 80009b6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel6.Init.DestInc = DMA_DINC_FIXED;
 80009b8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel6.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80009be:	4b2b      	ldr	r3, [pc, #172]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel6.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80009c4:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel6.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80009ca:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel6.Init.SrcBurstLength = 1;
 80009d0:	4b26      	ldr	r3, [pc, #152]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel6.Init.DestBurstLength = 1;
 80009d6:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009d8:	2201      	movs	r2, #1
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel6.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80009dc:	4b23      	ldr	r3, [pc, #140]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009de:	2200      	movs	r2, #0
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel6.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel6.Init.Mode = DMA_NORMAL;
 80009e8:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel6) != HAL_OK)
 80009ee:	481f      	ldr	r0, [pc, #124]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 80009f0:	f000 fb76 	bl	80010e0 <HAL_DMA_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_SPI_MspInit+0x1c6>
    {
      Error_Handler();
 80009fa:	f7ff febd 	bl	8000778 <Error_Handler>
    }

    DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_DMAEx_ConfigDataHandling(&handle_GPDMA1_Channel6, &DataHandlingConfig) != HAL_OK)
 8000a0a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4816      	ldr	r0, [pc, #88]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 8000a12:	f001 f8a5 	bl	8001b60 <HAL_DMAEx_ConfigDataHandling>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_SPI_MspInit+0x1e8>
    {
      Error_Handler();
 8000a1c:	f7ff feac 	bl	8000778 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel6);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a12      	ldr	r2, [pc, #72]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 8000a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000a28:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel6, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a2e:	2110      	movs	r1, #16
 8000a30:	480e      	ldr	r0, [pc, #56]	@ (8000a6c <HAL_SPI_MspInit+0x234>)
 8000a32:	f000 fe77 	bl	8001724 <HAL_DMA_ConfigChannelAttributes>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_SPI_MspInit+0x208>
    {
      Error_Handler();
 8000a3c:	f7ff fe9c 	bl	8000778 <Error_Handler>
    }

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	203b      	movs	r0, #59	@ 0x3b
 8000a46:	f000 faa9 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a4a:	203b      	movs	r0, #59	@ 0x3b
 8000a4c:	f000 fac0 	bl	8000fd0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a50:	bf00      	nop
 8000a52:	37a8      	adds	r7, #168	@ 0xa8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40013000 	.word	0x40013000
 8000a5c:	40030c00 	.word	0x40030c00
 8000a60:	42020000 	.word	0x42020000
 8000a64:	20000160 	.word	0x20000160
 8000a68:	400203d0 	.word	0x400203d0
 8000a6c:	200001d8 	.word	0x200001d8
 8000a70:	40020350 	.word	0x40020350

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f96b 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ad6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ada:	f001 fa61 	bl	8001fa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <GPDMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 6 global interrupt.
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 0 */

  /* USER CODE END GPDMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel6);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <GPDMA1_Channel6_IRQHandler+0x10>)
 8000aea:	f000 fcae 	bl	800144a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 1 */

  /* USER CODE END GPDMA1_Channel6_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200001d8 	.word	0x200001d8

08000af8 <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <GPDMA1_Channel7_IRQHandler+0x10>)
 8000afe:	f000 fca4 	bl	800144a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000160 	.word	0x20000160

08000b0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <SPI1_IRQHandler+0x10>)
 8000b12:	f003 f801 	bl	8003b18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000d0 	.word	0x200000d0

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <SystemCoreClockUpdate+0xb8>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d034      	beq.n	8000bc0 <SystemCoreClockUpdate+0x7c>
 8000b56:	2b08      	cmp	r3, #8
 8000b58:	d836      	bhi.n	8000bc8 <SystemCoreClockUpdate+0x84>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <SystemCoreClockUpdate+0x20>
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d02a      	beq.n	8000bb8 <SystemCoreClockUpdate+0x74>
 8000b62:	e031      	b.n	8000bc8 <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8000b64:	4b25      	ldr	r3, [pc, #148]	@ (8000bfc <SystemCoreClockUpdate+0xb8>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00f      	beq.n	8000b94 <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da03      	bge.n	8000b82 <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000b7c:	4a21      	ldr	r2, [pc, #132]	@ (8000c04 <SystemCoreClockUpdate+0xc0>)
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	e002      	b.n	8000b88 <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000b84:	4a20      	ldr	r2, [pc, #128]	@ (8000c08 <SystemCoreClockUpdate+0xc4>)
 8000b86:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	0f5b      	lsrs	r3, r3, #29
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	e009      	b.n	8000ba8 <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000b96:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <SystemCoreClockUpdate+0xc0>)
 8000b98:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <SystemCoreClockUpdate+0xb8>)
 8000b9c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8000ba0:	0b1b      	lsrs	r3, r3, #12
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb2:	4a13      	ldr	r2, [pc, #76]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000bb4:	6013      	str	r3, [r2, #0]
    break;
 8000bb6:	e00c      	b.n	8000bd2 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000bba:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <SystemCoreClockUpdate+0xc8>)
 8000bbc:	601a      	str	r2, [r3, #0]
    break;
 8000bbe:	e008      	b.n	8000bd2 <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <SystemCoreClockUpdate+0xc8>)
 8000bc4:	601a      	str	r2, [r3, #0]
    break;
 8000bc6:	e004      	b.n	8000bd2 <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000bca:	f04f 32ff 	mov.w	r2, #4294967295
 8000bce:	601a      	str	r2, [r3, #0]
    break;
 8000bd0:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <SystemCoreClockUpdate+0xb8>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <SystemCoreClockUpdate+0xcc>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <SystemCoreClockUpdate+0xbc>)
 8000bec:	6013      	str	r3, [r2, #0]
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40030c00 	.word	0x40030c00
 8000c00:	20000078 	.word	0x20000078
 8000c04:	016e3600 	.word	0x016e3600
 8000c08:	05b8d800 	.word	0x05b8d800
 8000c0c:	00f42400 	.word	0x00f42400
 8000c10:	08004288 	.word	0x08004288

08000c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c18:	f7ff ff82 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c1e:	e003      	b.n	8000c28 <LoopCopyDataInit>

08000c20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c26:	3104      	adds	r1, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c28:	480a      	ldr	r0, [pc, #40]	@ (8000c54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c30:	d3f6      	bcc.n	8000c20 <CopyDataInit>
	ldr	r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c34:	e002      	b.n	8000c3c <LoopFillZerobss>

08000c36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c38:	f842 3b04 	str.w	r3, [r2], #4

08000c3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <LoopForever+0x16>)
	cmp	r2, r3
 8000c3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c40:	d3f9      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c42:	f003 faf1 	bl	8004228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c46:	f7ff fb53 	bl	80002f0 <main>

08000c4a <LoopForever>:

LoopForever:
    b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c4c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000c50:	080042a0 	.word	0x080042a0
	ldr	r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c58:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8000c5c:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8000c60:	200002cc 	.word	0x200002cc

08000c64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_Init+0x3c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <HAL_Init+0x3c>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f984 	bl	8000f86 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8000c7e:	f7ff ff61 	bl	8000b44 <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c82:	2004      	movs	r0, #4
 8000c84:	f000 f9d4 	bl	8001030 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c88:	200f      	movs	r0, #15
 8000c8a:	f000 f80d 	bl	8000ca8 <HAL_InitTick>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e002      	b.n	8000c9e <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c98:	f7ff fd74 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40022000 	.word	0x40022000

08000ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000cb4:	4b36      	ldr	r3, [pc, #216]	@ (8000d90 <HAL_InitTick+0xe8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e062      	b.n	8000d86 <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000cc0:	4b34      	ldr	r3, [pc, #208]	@ (8000d94 <HAL_InitTick+0xec>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d10c      	bne.n	8000ce6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ccc:	4b32      	ldr	r3, [pc, #200]	@ (8000d98 <HAL_InitTick+0xf0>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <HAL_InitTick+0xe8>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	e03d      	b.n	8000d62 <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d9c <HAL_InitTick+0xf4>)
 8000ce8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000cec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000cf0:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000cf8:	d025      	beq.n	8000d46 <HAL_InitTick+0x9e>
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000d00:	d82e      	bhi.n	8000d60 <HAL_InitTick+0xb8>
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d004      	beq.n	8000d12 <HAL_InitTick+0x6a>
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000d0e:	d00d      	beq.n	8000d2c <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 8000d10:	e026      	b.n	8000d60 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000d12:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <HAL_InitTick+0xf0>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <HAL_InitTick+0xe8>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000d20:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d28:	60fb      	str	r3, [r7, #12]
        break;
 8000d2a:	e01a      	b.n	8000d62 <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <HAL_InitTick+0xe8>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d3a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	60fb      	str	r3, [r7, #12]
        break;
 8000d44:	e00d      	b.n	8000d62 <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_InitTick+0xe8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5c:	60fb      	str	r3, [r7, #12]
        break;
 8000d5e:	e000      	b.n	8000d62 <HAL_InitTick+0xba>
        break;
 8000d60:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f000 f942 	bl	8000fec <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e009      	b.n	8000d86 <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d72:	2200      	movs	r2, #0
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	f000 f90f 	bl	8000f9c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_InitTick+0xf8>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000080 	.word	0x20000080
 8000d94:	e000e010 	.word	0xe000e010
 8000d98:	20000078 	.word	0x20000078
 8000d9c:	40030c00 	.word	0x40030c00
 8000da0:	2000007c 	.word	0x2000007c

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000080 	.word	0x20000080
 8000dc8:	200002c8 	.word	0x200002c8

08000dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	200002c8 	.word	0x200002c8

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff ffee 	bl	8000dcc <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0a:	bf00      	nop
 8000e0c:	f7ff ffde 	bl	8000dcc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000080 	.word	0x20000080

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	@ (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	@ (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	@ 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff4c 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8000faa:	f7ff ff63 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fae:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff ffb3 	bl	8000f20 <NVIC_EncodePriority>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff82 	bl	8000ecc <__NVIC_SetPriority>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32u3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff56 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00d      	b.n	800101e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_SYSTICK_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_SYSTICK_Config+0x40>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_SYSTICK_Config+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a05      	ldr	r2, [pc, #20]	@ (800102c <HAL_SYSTICK_Config+0x40>)
 8001016:	f043 0303 	orr.w	r3, r3, #3
 800101a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d844      	bhi.n	80010c8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	08001067 	.word	0x08001067
 8001048:	08001085 	.word	0x08001085
 800104c:	080010a7 	.word	0x080010a7
 8001050:	080010c9 	.word	0x080010c9
 8001054:	08001059 	.word	0x08001059
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1e      	ldr	r2, [pc, #120]	@ (80010d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6013      	str	r3, [r2, #0]
      break;
 8001064:	e031      	b.n	80010ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800106c:	f023 0304 	bic.w	r3, r3, #4
 8001070:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001074:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001078:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800107a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800107e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 8001082:	e022      	b.n	80010ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a13      	ldr	r2, [pc, #76]	@ (80010d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800108a:	f023 0304 	bic.w	r3, r3, #4
 800108e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001092:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001096:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800109a:	4a10      	ldr	r2, [pc, #64]	@ (80010dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800109c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010a0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 80010a4:	e011      	b.n	80010ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	@ (80010d8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80010b8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010c2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 80010c6:	e000      	b.n	80010ca <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80010c8:	bf00      	nop
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010
 80010dc:	40030c00 	.word	0x40030c00

080010e0 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff fe70 	bl	8000dcc <HAL_GetTick>
 80010ec:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e086      	b.n	8001206 <HAL_DMA_Init+0x126>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a44      	ldr	r2, [pc, #272]	@ (8001210 <HAL_DMA_Init+0x130>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d035      	beq.n	800116e <HAL_DMA_Init+0x8e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a43      	ldr	r2, [pc, #268]	@ (8001214 <HAL_DMA_Init+0x134>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d030      	beq.n	800116e <HAL_DMA_Init+0x8e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a41      	ldr	r2, [pc, #260]	@ (8001218 <HAL_DMA_Init+0x138>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_DMA_Init+0x8e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a40      	ldr	r2, [pc, #256]	@ (800121c <HAL_DMA_Init+0x13c>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d026      	beq.n	800116e <HAL_DMA_Init+0x8e>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a3e      	ldr	r2, [pc, #248]	@ (8001220 <HAL_DMA_Init+0x140>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d021      	beq.n	800116e <HAL_DMA_Init+0x8e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a3d      	ldr	r2, [pc, #244]	@ (8001224 <HAL_DMA_Init+0x144>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d01c      	beq.n	800116e <HAL_DMA_Init+0x8e>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a3b      	ldr	r2, [pc, #236]	@ (8001228 <HAL_DMA_Init+0x148>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d017      	beq.n	800116e <HAL_DMA_Init+0x8e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a3a      	ldr	r2, [pc, #232]	@ (800122c <HAL_DMA_Init+0x14c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d012      	beq.n	800116e <HAL_DMA_Init+0x8e>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a38      	ldr	r2, [pc, #224]	@ (8001230 <HAL_DMA_Init+0x150>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_DMA_Init+0x8e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a37      	ldr	r2, [pc, #220]	@ (8001234 <HAL_DMA_Init+0x154>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d008      	beq.n	800116e <HAL_DMA_Init+0x8e>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a35      	ldr	r2, [pc, #212]	@ (8001238 <HAL_DMA_Init+0x158>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d003      	beq.n	800116e <HAL_DMA_Init+0x8e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a34      	ldr	r2, [pc, #208]	@ (800123c <HAL_DMA_Init+0x15c>)
 800116c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10e      	bne.n	80011a0 <HAL_DMA_Init+0xc0>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0206 	orr.w	r2, r2, #6
 80011b6:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80011b8:	e00f      	b.n	80011da <HAL_DMA_Init+0xfa>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80011ba:	f7ff fe07 	bl	8000dcc <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d908      	bls.n	80011da <HAL_DMA_Init+0xfa>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2210      	movs	r2, #16
 80011cc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2203      	movs	r2, #3
 80011d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e015      	b.n	8001206 <HAL_DMA_Init+0x126>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e8      	bne.n	80011ba <HAL_DMA_Init+0xda>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fafd 	bl	80017e8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020050 	.word	0x40020050
 8001214:	400200d0 	.word	0x400200d0
 8001218:	40020150 	.word	0x40020150
 800121c:	400201d0 	.word	0x400201d0
 8001220:	40020250 	.word	0x40020250
 8001224:	400202d0 	.word	0x400202d0
 8001228:	40020350 	.word	0x40020350
 800122c:	400203d0 	.word	0x400203d0
 8001230:	40020450 	.word	0x40020450
 8001234:	400204d0 	.word	0x400204d0
 8001238:	40020550 	.word	0x40020550
 800123c:	400205d0 	.word	0x400205d0

08001240 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e04f      	b.n	80012f8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_DMA_Start_IT+0x26>
 8001262:	2302      	movs	r3, #2
 8001264:	e048      	b.n	80012f8 <HAL_DMA_Start_IT+0xb8>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d136      	bne.n	80012e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2202      	movs	r2, #2
 800127e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 fa84 	bl	800179c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80012a2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d007      	beq.n	80012bc <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695a      	ldr	r2, [r3, #20]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012ba:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80012d2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e007      	b.n	80012f8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2240      	movs	r2, #64	@ 0x40
 80012ec:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001308:	f7ff fd60 	bl	8000dcc <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e06b      	b.n	80013f0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d008      	beq.n	8001336 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2220      	movs	r2, #32
 8001328:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e05c      	b.n	80013f0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695a      	ldr	r2, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 0204 	orr.w	r2, r2, #4
 8001344:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800134e:	e020      	b.n	8001392 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001350:	f7ff fd3c 	bl	8000dcc <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b05      	cmp	r3, #5
 800135c:	d919      	bls.n	8001392 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001362:	f043 0210 	orr.w	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2203      	movs	r2, #3
 800136e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001382:	2201      	movs	r2, #1
 8001384:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e02e      	b.n	80013f0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0d7      	beq.n	8001350 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2204      	movs	r2, #4
 80013b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80013c0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013da:	2201      	movs	r2, #1
 80013dc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e019      	b.n	800143e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d004      	beq.n	8001420 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2220      	movs	r2, #32
 800141a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e00e      	b.n	800143e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2204      	movs	r2, #4
 8001424:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800145a:	f023 030f 	bic.w	r3, r3, #15
 800145e:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001468:	3b50      	subs	r3, #80	@ 0x50
 800146a:	09db      	lsrs	r3, r3, #7
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (CPU_IN_SECURE_STATE)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 813b 	beq.w	8001700 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d011      	beq.n	80014bc <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00a      	beq.n	80014bc <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ae:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d011      	beq.n	80014ee <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00a      	beq.n	80014ee <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014e0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f043 0202 	orr.w	r2, r3, #2
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d011      	beq.n	8001520 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00a      	beq.n	8001520 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001512:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001518:	f043 0204 	orr.w	r2, r3, #4
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d011      	beq.n	8001552 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00a      	beq.n	8001552 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001544:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	f043 0208 	orr.w	r2, r3, #8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00c      	beq.n	8001588 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001576:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d04c      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d045      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ac:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d12e      	bne.n	8001618 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80015c8:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0202 	orr.w	r2, r2, #2
 80015d8:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f2:	2201      	movs	r2, #1
 80015f4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d07a      	beq.n	8001704 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
        }

        return;
 8001616:	e075      	b.n	8001704 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2205      	movs	r2, #5
 800161c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d039      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d032      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001654:	2b00      	cmp	r3, #0
 8001656:	d012      	beq.n	800167e <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001668:	2b00      	cmp	r3, #0
 800166a:	d111      	bne.n	8001690 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001678:	2201      	movs	r2, #1
 800167a:	731a      	strb	r2, [r3, #12]
 800167c:	e008      	b.n	8001690 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001698:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0202 	orr.w	r2, r2, #2
 80016c8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e2:	2201      	movs	r2, #1
 80016e4:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d007      	beq.n	8001706 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
 80016fe:	e002      	b.n	8001706 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001700:	bf00      	nop
 8001702:	e000      	b.n	8001706 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8001704:	bf00      	nop
    }
  }
}
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e02b      	b.n	8001790 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001740:	f023 030f 	bic.w	r3, r3, #15
 8001744:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174e:	3b50      	subs	r3, #80	@ 0x50
 8001750:	09db      	lsrs	r3, r3, #7
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2201      	movs	r2, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d012      	beq.n	800178e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f003 0311 	and.w	r3, r3, #17
 800176e:	2b11      	cmp	r3, #17
 8001770:	d106      	bne.n	8001780 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	431a      	orrs	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e006      	b.n	800178e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	43db      	mvns	r3, r3
 8001788:	401a      	ands	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* CPU_IN_SECURE_STATE */

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b291      	uxth	r1, r2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	430b      	orrs	r3, r1
 80017be:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80017c8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	430a      	orrs	r2, r1
 8001808:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a77      	ldr	r2, [pc, #476]	@ (8001a04 <DMA_Init+0x21c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d036      	beq.n	800189a <DMA_Init+0xb2>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a75      	ldr	r2, [pc, #468]	@ (8001a08 <DMA_Init+0x220>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d031      	beq.n	800189a <DMA_Init+0xb2>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a74      	ldr	r2, [pc, #464]	@ (8001a0c <DMA_Init+0x224>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d02c      	beq.n	800189a <DMA_Init+0xb2>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a72      	ldr	r2, [pc, #456]	@ (8001a10 <DMA_Init+0x228>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d027      	beq.n	800189a <DMA_Init+0xb2>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a71      	ldr	r2, [pc, #452]	@ (8001a14 <DMA_Init+0x22c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d022      	beq.n	800189a <DMA_Init+0xb2>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6f      	ldr	r2, [pc, #444]	@ (8001a18 <DMA_Init+0x230>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d01d      	beq.n	800189a <DMA_Init+0xb2>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6e      	ldr	r2, [pc, #440]	@ (8001a1c <DMA_Init+0x234>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d018      	beq.n	800189a <DMA_Init+0xb2>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6c      	ldr	r2, [pc, #432]	@ (8001a20 <DMA_Init+0x238>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <DMA_Init+0xb2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6b      	ldr	r2, [pc, #428]	@ (8001a24 <DMA_Init+0x23c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d00e      	beq.n	800189a <DMA_Init+0xb2>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a69      	ldr	r2, [pc, #420]	@ (8001a28 <DMA_Init+0x240>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d009      	beq.n	800189a <DMA_Init+0xb2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a68      	ldr	r2, [pc, #416]	@ (8001a2c <DMA_Init+0x244>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d004      	beq.n	800189a <DMA_Init+0xb2>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a66      	ldr	r2, [pc, #408]	@ (8001a30 <DMA_Init+0x248>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <DMA_Init+0xb6>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <DMA_Init+0xb8>
 800189e:	2300      	movs	r3, #0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d012      	beq.n	80018ca <DMA_Init+0xe2>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	051b      	lsls	r3, r3, #20
 80018b0:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80018b4:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	3b01      	subs	r3, #1
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80018c2:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	430a      	orrs	r2, r1
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fc:	d145      	bne.n	800198a <DMA_Init+0x1a2>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a40      	ldr	r2, [pc, #256]	@ (8001a04 <DMA_Init+0x21c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d036      	beq.n	8001976 <DMA_Init+0x18e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a3e      	ldr	r2, [pc, #248]	@ (8001a08 <DMA_Init+0x220>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d031      	beq.n	8001976 <DMA_Init+0x18e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a3d      	ldr	r2, [pc, #244]	@ (8001a0c <DMA_Init+0x224>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d02c      	beq.n	8001976 <DMA_Init+0x18e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a3b      	ldr	r2, [pc, #236]	@ (8001a10 <DMA_Init+0x228>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d027      	beq.n	8001976 <DMA_Init+0x18e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a14 <DMA_Init+0x22c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <DMA_Init+0x18e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a38      	ldr	r2, [pc, #224]	@ (8001a18 <DMA_Init+0x230>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01d      	beq.n	8001976 <DMA_Init+0x18e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a37      	ldr	r2, [pc, #220]	@ (8001a1c <DMA_Init+0x234>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d018      	beq.n	8001976 <DMA_Init+0x18e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a35      	ldr	r2, [pc, #212]	@ (8001a20 <DMA_Init+0x238>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <DMA_Init+0x18e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a34      	ldr	r2, [pc, #208]	@ (8001a24 <DMA_Init+0x23c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00e      	beq.n	8001976 <DMA_Init+0x18e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a32      	ldr	r2, [pc, #200]	@ (8001a28 <DMA_Init+0x240>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d009      	beq.n	8001976 <DMA_Init+0x18e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a31      	ldr	r2, [pc, #196]	@ (8001a2c <DMA_Init+0x244>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <DMA_Init+0x18e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2f      	ldr	r2, [pc, #188]	@ (8001a30 <DMA_Init+0x248>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <DMA_Init+0x192>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <DMA_Init+0x194>
 800197a:	2300      	movs	r3, #0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <DMA_Init+0x1b4>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e008      	b.n	800199c <DMA_Init+0x1b4>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001992:	d103      	bne.n	800199c <DMA_Init+0x1b4>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800199a:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019ac:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <DMA_Init+0x24c>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <DMA_Init+0x244>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d004      	beq.n	80019d6 <DMA_Init+0x1ee>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a17      	ldr	r2, [pc, #92]	@ (8001a30 <DMA_Init+0x248>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <DMA_Init+0x1f2>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <DMA_Init+0x1f4>
 80019da:	2300      	movs	r3, #0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <DMA_Init+0x208>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40020050 	.word	0x40020050
 8001a08:	400200d0 	.word	0x400200d0
 8001a0c:	40020150 	.word	0x40020150
 8001a10:	400201d0 	.word	0x400201d0
 8001a14:	40020250 	.word	0x40020250
 8001a18:	400202d0 	.word	0x400202d0
 8001a1c:	40020350 	.word	0x40020350
 8001a20:	400203d0 	.word	0x400203d0
 8001a24:	40020450 	.word	0x40020450
 8001a28:	400204d0 	.word	0x400204d0
 8001a2c:	40020550 	.word	0x40020550
 8001a30:	400205d0 	.word	0x400205d0
 8001a34:	3cc02180 	.word	0x3cc02180

08001a38 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_DMAEx_List_Start_IT+0x16>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e082      	b.n	8001b58 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a58:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a64:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_DMAEx_List_Start_IT+0x40>
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d16a      	bne.n	8001b48 <HAL_DMAEx_List_Start_IT+0x110>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d067      	beq.n	8001b48 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d157      	bne.n	8001b34 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_DMAEx_List_Start_IT+0x5a>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e062      	b.n	8001b58 <HAL_DMAEx_List_Start_IT+0x120>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8001ac6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ade:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001af6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f107 010c 	add.w	r1, r7, #12
 8001b02:	2200      	movs	r2, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f85f 	bl	8001bc8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	0c0b      	lsrs	r3, r1, #16
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001b28:	4013      	ands	r3, r2
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e007      	b.n	8001b58 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2240      	movs	r2, #64	@ 0x40
 8001b4c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_DMAEx_ConfigDataHandling>:
  *                               configuration.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigDataHandling(DMA_HandleTypeDef *const hdma,
                                               DMA_DataHandlingConfTypeDef const *const pConfigDataHandling)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Check the DMA peripheral handle and data handling parameters */
  if ((hdma == NULL) || (pConfigDataHandling == NULL))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_DMAEx_ConfigDataHandling+0x16>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_DMAEx_ConfigDataHandling+0x1a>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e01f      	b.n	8001bba <HAL_DMAEx_ConfigDataHandling+0x5a>
  /* Check the parameters */
  assert_param(IS_DMA_DATA_ALIGNMENT(pConfigDataHandling->DataAlignment));
  assert_param(IS_DMA_DATA_EXCHANGE(pConfigDataHandling->DataExchange));

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d111      	bne.n	8001baa <HAL_DMAEx_ConfigDataHandling+0x4a>
  {
    MODIFY_REG(hdma->Instance->CTR1, (DMA_CTR1_DHX | DMA_CTR1_DBX | DMA_CTR1_SBX | DMA_CTR1_PAM),
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001b90:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	6851      	ldr	r1, [r2, #4]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	4311      	orrs	r1, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e007      	b.n	8001bba <HAL_DMAEx_ConfigDataHandling+0x5a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2240      	movs	r2, #64	@ 0x40
 8001bae:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00c      	beq.n	8001bfa <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <DMA_List_GetCLLRNodeInfo+0x58>)
 8001bea:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00f      	beq.n	8001c12 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8001bf8:	e00b      	b.n	8001c12 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8001c04:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2205      	movs	r2, #5
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	fe010000 	.word	0xfe010000
 8001c24:	f8010000 	.word	0xf8010000

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c36:	e162      	b.n	8001efe <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8154 	beq.w	8001ef8 <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d005      	beq.n	8001c68 <HAL_GPIO_Init+0x40>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d130      	bne.n	8001cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 0201 	and.w	r2, r3, #1
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d109      	bne.n	8001cea <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d11b      	bne.n	8001d1a <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d017      	beq.n	8001d1a <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d123      	bne.n	8001d6e <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	6939      	ldr	r1, [r7, #16]
 8001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0203 	and.w	r2, r3, #3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80a4 	beq.w	8001ef8 <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001db0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3318      	adds	r3, #24
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a52      	ldr	r2, [pc, #328]	@ (8001f20 <HAL_GPIO_Init+0x2f8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d025      	beq.n	8001e28 <HAL_GPIO_Init+0x200>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d01f      	beq.n	8001e24 <HAL_GPIO_Init+0x1fc>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a50      	ldr	r2, [pc, #320]	@ (8001f28 <HAL_GPIO_Init+0x300>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d019      	beq.n	8001e20 <HAL_GPIO_Init+0x1f8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_GPIO_Init+0x304>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_GPIO_Init+0x1f4>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a4e      	ldr	r2, [pc, #312]	@ (8001f30 <HAL_GPIO_Init+0x308>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00d      	beq.n	8001e18 <HAL_GPIO_Init+0x1f0>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a4d      	ldr	r2, [pc, #308]	@ (8001f34 <HAL_GPIO_Init+0x30c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d007      	beq.n	8001e14 <HAL_GPIO_Init+0x1ec>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_GPIO_Init+0x310>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d101      	bne.n	8001e10 <HAL_GPIO_Init+0x1e8>
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	e00c      	b.n	8001e2a <HAL_GPIO_Init+0x202>
 8001e10:	2310      	movs	r3, #16
 8001e12:	e00a      	b.n	8001e2a <HAL_GPIO_Init+0x202>
 8001e14:	2306      	movs	r3, #6
 8001e16:	e008      	b.n	8001e2a <HAL_GPIO_Init+0x202>
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e006      	b.n	8001e2a <HAL_GPIO_Init+0x202>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e004      	b.n	8001e2a <HAL_GPIO_Init+0x202>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e002      	b.n	8001e2a <HAL_GPIO_Init+0x202>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_GPIO_Init+0x202>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	f002 0203 	and.w	r2, r2, #3
 8001e30:	00d2      	lsls	r2, r2, #3
 8001e32:	4093      	lsls	r3, r2
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001e3a:	4938      	ldr	r1, [pc, #224]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3318      	adds	r3, #24
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e48:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001e76:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f47f ae95 	bne.w	8001c38 <HAL_GPIO_Init+0x10>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40032000 	.word	0x40032000
 8001f20:	42020000 	.word	0x42020000
 8001f24:	42020400 	.word	0x42020400
 8001f28:	42020800 	.word	0x42020800
 8001f2c:	42020c00 	.word	0x42020c00
 8001f30:	42021000 	.word	0x42021000
 8001f34:	42021800 	.word	0x42021800
 8001f38:	42021c00 	.word	0x42021c00

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4013      	ands	r3, r2
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43d9      	mvns	r1, r3
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00U)
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d006      	beq.n	8001fc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe f97a 	bl	80002b8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00U)
 8001fc4:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001fd0:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f807 	bl	8001fec <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40032000 	.word	0x40032000

08001fec <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e007      	b.n	8002032 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0204 	bic.w	r2, r3, #4
 800202a:	4905      	ldr	r1, [pc, #20]	@ (8002040 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40030400 	.word	0x40030400

08002044 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_ICACHE_Enable+0x1c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <HAL_ICACHE_Enable+0x1c>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40030400 	.word	0x40030400

08002064 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->DBPR, PWR_DBPR_DBP);
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <HAL_PWR_EnableBkUpAccess+0x14>)
 800206a:	2201      	movs	r2, #1
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40030800 	.word	0x40030800

0800207c <HAL_PWR_EnterSTOPMode>:
  *                     @arg @ref PWR_STOPENTRY_WFE_NO_EVT_CLEAR enter Stop mode with Wait
  *                               For Event request and no clear of pending event before.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode(uint32_t StopMode, uint8_t STOPEntry)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_PWR_STOPMODE(StopMode));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Configure Stop mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, StopMode);
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_PWR_EnterSTOPMode+0x58>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 0207 	bic.w	r2, r3, #7
 8002090:	4910      	ldr	r1, [pc, #64]	@ (80020d4 <HAL_PWR_EnterSTOPMode+0x58>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <HAL_PWR_EnterSTOPMode+0x5c>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	4a0e      	ldr	r2, [pc, #56]	@ (80020d8 <HAL_PWR_EnterSTOPMode+0x5c>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Wait For Interrupt Request */
    __WFI();
 80020aa:	bf30      	wfi
 80020ac:	e005      	b.n	80020ba <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if (STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d001      	beq.n	80020b8 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 80020b4:	bf40      	sev
      __WFE();
 80020b6:	bf20      	wfe
    }

    /* Request Wait For Event */
    __WFE();
 80020b8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020ba:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	4a06      	ldr	r2, [pc, #24]	@ (80020d8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80020c0:	f023 0304 	bic.w	r3, r3, #4
 80020c4:	6113      	str	r3, [r2, #16]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40030800 	.word	0x40030800
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f023 0303 	bic.w	r3, r3, #3
 80020ec:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 80020f6:	4a15      	ldr	r2, [pc, #84]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80020fc:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2232      	movs	r2, #50	@ 0x32
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	4a13      	ldr	r2, [pc, #76]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	0c9b      	lsrs	r3, r3, #18
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8002118:	e002      	b.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3b01      	subs	r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8002120:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4013      	ands	r3, r2
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	429a      	cmp	r2, r3
 800212c:	d002      	beq.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x58>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f2      	bne.n	800211a <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e000      	b.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 800213e:	2300      	movs	r3, #0
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40030800 	.word	0x40030800
 8002150:	20000078 	.word	0x20000078
 8002154:	431bde83 	.word	0x431bde83

08002158 <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 800215e:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <HAL_PWREx_EnableEpodBooster+0x54>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <HAL_PWREx_EnableEpodBooster+0x54>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002168:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800216a:	f7fe fe2f 	bl	8000dcc <HAL_GetTick>
 800216e:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002170:	e00f      	b.n	8002192 <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8002172:	f7fe fe2b 	bl	8000dcc <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d908      	bls.n	8002192 <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002180:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <HAL_PWREx_EnableEpodBooster+0x54>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800218c:	d001      	beq.n	8002192 <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e007      	b.n	80021a2 <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_PWREx_EnableEpodBooster+0x54>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800219a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800219e:	d1e8      	bne.n	8002172 <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40030800 	.word	0x40030800

080021b0 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_MODE_CHANGE_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80021b8:	4b20      	ldr	r3, [pc, #128]	@ (800223c <HAL_PWREx_ConfigSupply+0x8c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2232      	movs	r2, #50	@ 0x32
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002240 <HAL_PWREx_ConfigSupply+0x90>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0c9b      	lsrs	r3, r3, #18
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply  */
  if (SupplySource == PWR_LDO_SUPPLY)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d113      	bne.n	80021fc <HAL_PWREx_ConfigSupply+0x4c>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_PWREx_ConfigSupply+0x94>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002244 <HAL_PWREx_ConfigSupply+0x94>)
 80021da:	f023 0302 	bic.w	r3, r3, #2
 80021de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021e0:	e002      	b.n	80021e8 <HAL_PWREx_ConfigSupply+0x38>
    {
      timeout--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <HAL_PWREx_ConfigSupply+0x94>)
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d116      	bne.n	8002222 <HAL_PWREx_ConfigSupply+0x72>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f3      	bne.n	80021e2 <HAL_PWREx_ConfigSupply+0x32>
 80021fa:	e012      	b.n	8002222 <HAL_PWREx_ConfigSupply+0x72>
  }
  /* Configure the SMPS as system regulator supply  */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_PWREx_ConfigSupply+0x94>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4a10      	ldr	r2, [pc, #64]	@ (8002244 <HAL_PWREx_ConfigSupply+0x94>)
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002208:	e002      	b.n	8002210 <HAL_PWREx_ConfigSupply+0x60>
    {
      timeout--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3b01      	subs	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <HAL_PWREx_ConfigSupply+0x94>)
 8002212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <HAL_PWREx_ConfigSupply+0x72>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f3      	bne.n	800220a <HAL_PWREx_ConfigSupply+0x5a>
    }
  }

  /* Check time out  */
  if (timeout == 0U)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_PWREx_ConfigSupply+0x7c>
  {
    return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e000      	b.n	800222e <HAL_PWREx_ConfigSupply+0x7e>
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000078 	.word	0x20000078
 8002240:	431bde83 	.word	0x431bde83
 8002244:	40030800 	.word	0x40030800

08002248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e340      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4b98      	ldr	r3, [pc, #608]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80ad 	beq.w	80023cc <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f040 80a5 	bne.w	80023cc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e32a      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d04f      	beq.n	800232e <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
 8002298:	4b88      	ldr	r3, [pc, #544]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a87      	ldr	r2, [pc, #540]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800229e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e02f      	b.n	8002306 <HAL_RCC_OscConfig+0xbe>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x82>
 80022b0:	4b82      	ldr	r3, [pc, #520]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a81      	ldr	r2, [pc, #516]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b7f      	ldr	r3, [pc, #508]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a7e      	ldr	r2, [pc, #504]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e01d      	b.n	8002306 <HAL_RCC_OscConfig+0xbe>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80022d2:	d10c      	bne.n	80022ee <HAL_RCC_OscConfig+0xa6>
 80022d4:	4b79      	ldr	r3, [pc, #484]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a78      	ldr	r2, [pc, #480]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022da:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b76      	ldr	r3, [pc, #472]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a75      	ldr	r2, [pc, #468]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	e00b      	b.n	8002306 <HAL_RCC_OscConfig+0xbe>
 80022ee:	4b73      	ldr	r3, [pc, #460]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a72      	ldr	r2, [pc, #456]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b70      	ldr	r3, [pc, #448]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6f      	ldr	r2, [pc, #444]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002300:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8002304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fd61 	bl	8000dcc <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230e:	f7fe fd5d 	bl	8000dcc <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	@ 0x64
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e2dd      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002320:	4b66      	ldr	r3, [pc, #408]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0xc6>
 800232c:	e04e      	b.n	80023cc <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0xfe>
 8002338:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5f      	ldr	r2, [pc, #380]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800233e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	e02f      	b.n	80023a6 <HAL_RCC_OscConfig+0x15e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0x122>
 8002350:	4b5a      	ldr	r3, [pc, #360]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a59      	ldr	r2, [pc, #356]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002356:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b57      	ldr	r3, [pc, #348]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a56      	ldr	r2, [pc, #344]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e01d      	b.n	80023a6 <HAL_RCC_OscConfig+0x15e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002372:	d10c      	bne.n	800238e <HAL_RCC_OscConfig+0x146>
 8002374:	4b51      	ldr	r3, [pc, #324]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a50      	ldr	r2, [pc, #320]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800237a:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b4e      	ldr	r3, [pc, #312]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a4d      	ldr	r2, [pc, #308]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e00b      	b.n	80023a6 <HAL_RCC_OscConfig+0x15e>
 800238e:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a4a      	ldr	r2, [pc, #296]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b48      	ldr	r3, [pc, #288]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a47      	ldr	r2, [pc, #284]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023a0:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fd11 	bl	8000dcc <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ae:	f7fe fd0d 	bl	8000dcc <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	@ 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e28d      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023c0:	4b3e      	ldr	r3, [pc, #248]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d054      	beq.n	8002482 <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d110      	bne.n	8002400 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e278      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	4930      	ldr	r1, [pc, #192]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	610b      	str	r3, [r1, #16]
 80023fe:	e040      	b.n	8002482 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2b      	ldr	r2, [pc, #172]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800240e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fcda 	bl	8000dcc <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241c:	f7fe fcd6 	bl	8000dcc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e256      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242e:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	491c      	ldr	r1, [pc, #112]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800244a:	4313      	orrs	r3, r2
 800244c:	610b      	str	r3, [r1, #16]
 800244e:	e018      	b.n	8002482 <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002450:	4b1a      	ldr	r3, [pc, #104]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fcb6 	bl	8000dcc <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fcb2 	bl	8000dcc <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e232      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002476:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d038      	beq.n	8002500 <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d01b      	beq.n	80024ce <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fc93 	bl	8000dcc <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024aa:	f7fe fc8f 	bl	8000dcc <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d903      	bls.n	80024c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e20f      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
 80024bc:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80024c0:	4ba0      	ldr	r3, [pc, #640]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x262>
 80024cc:	e018      	b.n	8002500 <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ce:	4b9d      	ldr	r3, [pc, #628]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a9c      	ldr	r2, [pc, #624]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80024d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7fe fc77 	bl	8000dcc <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e2:	f7fe fc73 	bl	8000dcc <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1f3      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80024f4:	4b93      	ldr	r3, [pc, #588]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f0      	bne.n	80024e2 <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a7 	beq.w	800265c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8002512:	4b8c      	ldr	r3, [pc, #560]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d110      	bne.n	8002542 <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002520:	4b88      	ldr	r3, [pc, #544]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002526:	4a87      	ldr	r2, [pc, #540]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002530:	4b84      	ldr	r3, [pc, #528]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002542:	4b81      	ldr	r3, [pc, #516]	@ (8002748 <HAL_RCC_OscConfig+0x500>)
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	4a80      	ldr	r2, [pc, #512]	@ (8002748 <HAL_RCC_OscConfig+0x500>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d051      	beq.n	80025fa <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 8002556:	4b7b      	ldr	r3, [pc, #492]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002558:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800255c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002560:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	4313      	orrs	r3, r2
 800256a:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 800256c:	4a75      	ldr	r2, [pc, #468]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fc2a 	bl	8000dcc <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fc26 	bl	8000dcc <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1a4      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	4b6c      	ldr	r3, [pc, #432]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002594:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ed      	beq.n	800257c <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01e      	beq.n	80025ea <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fc0d 	bl	8000dcc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e18b      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80025c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80025ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0ed      	beq.n	80025ae <HAL_RCC_OscConfig+0x366>
 80025d2:	e038      	b.n	8002646 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d4:	f7fe fbfa 	bl	8000dcc <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e178      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025ea:	4b56      	ldr	r3, [pc, #344]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80025ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80025f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ed      	bne.n	80025d4 <HAL_RCC_OscConfig+0x38c>
 80025f8:	e025      	b.n	8002646 <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 80025fa:	4b52      	ldr	r3, [pc, #328]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80025fc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002600:	4a50      	ldr	r2, [pc, #320]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002602:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8002606:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800260a:	4b4e      	ldr	r3, [pc, #312]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 800260c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002610:	4a4c      	ldr	r2, [pc, #304]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fbd7 	bl	8000dcc <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002622:	f7fe fbd3 	bl	8000dcc <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e151      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002638:	4b42      	ldr	r3, [pc, #264]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 800263a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1ed      	bne.n	8002622 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002646:	7efb      	ldrb	r3, [r7, #27]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b3d      	ldr	r3, [pc, #244]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002652:	4a3c      	ldr	r2, [pc, #240]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d078      	beq.n	800275a <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 8002668:	4b36      	ldr	r3, [pc, #216]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 800266a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800266e:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d050      	beq.n	800271a <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	429a      	cmp	r2, r3
 8002684:	d023      	beq.n	80026ce <HAL_RCC_OscConfig+0x486>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01e      	beq.n	80026ce <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f023 0303 	bic.w	r3, r3, #3
 8002696:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 8002698:	4a2a      	ldr	r2, [pc, #168]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fb94 	bl	8000dcc <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe fb90 	bl	8000dcc <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b14      	cmp	r3, #20
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e110      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 80026ba:	4b22      	ldr	r3, [pc, #136]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80026bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1ef      	bne.n	80026a8 <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7fe fb8b 	bl	8000de4 <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 80026e8:	4a16      	ldr	r2, [pc, #88]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe fb6c 	bl	8000dcc <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fb68 	bl	8000dcc <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b14      	cmp	r3, #20
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0e8      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 800270a:	4b0e      	ldr	r3, [pc, #56]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 800270c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ef      	beq.n	80026f8 <HAL_RCC_OscConfig+0x4b0>
 8002718:	e01f      	b.n	800275a <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 8002722:	4a08      	ldr	r2, [pc, #32]	@ (8002744 <HAL_RCC_OscConfig+0x4fc>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe fb4f 	bl	8000dcc <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8002730:	e00c      	b.n	800274c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002732:	f7fe fb4b 	bl	8000dcc <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b14      	cmp	r3, #20
 800273e:	d905      	bls.n	800274c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0cb      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
 8002744:	40030c00 	.word	0x40030c00
 8002748:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 800274c:	4b65      	ldr	r3, [pc, #404]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800274e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1eb      	bne.n	8002732 <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d068      	beq.n	8002838 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10d      	bne.n	800278a <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0b1      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 8002778:	4b5a      	ldr	r3, [pc, #360]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a59      	ldr	r2, [pc, #356]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	e03b      	b.n	8002802 <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 800278a:	4b56      	ldr	r3, [pc, #344]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0305 	and.w	r3, r3, #5
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0a0      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 800279a:	4b52      	ldr	r3, [pc, #328]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80027a2:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	431a      	orrs	r2, r3
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027b6:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 80027b8:	4a4a      	ldr	r2, [pc, #296]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d116      	bne.n	80027f2 <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027c4:	f000 f982 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b46      	ldr	r3, [pc, #280]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	4945      	ldr	r1, [pc, #276]	@ (80028e8 <HAL_RCC_OscConfig+0x6a0>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a44      	ldr	r2, [pc, #272]	@ (80028ec <HAL_RCC_OscConfig+0x6a4>)
 80027dc:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027de:	4b44      	ldr	r3, [pc, #272]	@ (80028f0 <HAL_RCC_OscConfig+0x6a8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fa60 	bl	8000ca8 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e074      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 80027f2:	4b3c      	ldr	r3, [pc, #240]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3b      	ldr	r2, [pc, #236]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 80027fe:	2304      	movs	r3, #4
 8002800:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002802:	f7fe fae3 	bl	8000dcc <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8002808:	e00f      	b.n	800282a <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800280a:	f7fe fadf 	bl	8000dcc <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d908      	bls.n	800282a <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 8002818:	4b32      	ldr	r3, [pc, #200]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e058      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 800282a:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	429a      	cmp	r2, r3
 8002836:	d1e8      	bne.n	800280a <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d04a      	beq.n	80028da <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d108      	bne.n	800285e <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 800284c:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a24      	ldr	r2, [pc, #144]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 8002852:	f023 0308 	bic.w	r3, r3, #8
 8002856:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	e022      	b.n	80028a4 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 800285e:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0318 	and.w	r3, r3, #24
 8002866:	2b08      	cmp	r3, #8
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e036      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 800286e:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 8002876:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002880:	4313      	orrs	r3, r2
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4313      	orrs	r3, r2
 8002888:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800288c:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 800288e:	4a15      	ldr	r2, [pc, #84]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8002894:	4b13      	ldr	r3, [pc, #76]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a12      	ldr	r2, [pc, #72]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 800289a:	f043 0308 	orr.w	r3, r3, #8
 800289e:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 80028a0:	2310      	movs	r3, #16
 80028a2:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a4:	f7fe fa92 	bl	8000dcc <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 80028aa:	e00f      	b.n	80028cc <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ac:	f7fe fa8e 	bl	8000dcc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d908      	bls.n	80028cc <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e007      	b.n	80028dc <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_OscConfig+0x69c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d1e8      	bne.n	80028ac <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40030c00 	.word	0x40030c00
 80028e8:	08004288 	.word	0x08004288
 80028ec:	20000078 	.word	0x20000078
 80028f0:	2000007c 	.word	0x2000007c

080028f4 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0d2      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 020f 	bic.w	r2, r3, #15
 800291e:	4966      	ldr	r1, [pc, #408]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b64      	ldr	r3, [pc, #400]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0ba      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d040      	beq.n	80029c6 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8002944:	4b5d      	ldr	r3, [pc, #372]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d106      	bne.n	8002960 <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d113      	bne.n	8002984 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0a6      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e09b      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e094      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002984:	4b4d      	ldr	r3, [pc, #308]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f023 0203 	bic.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	494a      	ldr	r1, [pc, #296]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002992:	4313      	orrs	r3, r2
 8002994:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002996:	f7fe fa19 	bl	8000dcc <HAL_GetTick>
 800299a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299e:	f7fe fa15 	bl	8000dcc <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e07c      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 80029b4:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f003 020c 	and.w	r2, r3, #12
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d1eb      	bne.n	800299e <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 80029c6:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 030f 	bic.w	r3, r3, #15
 80029e2:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80029ee:	2301      	movs	r3, #1
 80029f0:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a04:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002a10:	2301      	movs	r3, #1
 8002a12:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a26:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 8002a34:	2301      	movs	r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8002a50:	4a1a      	ldr	r2, [pc, #104]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b17      	ldr	r3, [pc, #92]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d210      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 020f 	bic.w	r2, r3, #15
 8002a6e:	4912      	ldr	r1, [pc, #72]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e012      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a88:	f000 f820 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	490a      	ldr	r1, [pc, #40]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a98:	5ccb      	ldrb	r3, [r1, r3]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1d0>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1d4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe f8fe 	bl	8000ca8 <HAL_InitTick>
 8002aac:	4603      	mov	r3, r0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	40030c00 	.word	0x40030c00
 8002ac0:	08004288 	.word	0x08004288
 8002ac4:	20000078 	.word	0x20000078
 8002ac8:	2000007c 	.word	0x2000007c

08002acc <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x80>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x84>)
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	e029      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x84>)
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	e023      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 8002af4:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x80>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	da02      	bge.n	8002b10 <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x88>)
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	e001      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 8002b10:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002b12:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0f5b      	lsrs	r3, r3, #29
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x88>)
 8002b22:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8002b24:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x80>)
 8002b26:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002b2a:	0b1b      	lsrs	r3, r3, #12
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8002b3c:	683b      	ldr	r3, [r7, #0]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40030c00 	.word	0x40030c00
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	016e3600 	.word	0x016e3600
 8002b58:	05b8d800 	.word	0x05b8d800

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b088      	sub	sp, #32
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b70:	4bad      	ldr	r3, [pc, #692]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002b76:	f023 0201 	bic.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	49aa      	ldr	r1, [pc, #680]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b92:	4ba5      	ldr	r3, [pc, #660]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b94:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002b98:	f023 0204 	bic.w	r2, r3, #4
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	49a1      	ldr	r1, [pc, #644]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bb6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002bba:	f023 0210 	bic.w	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4999      	ldr	r1, [pc, #612]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bd6:	4b94      	ldr	r3, [pc, #592]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bd8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002bdc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	4990      	ldr	r1, [pc, #576]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 8002bf8:	4b8b      	ldr	r3, [pc, #556]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002bfa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002bfe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4988      	ldr	r1, [pc, #544]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c1a:	4b83      	ldr	r3, [pc, #524]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c20:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	497f      	ldr	r1, [pc, #508]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4977      	ldr	r1, [pc, #476]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 8002c5e:	4b72      	ldr	r3, [pc, #456]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c60:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c64:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	496e      	ldr	r1, [pc, #440]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8002c80:	4b69      	ldr	r3, [pc, #420]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c82:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	4966      	ldr	r1, [pc, #408]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ca2:	4b61      	ldr	r3, [pc, #388]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ca4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002ca8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	495d      	ldr	r1, [pc, #372]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8002cc4:	4b58      	ldr	r3, [pc, #352]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002cca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	4955      	ldr	r1, [pc, #340]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 8002ce6:	4b50      	ldr	r3, [pc, #320]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002ce8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002cec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	494c      	ldr	r1, [pc, #304]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d08:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d0e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	4944      	ldr	r1, [pc, #272]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d38:	493b      	ldr	r1, [pc, #236]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 8002d4c:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d4e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5a:	4933      	ldr	r1, [pc, #204]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d70:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002d74:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	492a      	ldr	r1, [pc, #168]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8002d90:	4b25      	ldr	r3, [pc, #148]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002d92:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	4922      	ldr	r1, [pc, #136]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002db4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002db8:	f023 0208 	bic.w	r2, r3, #8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc0:	4919      	ldr	r1, [pc, #100]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dd4:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002dd6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002dda:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	4911      	ldr	r1, [pc, #68]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002df8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002dfc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e04:	4908      	ldr	r1, [pc, #32]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d019      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 8002e18:	4b03      	ldr	r3, [pc, #12]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002e1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	e002      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002e26:	bf00      	nop
 8002e28:	40030c00 	.word	0x40030c00
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2e:	4980      	ldr	r1, [pc, #512]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 8002e36:	4b7e      	ldr	r3, [pc, #504]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e38:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e3c:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	497a      	ldr	r1, [pc, #488]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8002e58:	4b75      	ldr	r3, [pc, #468]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e66:	4972      	ldr	r1, [pc, #456]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e88:	4969      	ldr	r1, [pc, #420]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e9c:	4b64      	ldr	r3, [pc, #400]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ea2:	f023 0203 	bic.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eaa:	4961      	ldr	r1, [pc, #388]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ec4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ecc:	4958      	ldr	r1, [pc, #352]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 8002ee0:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ee2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ee6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eee:	4950      	ldr	r1, [pc, #320]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f02:	4b4b      	ldr	r3, [pc, #300]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f04:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f10:	4947      	ldr	r1, [pc, #284]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f280 8082 	bge.w	8003026 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 8002f22:	4b43      	ldr	r3, [pc, #268]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f24:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002f28:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f2a:	4b41      	ldr	r3, [pc, #260]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f34:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d072      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 8002f40:	2300      	movs	r3, #0
 8002f42:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8002f44:	4b3a      	ldr	r3, [pc, #232]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d110      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b37      	ldr	r3, [pc, #220]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f58:	4a35      	ldr	r2, [pc, #212]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002f62:	4b33      	ldr	r3, [pc, #204]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002f74:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	4a2e      	ldr	r2, [pc, #184]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00f      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f88:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002f8c:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f92:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f96:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f98:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002f9c:	4a24      	ldr	r2, [pc, #144]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fac:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fc2:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01c      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fd fef9 	bl	8000dcc <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8002fdc:	e011      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fd fef5 	bl	8000dcc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d908      	bls.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ff2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e012      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003004:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0e6      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003010:	7efb      	ldrb	r3, [r7, #27]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003016:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800301e:	f023 0304 	bic.w	r3, r3, #4
 8003022:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40030c00 	.word	0x40030c00
 8003034:	40030800 	.word	0x40030800

08003038 <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 8003042:	4b1e      	ldr	r3, [pc, #120]	@ (80030bc <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e027      	b.n	80030ae <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d107      	bne.n	8003074 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
 8003072:	e01c      	b.n	80030ae <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d107      	bne.n	800308a <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d102      	bne.n	800308a <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	e011      	b.n	80030ae <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 800308a:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4313      	orrs	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 80030a4:	4a05      	ldr	r2, [pc, #20]	@ (80030bc <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40030c00 	.word	0x40030c00

080030c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d071      	beq.n	80031b6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fb66 	bl	80007b8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80030f4:	4b32      	ldr	r3, [pc, #200]	@ (80031c0 <HAL_RTC_Init+0x100>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d051      	beq.n	80031a4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003100:	4b2f      	ldr	r3, [pc, #188]	@ (80031c0 <HAL_RTC_Init+0x100>)
 8003102:	22ca      	movs	r2, #202	@ 0xca
 8003104:	625a      	str	r2, [r3, #36]	@ 0x24
 8003106:	4b2e      	ldr	r3, [pc, #184]	@ (80031c0 <HAL_RTC_Init+0x100>)
 8003108:	2253      	movs	r2, #83	@ 0x53
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f88b 	bl	8003228 <RTC_EnterInitMode>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d13f      	bne.n	800319c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800311c:	4b28      	ldr	r3, [pc, #160]	@ (80031c0 <HAL_RTC_Init+0x100>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a27      	ldr	r2, [pc, #156]	@ (80031c0 <HAL_RTC_Init+0x100>)
 8003122:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8003126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800312a:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800312c:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <HAL_RTC_Init+0x100>)
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	4319      	orrs	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	430b      	orrs	r3, r1
 8003140:	491f      	ldr	r1, [pc, #124]	@ (80031c0 <HAL_RTC_Init+0x100>)
 8003142:	4313      	orrs	r3, r2
 8003144:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	491b      	ldr	r1, [pc, #108]	@ (80031c0 <HAL_RTC_Init+0x100>)
 8003152:	4313      	orrs	r3, r2
 8003154:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003156:	4b1a      	ldr	r3, [pc, #104]	@ (80031c0 <HAL_RTC_Init+0x100>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	430b      	orrs	r3, r1
 8003168:	4915      	ldr	r1, [pc, #84]	@ (80031c0 <HAL_RTC_Init+0x100>)
 800316a:	4313      	orrs	r3, r2
 800316c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f896 	bl	80032a0 <RTC_ExitInitMode>
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10e      	bne.n	800319c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <HAL_RTC_Init+0x100>)
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a19      	ldr	r1, [r3, #32]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4319      	orrs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	430b      	orrs	r3, r1
 8003196:	490a      	ldr	r1, [pc, #40]	@ (80031c0 <HAL_RTC_Init+0x100>)
 8003198:	4313      	orrs	r3, r2
 800319a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <HAL_RTC_Init+0x100>)
 800319e:	22ff      	movs	r2, #255	@ 0xff
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80031a2:	e001      	b.n	80031a8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40007800 	.word	0x40007800

080031c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80031cc:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_RTC_WaitForSynchro+0x60>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <HAL_RTC_WaitForSynchro+0x60>)
 80031d2:	f023 0320 	bic.w	r3, r3, #32
 80031d6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80031d8:	f7fd fdf8 	bl	8000dcc <HAL_GetTick>
 80031dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80031de:	e013      	b.n	8003208 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031e0:	f7fd fdf4 	bl	8000dcc <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031ee:	d90b      	bls.n	8003208 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <HAL_RTC_WaitForSynchro+0x60>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10c      	bne.n	8003216 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2203      	movs	r2, #3
 8003200:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e008      	b.n	800321a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RTC_WaitForSynchro+0x60>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0e5      	beq.n	80031e0 <HAL_RTC_WaitForSynchro+0x1c>
 8003214:	e000      	b.n	8003218 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8003216:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40007800 	.word	0x40007800

08003228 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003234:	4b19      	ldr	r3, [pc, #100]	@ (800329c <RTC_EnterInitMode+0x74>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d128      	bne.n	8003292 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003240:	4b16      	ldr	r3, [pc, #88]	@ (800329c <RTC_EnterInitMode+0x74>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a15      	ldr	r2, [pc, #84]	@ (800329c <RTC_EnterInitMode+0x74>)
 8003246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800324a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800324c:	f7fd fdbe 	bl	8000dcc <HAL_GetTick>
 8003250:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003252:	e013      	b.n	800327c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003254:	f7fd fdba 	bl	8000dcc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003262:	d90b      	bls.n	800327c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003264:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <RTC_EnterInitMode+0x74>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10f      	bne.n	8003290 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2203      	movs	r2, #3
 8003278:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800327c:	4b07      	ldr	r3, [pc, #28]	@ (800329c <RTC_EnterInitMode+0x74>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <RTC_EnterInitMode+0x6a>
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d1e2      	bne.n	8003254 <RTC_EnterInitMode+0x2c>
 800328e:	e000      	b.n	8003292 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8003290:	bf00      	nop
        }
      }
    }
  }

  return status;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40007800 	.word	0x40007800

080032a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80032ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003318 <RTC_ExitInitMode+0x78>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a19      	ldr	r2, [pc, #100]	@ (8003318 <RTC_ExitInitMode+0x78>)
 80032b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032b6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80032b8:	4b17      	ldr	r3, [pc, #92]	@ (8003318 <RTC_ExitInitMode+0x78>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10c      	bne.n	80032de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff7d 	bl	80031c4 <HAL_RTC_WaitForSynchro>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01e      	beq.n	800330e <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2203      	movs	r2, #3
 80032d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	e017      	b.n	800330e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032de:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <RTC_ExitInitMode+0x78>)
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <RTC_ExitInitMode+0x78>)
 80032e4:	f023 0320 	bic.w	r3, r3, #32
 80032e8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff6a 	bl	80031c4 <HAL_RTC_WaitForSynchro>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2203      	movs	r2, #3
 80032fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <RTC_ExitInitMode+0x78>)
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	4a04      	ldr	r2, [pc, #16]	@ (8003318 <RTC_ExitInitMode+0x78>)
 8003308:	f043 0320 	orr.w	r3, r3, #32
 800330c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800330e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40007800 	.word	0x40007800

0800331c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8003332:	2302      	movs	r3, #2
 8003334:	e051      	b.n	80033da <HAL_RTCEx_SetWakeUpTimer+0xbe>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8003346:	4b27      	ldr	r3, [pc, #156]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	4a26      	ldr	r2, [pc, #152]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 800334c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003350:	6193      	str	r3, [r2, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003352:	4b24      	ldr	r3, [pc, #144]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d123      	bne.n	80033a6 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 800335e:	f7fd fd35 	bl	8000dcc <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8003364:	e017      	b.n	8003396 <HAL_RTCEx_SetWakeUpTimer+0x7a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003366:	f7fd fd31 	bl	8000dcc <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003374:	d90f      	bls.n	8003396 <HAL_RTCEx_SetWakeUpTimer+0x7a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8003376:	4b1b      	ldr	r3, [pc, #108]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d110      	bne.n	80033a4 <HAL_RTCEx_SetWakeUpTimer+0x88>
        {
          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2203      	movs	r2, #3
 8003386:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e021      	b.n	80033da <HAL_RTCEx_SetWakeUpTimer+0xbe>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8003396:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0e1      	beq.n	8003366 <HAL_RTCEx_SetWakeUpTimer+0x4a>
 80033a2:	e000      	b.n	80033a6 <HAL_RTCEx_SetWakeUpTimer+0x8a>
        }
        else
        {
          break;
 80033a4:	bf00      	nop
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80033a6:	4b0f      	ldr	r3, [pc, #60]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f023 0207 	bic.w	r2, r3, #7
 80033ae:	490d      	ldr	r1, [pc, #52]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	618b      	str	r3, [r1, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 80033b6:	4a0b      	ldr	r2, [pc, #44]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6153      	str	r3, [r2, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4a08      	ldr	r2, [pc, #32]	@ (80033e4 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 80033c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033c6:	6193      	str	r3, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40007800 	.word	0x40007800

080033e8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4910      	ldr	r1, [pc, #64]	@ (800343c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	431a      	orrs	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	490c      	ldr	r1, [pc, #48]	@ (8003440 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8003410:	4313      	orrs	r3, r2
 8003412:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6919      	ldr	r1, [r3, #16]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	430b      	orrs	r3, r1
 8003428:	4905      	ldr	r1, [pc, #20]	@ (8003440 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800342a:	4313      	orrs	r3, r2
 800342c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40007800 	.word	0x40007800
 8003440:	40007c00 	.word	0x40007c00

08003444 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0dc      	b.n	8003610 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6d      	ldr	r2, [pc, #436]	@ (8003618 <HAL_SPI_Init+0x1d4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d105      	bne.n	8003472 <HAL_SPI_Init+0x2e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	d901      	bls.n	8003472 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0ce      	b.n	8003610 <HAL_SPI_Init+0x1cc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fe74 	bl	8004160 <SPI_GetPacketSize>
 8003478:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a66      	ldr	r2, [pc, #408]	@ (8003618 <HAL_SPI_Init+0x1d4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d102      	bne.n	800348a <HAL_SPI_Init+0x46>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b08      	cmp	r3, #8
 8003488:	d80c      	bhi.n	80034a4 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800348e:	4a63      	ldr	r2, [pc, #396]	@ (800361c <HAL_SPI_Init+0x1d8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_SPI_Init+0x5a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a61      	ldr	r2, [pc, #388]	@ (8003620 <HAL_SPI_Init+0x1dc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d104      	bne.n	80034a8 <HAL_SPI_Init+0x64>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d901      	bls.n	80034a8 <HAL_SPI_Init+0x64>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0b3      	b.n	8003610 <HAL_SPI_Init+0x1cc>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_SPI_Init+0x7e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fd f9bb 	bl	8000838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80034e4:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034ee:	d119      	bne.n	8003524 <HAL_SPI_Init+0xe0>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034f8:	d103      	bne.n	8003502 <HAL_SPI_Init+0xbe>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_SPI_Init+0xd0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10c      	bne.n	8003524 <HAL_SPI_Init+0xe0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800350e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003512:	d107      	bne.n	8003524 <HAL_SPI_Init+0xe0>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00f      	beq.n	8003550 <HAL_SPI_Init+0x10c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b06      	cmp	r3, #6
 8003536:	d90b      	bls.n	8003550 <HAL_SPI_Init+0x10c>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e007      	b.n	8003560 <HAL_SPI_Init+0x11c>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	431a      	orrs	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	ea42 0103 	orr.w	r1, r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	ea42 0103 	orr.w	r1, r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_SPI_Init+0x1ba>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40002000 	.word	0x40002000
 800361c:	40013000 	.word	0x40013000
 8003620:	40003800 	.word	0x40003800

08003624 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	807b      	strh	r3, [r7, #2]
  else
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d001      	beq.n	8003642 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
 8003640:	e265      	b.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x4ea>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_SPI_TransmitReceive_DMA+0x30>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_SPI_TransmitReceive_DMA+0x30>
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e25a      	b.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x4ea>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_SPI_TransmitReceive_DMA+0x42>
 8003662:	2302      	movs	r3, #2
 8003664:	e253      	b.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x4ea>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2205      	movs	r2, #5
 8003672:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	887a      	ldrh	r2, [r7, #2]
 800369e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80036c4:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80036d4:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	d916      	bls.n	800370c <HAL_SPI_TransmitReceive_DMA+0xe8>
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e4:	69db      	ldr	r3, [r3, #28]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 80036e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036ea:	d105      	bne.n	80036f8 <HAL_SPI_TransmitReceive_DMA+0xd4>
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f2:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) || \
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d009      	beq.n	800370c <HAL_SPI_TransmitReceive_DMA+0xe8>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
        (hspi->hdmatx->Init.SrcDataWidth != DMA_SRC_DATAWIDTH_WORD)) && \
 80036fc:	4aa2      	ldr	r2, [pc, #648]	@ (8003988 <HAL_SPI_TransmitReceive_DMA+0x364>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d014      	beq.n	800372c <HAL_SPI_TransmitReceive_DMA+0x108>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4aa1      	ldr	r2, [pc, #644]	@ (800398c <HAL_SPI_TransmitReceive_DMA+0x368>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00f      	beq.n	800372c <HAL_SPI_TransmitReceive_DMA+0x108>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8003710:	2b07      	cmp	r3, #7
 8003712:	d911      	bls.n	8003738 <HAL_SPI_TransmitReceive_DMA+0x114>
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800371a:	69db      	ldr	r3, [r3, #28]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_SPI_TransmitReceive_DMA+0x108>
        (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_BYTE))))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003726:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE) || \
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_SPI_TransmitReceive_DMA+0x114>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e1ea      	b.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x4ea>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b07      	cmp	r3, #7
 800373e:	d842      	bhi.n	80037c6 <HAL_SPI_TransmitReceive_DMA+0x1a2>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d109      	bne.n	8003760 <HAL_SPI_TransmitReceive_DMA+0x13c>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	105b      	asrs	r3, r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d109      	bne.n	8003780 <HAL_SPI_TransmitReceive_DMA+0x15c>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003772:	b29b      	uxth	r3, r3
 8003774:	3303      	adds	r3, #3
 8003776:	109b      	asrs	r3, r3, #2
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800378c:	d109      	bne.n	80037a2 <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8003794:	b29b      	uxth	r3, r3
 8003796:	3301      	adds	r3, #1
 8003798:	105b      	asrs	r3, r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037ae:	d12f      	bne.n	8003810 <HAL_SPI_TransmitReceive_DMA+0x1ec>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3303      	adds	r3, #3
 80037ba:	109b      	asrs	r3, r3, #2
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80037c4:	e024      	b.n	8003810 <HAL_SPI_TransmitReceive_DMA+0x1ec>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b0f      	cmp	r3, #15
 80037cc:	d820      	bhi.n	8003810 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d109      	bne.n	80037ee <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	105b      	asrs	r3, r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037fa:	d109      	bne.n	8003810 <HAL_SPI_TransmitReceive_DMA+0x1ec>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8003802:	b29b      	uxth	r3, r3
 8003804:	3301      	adds	r3, #1
 8003806:	105b      	asrs	r3, r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003816:	4a5e      	ldr	r2, [pc, #376]	@ (8003990 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8003818:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003820:	4a5c      	ldr	r2, [pc, #368]	@ (8003994 <HAL_SPI_TransmitReceive_DMA+0x370>)
 8003822:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800382a:	4a5b      	ldr	r2, [pc, #364]	@ (8003998 <HAL_SPI_TransmitReceive_DMA+0x374>)
 800382c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003834:	2200      	movs	r2, #0
 8003836:	66da      	str	r2, [r3, #108]	@ 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	2b07      	cmp	r3, #7
 800383e:	d804      	bhi.n	800384a <HAL_SPI_TransmitReceive_DMA+0x226>
  {
    hspi->RxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8003848:	e010      	b.n	800386c <HAL_SPI_TransmitReceive_DMA+0x248>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b0f      	cmp	r3, #15
 8003850:	d806      	bhi.n	8003860 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    hspi->RxXferCount = Size * 2U;
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800385e:	e005      	b.n	800386c <HAL_SPI_TransmitReceive_DMA+0x248>
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02d      	beq.n	80038d8 <HAL_SPI_TransmitReceive_DMA+0x2b4>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003884:	2b00      	cmp	r3, #0
 8003886:	d024      	beq.n	80038d2 <HAL_SPI_TransmitReceive_DMA+0x2ae>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe f8b6 	bl	8001a38 <HAL_DMAEx_List_Start_IT>
 80038cc:	4603      	mov	r3, r0
 80038ce:	75fb      	strb	r3, [r7, #23]
 80038d0:	e014      	b.n	80038fc <HAL_SPI_TransmitReceive_DMA+0x2d8>
    }
    else
    {
      status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
 80038d6:	e011      	b.n	80038fc <HAL_SPI_TransmitReceive_DMA+0x2d8>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3330      	adds	r3, #48	@ 0x30
 80038e4:	4619      	mov	r1, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ea:	461a      	mov	r2, r3
                              hspi->RxXferCount);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80038f2:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80038f4:	f7fd fca4 	bl	8001240 <HAL_DMA_Start_IT>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d011      	beq.n	8003926 <HAL_SPI_TransmitReceive_DMA+0x302>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003908:	f043 0210 	orr.w	r2, r3, #16
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0f3      	b.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x4ea>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003934:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800393c:	2200      	movs	r2, #0
 800393e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003946:	2200      	movs	r2, #0
 8003948:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->hdmatx->XferAbortCallback    = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003950:	2200      	movs	r2, #0
 8003952:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800395a:	4a0f      	ldr	r2, [pc, #60]	@ (8003998 <HAL_SPI_TransmitReceive_DMA+0x374>)
 800395c:	669a      	str	r2, [r3, #104]	@ 0x68

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b07      	cmp	r3, #7
 8003964:	d804      	bhi.n	8003970 <HAL_SPI_TransmitReceive_DMA+0x34c>
  {
    hspi->TxXferCount = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	887a      	ldrh	r2, [r7, #2]
 800396a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800396e:	e01b      	b.n	80039a8 <HAL_SPI_TransmitReceive_DMA+0x384>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b0f      	cmp	r3, #15
 8003976:	d811      	bhi.n	800399c <HAL_SPI_TransmitReceive_DMA+0x378>
  {
    hspi->TxXferCount = Size * 2U;
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8003984:	e010      	b.n	80039a8 <HAL_SPI_TransmitReceive_DMA+0x384>
 8003986:	bf00      	nop
 8003988:	40013000 	.word	0x40013000
 800398c:	40003800 	.word	0x40003800
 8003990:	08003f8b 	.word	0x08003f8b
 8003994:	08003f39 	.word	0x08003f39
 8003998:	08003fa7 	.word	0x08003fa7
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800399c:	887b      	ldrh	r3, [r7, #2]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d02d      	beq.n	8003a14 <HAL_SPI_TransmitReceive_DMA+0x3f0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d024      	beq.n	8003a0e <HAL_SPI_TransmitReceive_DMA+0x3ea>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f103 0220 	add.w	r2, r3, #32
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe f818 	bl	8001a38 <HAL_DMAEx_List_Start_IT>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
 8003a0c:	e014      	b.n	8003a38 <HAL_SPI_TransmitReceive_DMA+0x414>
    }
    else
    {
      status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
 8003a12:	e011      	b.n	8003a38 <HAL_SPI_TransmitReceive_DMA+0x414>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a1e:	4619      	mov	r1, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3320      	adds	r3, #32
 8003a26:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003a2e:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8003a30:	f7fd fc06 	bl	8001240 <HAL_DMA_Start_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d017      	beq.n	8003a6e <HAL_SPI_TransmitReceive_DMA+0x44a>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd fc5b 	bl	8001300 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a50:	f043 0210 	orr.w	r2, r3, #16
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e04f      	b.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x4ea>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a76:	2b81      	cmp	r3, #129	@ 0x81
 8003a78:	d10e      	bne.n	8003a98 <HAL_SPI_TransmitReceive_DMA+0x474>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a82:	2b81      	cmp	r3, #129	@ 0x81
 8003a84:	d108      	bne.n	8003a98 <HAL_SPI_TransmitReceive_DMA+0x474>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	0c1b      	lsrs	r3, r3, #16
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	6053      	str	r3, [r2, #4]
 8003a96:	e009      	b.n	8003aac <HAL_SPI_TransmitReceive_DMA+0x488>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	8879      	ldrh	r1, [r7, #2]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003aba:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8003aca:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10c      	bne.n	8003b04 <HAL_SPI_TransmitReceive_DMA+0x4e0>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003af2:	d107      	bne.n	8003b04 <HAL_SPI_TransmitReceive_DMA+0x4e0>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop

08003b18 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	@ 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8003b30:	6a3a      	ldr	r2, [r7, #32]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8003b4a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3330      	adds	r3, #48	@ 0x30
 8003b52:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <HAL_SPI_IRQHandler+0x68>
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00b      	beq.n	8003b80 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b76:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f9d3 	bl	8003f24 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8003b7e:	e19a      	b.n	8003eb6 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d113      	bne.n	8003bb2 <HAL_SPI_IRQHandler+0x9a>
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
    hspi->RxISR(hspi);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
    handled = 1UL;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10f      	bne.n	8003bdc <HAL_SPI_IRQHandler+0xc4>
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
    handled = 1UL;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <HAL_SPI_IRQHandler+0xee>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
    handled = 1UL;
 8003c02:	2301      	movs	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 814f 	bne.w	8003eac <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 808b 	beq.w	8003d30 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0208 	orr.w	r2, r2, #8
 8003c28:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0210 	orr.w	r2, r2, #16
 8003c38:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c48:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0208 	bic.w	r2, r2, #8
 8003c58:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d13d      	bne.n	8003ce4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8003c68:	e036      	b.n	8003cd8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b0f      	cmp	r3, #15
 8003c70:	d90b      	bls.n	8003c8a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c7c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003c88:	e01d      	b.n	8003cc6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b07      	cmp	r3, #7
 8003c90:	d90b      	bls.n	8003caa <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	8812      	ldrh	r2, [r2, #0]
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003ca8:	e00d      	b.n	8003cc6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cb6:	7812      	ldrb	r2, [r2, #0]
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1c2      	bne.n	8003c6a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f99b 	bl	8004020 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f907 	bl	8003f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d02:	e0d8      	b.n	8003eb6 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	2b05      	cmp	r3, #5
 8003d08:	d103      	bne.n	8003d12 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f8ec 	bl	8003ee8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8003d10:	e0ce      	b.n	8003eb0 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d103      	bne.n	8003d20 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8db 	bl	8003ed4 <HAL_SPI_RxCpltCallback>
    return;
 8003d1e:	e0c7      	b.n	8003eb0 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8003d20:	7cfb      	ldrb	r3, [r7, #19]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	f040 80c4 	bne.w	8003eb0 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f8c9 	bl	8003ec0 <HAL_SPI_TxCpltCallback>
    return;
 8003d2e:	e0bf      	b.n	8003eb0 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80bd 	beq.w	8003eb6 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00f      	beq.n	8003d66 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d4c:	f043 0204 	orr.w	r2, r3, #4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d64:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00f      	beq.n	8003d90 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d8e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00f      	beq.n	8003dba <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003da0:	f043 0208 	orr.w	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699a      	ldr	r2, [r3, #24]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00f      	beq.n	8003de4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0220 	orr.w	r2, r2, #32
 8003de2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d062      	beq.n	8003eb4 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8003e0c:	f023 0303 	bic.w	r3, r3, #3
 8003e10:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e1c:	d13e      	bne.n	8003e9c <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003e2c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ebc <HAL_SPI_IRQHandler+0x3a4>)
 8003e40:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd fad5 	bl	80013f8 <HAL_DMA_Abort_IT>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d022      	beq.n	8003eb4 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e74:	4a11      	ldr	r2, [pc, #68]	@ (8003ebc <HAL_SPI_IRQHandler+0x3a4>)
 8003e76:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd faba 	bl	80013f8 <HAL_DMA_Abort_IT>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d014      	beq.n	8003eb4 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e9a:	e00b      	b.n	8003eb4 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f833 	bl	8003f10 <HAL_SPI_ErrorCallback>
    return;
 8003eaa:	e003      	b.n	8003eb4 <HAL_SPI_IRQHandler+0x39c>
    return;
 8003eac:	bf00      	nop
 8003eae:	e002      	b.n	8003eb6 <HAL_SPI_IRQHandler+0x39e>
    return;
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <HAL_SPI_IRQHandler+0x39e>
    return;
 8003eb4:	bf00      	nop
  }
}
 8003eb6:	3728      	adds	r7, #40	@ 0x28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	08003fed 	.word	0x08003fed

08003ec0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f44:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b07      	cmp	r3, #7
 8003f50:	d017      	beq.n	8003f82 <SPI_DMATransmitReceiveCplt+0x4a>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5a:	2b81      	cmp	r3, #129	@ 0x81
 8003f5c:	d109      	bne.n	8003f72 <SPI_DMATransmitReceiveCplt+0x3a>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 8003f66:	2b81      	cmp	r3, #129	@ 0x81
 8003f68:	d103      	bne.n	8003f72 <SPI_DMATransmitReceiveCplt+0x3a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f7ff ffbc 	bl	8003ee8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8003f70:	e007      	b.n	8003f82 <SPI_DMATransmitReceiveCplt+0x4a>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0208 	orr.w	r2, r2, #8
 8003f80:	611a      	str	r2, [r3, #16]
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f96:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7ff ffaf 	bl	8003efc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fd fba9 	bl	800170c <HAL_DMA_GetError>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d011      	beq.n	8003fe4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f82d 	bl	8004020 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fcc:	f043 0210 	orr.w	r2, r3, #16
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff ff96 	bl	8003f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ff8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff ff7c 	bl	8003f10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0210 	orr.w	r2, r2, #16
 800404e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0201 	bic.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8004082:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b04      	cmp	r3, #4
 800408e:	d014      	beq.n	80040ba <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00f      	beq.n	80040ba <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0220 	orr.w	r2, r2, #32
 80040b8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d014      	beq.n	80040f0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00f      	beq.n	80040f0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d6:	f043 0204 	orr.w	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00f      	beq.n	800411a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004118:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00f      	beq.n	8004144 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800412a:	f043 0208 	orr.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004142:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	3301      	adds	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	3301      	adds	r3, #1
 8004178:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	3307      	adds	r3, #7
 800417e:	08db      	lsrs	r3, r3, #3
 8004180:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	fb02 f303 	mul.w	r3, r2, r3
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d12e      	bne.n	800420a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e028      	b.n	800420c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80041e6:	ea42 0103 	orr.w	r1, r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <memset>:
 8004218:	4402      	add	r2, r0
 800421a:	4603      	mov	r3, r0
 800421c:	4293      	cmp	r3, r2
 800421e:	d100      	bne.n	8004222 <memset+0xa>
 8004220:	4770      	bx	lr
 8004222:	f803 1b01 	strb.w	r1, [r3], #1
 8004226:	e7f9      	b.n	800421c <memset+0x4>

08004228 <__libc_init_array>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	4d0d      	ldr	r5, [pc, #52]	@ (8004260 <__libc_init_array+0x38>)
 800422c:	2600      	movs	r6, #0
 800422e:	4c0d      	ldr	r4, [pc, #52]	@ (8004264 <__libc_init_array+0x3c>)
 8004230:	1b64      	subs	r4, r4, r5
 8004232:	10a4      	asrs	r4, r4, #2
 8004234:	42a6      	cmp	r6, r4
 8004236:	d109      	bne.n	800424c <__libc_init_array+0x24>
 8004238:	4d0b      	ldr	r5, [pc, #44]	@ (8004268 <__libc_init_array+0x40>)
 800423a:	2600      	movs	r6, #0
 800423c:	4c0b      	ldr	r4, [pc, #44]	@ (800426c <__libc_init_array+0x44>)
 800423e:	f000 f817 	bl	8004270 <_init>
 8004242:	1b64      	subs	r4, r4, r5
 8004244:	10a4      	asrs	r4, r4, #2
 8004246:	42a6      	cmp	r6, r4
 8004248:	d105      	bne.n	8004256 <__libc_init_array+0x2e>
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004250:	3601      	adds	r6, #1
 8004252:	4798      	blx	r3
 8004254:	e7ee      	b.n	8004234 <__libc_init_array+0xc>
 8004256:	f855 3b04 	ldr.w	r3, [r5], #4
 800425a:	3601      	adds	r6, #1
 800425c:	4798      	blx	r3
 800425e:	e7f2      	b.n	8004246 <__libc_init_array+0x1e>
 8004260:	08004298 	.word	0x08004298
 8004264:	08004298 	.word	0x08004298
 8004268:	08004298 	.word	0x08004298
 800426c:	0800429c 	.word	0x0800429c

08004270 <_init>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr

0800427c <_fini>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr
