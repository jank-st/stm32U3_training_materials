
Stop3_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d4  08000234  08000234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d0  080067d0  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067d0  080067d0  000077d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d8  080067d8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20030000  080067e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2003005c  0800683c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20030308  0800683c  00008308  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5ee  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003068  00000000  00000000  00023680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  000266e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001016  00000000  00000000  00027bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fdcc  00000000  00000000  00028c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167fe  00000000  00000000  000589d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001306da  00000000  00000000  0006f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019f8aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc4  00000000  00000000  0019f8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  001a58b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	@ (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	f3af 8000 	nop.w
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2003005c 	.word	0x2003005c
 8000250:	00000000 	.word	0x00000000
 8000254:	080066f0 	.word	0x080066f0

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	@ (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	@ (8000270 <frame_dummy+0x18>)
 8000262:	f3af 8000 	nop.w
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20030060 	.word	0x20030060
 8000270:	080066f0 	.word	0x080066f0

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b9b0 	b.w	80005ec <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002aa:	4688      	mov	r8, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	468e      	mov	lr, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d95f      	bls.n	800037a <__udivmoddi4+0xd6>
 80002ba:	fab2 f682 	clz	r6, r2
 80002be:	b14e      	cbz	r6, 80002d4 <__udivmoddi4+0x30>
 80002c0:	f1c6 0320 	rsb	r3, r6, #32
 80002c4:	fa01 fe06 	lsl.w	lr, r1, r6
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	40b4      	lsls	r4, r6
 80002cc:	fa20 f303 	lsr.w	r3, r0, r3
 80002d0:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d8:	fa1f fc87 	uxth.w	ip, r7
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fbbe f1f8 	udiv	r1, lr, r8
 80002e2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x5e>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x5c>
 80002fa:	429a      	cmp	r2, r3
 80002fc:	f200 8154 	bhi.w	80005a8 <__udivmoddi4+0x304>
 8000300:	4601      	mov	r1, r0
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	b2a2      	uxth	r2, r4
 8000306:	fbb3 f0f8 	udiv	r0, r3, r8
 800030a:	fb08 3310 	mls	r3, r8, r0, r3
 800030e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000312:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000316:	4594      	cmp	ip, r2
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x8e>
 800031a:	18ba      	adds	r2, r7, r2
 800031c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000320:	bf2c      	ite	cs
 8000322:	2401      	movcs	r4, #1
 8000324:	2400      	movcc	r4, #0
 8000326:	4594      	cmp	ip, r2
 8000328:	d902      	bls.n	8000330 <__udivmoddi4+0x8c>
 800032a:	2c00      	cmp	r4, #0
 800032c:	f000 813f 	beq.w	80005ae <__udivmoddi4+0x30a>
 8000330:	4618      	mov	r0, r3
 8000332:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000336:	eba2 020c 	sub.w	r2, r2, ip
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa2>
 800033e:	40f2      	lsrs	r2, r6
 8000340:	2300      	movs	r3, #0
 8000342:	e9c5 2300 	strd	r2, r3, [r5]
 8000346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xb6>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb0>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa2>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d14e      	bne.n	8000400 <__udivmoddi4+0x15c>
 8000362:	4543      	cmp	r3, r8
 8000364:	f0c0 8112 	bcc.w	800058c <__udivmoddi4+0x2e8>
 8000368:	4282      	cmp	r2, r0
 800036a:	f240 810f 	bls.w	800058c <__udivmoddi4+0x2e8>
 800036e:	4608      	mov	r0, r1
 8000370:	2d00      	cmp	r5, #0
 8000372:	d0e8      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000374:	e9c5 4e00 	strd	r4, lr, [r5]
 8000378:	e7e5      	b.n	8000346 <__udivmoddi4+0xa2>
 800037a:	2a00      	cmp	r2, #0
 800037c:	f000 80ac 	beq.w	80004d8 <__udivmoddi4+0x234>
 8000380:	fab2 f682 	clz	r6, r2
 8000384:	2e00      	cmp	r6, #0
 8000386:	f040 80bb 	bne.w	8000500 <__udivmoddi4+0x25c>
 800038a:	1a8b      	subs	r3, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b2bc      	uxth	r4, r7
 8000392:	2101      	movs	r1, #1
 8000394:	0c02      	lsrs	r2, r0, #16
 8000396:	b280      	uxth	r0, r0
 8000398:	fbb3 fcfe 	udiv	ip, r3, lr
 800039c:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a4:	fb04 f20c 	mul.w	r2, r4, ip
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d90e      	bls.n	80003ca <__udivmoddi4+0x126>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	429a      	cmp	r2, r3
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80ec 	beq.w	80005a0 <__udivmoddi4+0x2fc>
 80003c8:	46c4      	mov	ip, r8
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d4:	fb04 f408 	mul.w	r4, r4, r8
 80003d8:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003dc:	4294      	cmp	r4, r2
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x154>
 80003e0:	18ba      	adds	r2, r7, r2
 80003e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80003e6:	bf2c      	ite	cs
 80003e8:	2001      	movcs	r0, #1
 80003ea:	2000      	movcc	r0, #0
 80003ec:	4294      	cmp	r4, r2
 80003ee:	d902      	bls.n	80003f6 <__udivmoddi4+0x152>
 80003f0:	2800      	cmp	r0, #0
 80003f2:	f000 80d1 	beq.w	8000598 <__udivmoddi4+0x2f4>
 80003f6:	4698      	mov	r8, r3
 80003f8:	1b12      	subs	r2, r2, r4
 80003fa:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003fe:	e79d      	b.n	800033c <__udivmoddi4+0x98>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa08 f401 	lsl.w	r4, r8, r1
 800040a:	fa00 f901 	lsl.w	r9, r0, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa28 f806 	lsr.w	r8, r8, r6
 8000416:	408a      	lsls	r2, r1
 8000418:	431f      	orrs	r7, r3
 800041a:	fa20 f306 	lsr.w	r3, r0, r6
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	4323      	orrs	r3, r4
 8000422:	fa1f fc87 	uxth.w	ip, r7
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fbb8 fef0 	udiv	lr, r8, r0
 800042c:	fb00 881e 	mls	r8, r0, lr, r8
 8000430:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000434:	fb0e f80c 	mul.w	r8, lr, ip
 8000438:	45a0      	cmp	r8, r4
 800043a:	d90e      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	45a0      	cmp	r8, r4
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 80b8 	beq.w	80005c8 <__udivmoddi4+0x324>
 8000458:	46d6      	mov	lr, sl
 800045a:	eba4 0408 	sub.w	r4, r4, r8
 800045e:	fa1f f883 	uxth.w	r8, r3
 8000462:	fbb4 f3f0 	udiv	r3, r4, r0
 8000466:	fb00 4413 	mls	r4, r0, r3, r4
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000472:	45a4      	cmp	ip, r4
 8000474:	d90e      	bls.n	8000494 <__udivmoddi4+0x1f0>
 8000476:	193c      	adds	r4, r7, r4
 8000478:	f103 30ff 	add.w	r0, r3, #4294967295
 800047c:	bf2c      	ite	cs
 800047e:	f04f 0801 	movcs.w	r8, #1
 8000482:	f04f 0800 	movcc.w	r8, #0
 8000486:	45a4      	cmp	ip, r4
 8000488:	d903      	bls.n	8000492 <__udivmoddi4+0x1ee>
 800048a:	f1b8 0f00 	cmp.w	r8, #0
 800048e:	f000 809f 	beq.w	80005d0 <__udivmoddi4+0x32c>
 8000492:	4603      	mov	r3, r0
 8000494:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000498:	eba4 040c 	sub.w	r4, r4, ip
 800049c:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a0:	4564      	cmp	r4, ip
 80004a2:	4673      	mov	r3, lr
 80004a4:	46e0      	mov	r8, ip
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0x20a>
 80004a8:	d107      	bne.n	80004ba <__udivmoddi4+0x216>
 80004aa:	45f1      	cmp	r9, lr
 80004ac:	d205      	bcs.n	80004ba <__udivmoddi4+0x216>
 80004ae:	ebbe 0302 	subs.w	r3, lr, r2
 80004b2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b6:	3801      	subs	r0, #1
 80004b8:	46e0      	mov	r8, ip
 80004ba:	b15d      	cbz	r5, 80004d4 <__udivmoddi4+0x230>
 80004bc:	ebb9 0203 	subs.w	r2, r9, r3
 80004c0:	eb64 0408 	sbc.w	r4, r4, r8
 80004c4:	fa04 f606 	lsl.w	r6, r4, r6
 80004c8:	fa22 f301 	lsr.w	r3, r2, r1
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	431e      	orrs	r6, r3
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e736      	b.n	8000346 <__udivmoddi4+0xa2>
 80004d8:	fbb1 fcf2 	udiv	ip, r1, r2
 80004dc:	0c01      	lsrs	r1, r0, #16
 80004de:	4614      	mov	r4, r2
 80004e0:	b280      	uxth	r0, r0
 80004e2:	4696      	mov	lr, r2
 80004e4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004e8:	2620      	movs	r6, #32
 80004ea:	4690      	mov	r8, r2
 80004ec:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f0:	4610      	mov	r0, r2
 80004f2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004f6:	eba3 0308 	sub.w	r3, r3, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e74b      	b.n	8000398 <__udivmoddi4+0xf4>
 8000500:	40b7      	lsls	r7, r6
 8000502:	f1c6 0320 	rsb	r3, r6, #32
 8000506:	fa01 f206 	lsl.w	r2, r1, r6
 800050a:	fa21 f803 	lsr.w	r8, r1, r3
 800050e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000512:	fa20 f303 	lsr.w	r3, r0, r3
 8000516:	b2bc      	uxth	r4, r7
 8000518:	40b0      	lsls	r0, r6
 800051a:	4313      	orrs	r3, r2
 800051c:	0c02      	lsrs	r2, r0, #16
 800051e:	0c19      	lsrs	r1, r3, #16
 8000520:	b280      	uxth	r0, r0
 8000522:	fbb8 f9fe 	udiv	r9, r8, lr
 8000526:	fb0e 8819 	mls	r8, lr, r9, r8
 800052a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	4588      	cmp	r8, r1
 8000534:	d951      	bls.n	80005da <__udivmoddi4+0x336>
 8000536:	1879      	adds	r1, r7, r1
 8000538:	f109 3cff 	add.w	ip, r9, #4294967295
 800053c:	bf2c      	ite	cs
 800053e:	f04f 0a01 	movcs.w	sl, #1
 8000542:	f04f 0a00 	movcc.w	sl, #0
 8000546:	4588      	cmp	r8, r1
 8000548:	d902      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800054a:	f1ba 0f00 	cmp.w	sl, #0
 800054e:	d031      	beq.n	80005b4 <__udivmoddi4+0x310>
 8000550:	eba1 0108 	sub.w	r1, r1, r8
 8000554:	fbb1 f9fe 	udiv	r9, r1, lr
 8000558:	fb09 f804 	mul.w	r8, r9, r4
 800055c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000560:	b29b      	uxth	r3, r3
 8000562:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000566:	4543      	cmp	r3, r8
 8000568:	d235      	bcs.n	80005d6 <__udivmoddi4+0x332>
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	f109 31ff 	add.w	r1, r9, #4294967295
 8000570:	bf2c      	ite	cs
 8000572:	f04f 0a01 	movcs.w	sl, #1
 8000576:	f04f 0a00 	movcc.w	sl, #0
 800057a:	4543      	cmp	r3, r8
 800057c:	d2bb      	bcs.n	80004f6 <__udivmoddi4+0x252>
 800057e:	f1ba 0f00 	cmp.w	sl, #0
 8000582:	d1b8      	bne.n	80004f6 <__udivmoddi4+0x252>
 8000584:	f1a9 0102 	sub.w	r1, r9, #2
 8000588:	443b      	add	r3, r7
 800058a:	e7b4      	b.n	80004f6 <__udivmoddi4+0x252>
 800058c:	1a84      	subs	r4, r0, r2
 800058e:	eb68 0203 	sbc.w	r2, r8, r3
 8000592:	2001      	movs	r0, #1
 8000594:	4696      	mov	lr, r2
 8000596:	e6eb      	b.n	8000370 <__udivmoddi4+0xcc>
 8000598:	443a      	add	r2, r7
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	e72b      	b.n	80003f8 <__udivmoddi4+0x154>
 80005a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a4:	443b      	add	r3, r7
 80005a6:	e710      	b.n	80003ca <__udivmoddi4+0x126>
 80005a8:	3902      	subs	r1, #2
 80005aa:	443b      	add	r3, r7
 80005ac:	e6a9      	b.n	8000302 <__udivmoddi4+0x5e>
 80005ae:	443a      	add	r2, r7
 80005b0:	3802      	subs	r0, #2
 80005b2:	e6be      	b.n	8000332 <__udivmoddi4+0x8e>
 80005b4:	eba7 0808 	sub.w	r8, r7, r8
 80005b8:	f1a9 0c02 	sub.w	ip, r9, #2
 80005bc:	4441      	add	r1, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c9      	b.n	800055c <__udivmoddi4+0x2b8>
 80005c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005cc:	443c      	add	r4, r7
 80005ce:	e744      	b.n	800045a <__udivmoddi4+0x1b6>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	443c      	add	r4, r7
 80005d4:	e75e      	b.n	8000494 <__udivmoddi4+0x1f0>
 80005d6:	4649      	mov	r1, r9
 80005d8:	e78d      	b.n	80004f6 <__udivmoddi4+0x252>
 80005da:	eba1 0108 	sub.w	r1, r1, r8
 80005de:	46cc      	mov	ip, r9
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7b8      	b.n	800055c <__udivmoddi4+0x2b8>
 80005ea:	bf00      	nop

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <LL_LPUART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_LPUART_ClearFlag_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_TC(USART_TypeDef *LPUARTx)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2240      	movs	r2, #64	@ 0x40
 80005fc:	621a      	str	r2, [r3, #32]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 800060a:	b480      	push	{r7}
 800060c:	b089      	sub	sp, #36	@ 0x24
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	e853 3f00 	ldrex	r3, [r3]
 800061c:	60bb      	str	r3, [r7, #8]
   return(result);
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000624:	61fb      	str	r3, [r7, #28]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	69fa      	ldr	r2, [r7, #28]
 800062a:	61ba      	str	r2, [r7, #24]
 800062c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800062e:	6979      	ldr	r1, [r7, #20]
 8000630:	69ba      	ldr	r2, [r7, #24]
 8000632:	e841 2300 	strex	r3, r2, [r1]
 8000636:	613b      	str	r3, [r7, #16]
   return(result);
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1e9      	bne.n	8000612 <LL_LPUART_EnableIT_TC+0x8>
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3724      	adds	r7, #36	@ 0x24
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fcde 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f8ea 	bl	800082c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Enable the SMPS regulator to improve power efficiency */
  if(HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000658:	2002      	movs	r0, #2
 800065a:	f002 fbd7 	bl	8002e0c <HAL_PWREx_ConfigSupply>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <main+0x1c>
  {
	  Error_Handler();
 8000664:	f000 faa6 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 fa7a 	bl	8000b60 <MX_GPIO_Init>
  MX_RTC_Init();
 800066c:	f000 fa20 	bl	8000ab0 <MX_RTC_Init>
  MX_ICACHE_Init();
 8000670:	f000 f9ba 	bl	80009e8 <MX_ICACHE_Init>
  MX_ADC1_Init();
 8000674:	f000 f94a 	bl	800090c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000678:	f000 f9ca 	bl	8000a10 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Run ADC calibration*/
    if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800067c:	217f      	movs	r1, #127	@ 0x7f
 800067e:	485b      	ldr	r0, [pc, #364]	@ (80007ec <main+0x1a0>)
 8000680:	f001 fe7e 	bl	8002380 <HAL_ADCEx_Calibration_Start>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <main+0x42>
    {
          Error_Handler();
 800068a:	f000 fa93 	bl	8000bb4 <Error_Handler>
    }

  /*Flash in power down mode during Stop mode - by default after reset */
  HAL_PWREx_DisableFlashFastWakeUp();
 800068e:	f002 fc2d 	bl	8002eec <HAL_PWREx_DisableFlashFastWakeUp>

  /*Reduce SRAM2 retention to 8 kB*/
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM2_PAGE2_STOP_RETENTION); // reduction -600nA
 8000692:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000696:	f002 fc17 	bl	8002ec8 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_SRAM2_PAGE3_STOP_RETENTION);
 800069a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800069e:	f002 fc13 	bl	8002ec8 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_FDCAN_USB_STOP_RETENTION);
 80006a2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80006a6:	f002 fc0f 	bl	8002ec8 <HAL_PWREx_DisableRAMsContentStopRetention>
  HAL_PWREx_DisableRAMsContentStopRetention(PWR_PKA_STOP_RETENTION);
 80006aa:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80006ae:	f002 fc0b 	bl	8002ec8 <HAL_PWREx_DisableRAMsContentStopRetention>

  /*Put full SRAM1 in power down mode*/
  HAL_PWREx_EnableRAMsPowerDown(PWR_SRAM1_POWERDOWN); // reduction - 500nA
 80006b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80006b6:	f002 fbf5 	bl	8002ea4 <HAL_PWREx_EnableRAMsPowerDown>

  /* Configure RTC wake up source for STop3 mode - RM Table 78. PWR wake-up source selection IN*/
  HAL_PWR_EnableWakeUpLine(PWR_WAKEUP_LINE7, PWR_WAKEUP_SELECT_3, PWR_WAKEUP_POLARITY_HIGH);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2103      	movs	r1, #3
 80006be:	2040      	movs	r0, #64	@ 0x40
 80006c0:	f002 fa86 	bl	8002bd0 <HAL_PWR_EnableWakeUpLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80006c4:	4849      	ldr	r0, [pc, #292]	@ (80007ec <main+0x1a0>)
 80006c6:	f001 fa03 	bl	8001ad0 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 1);
 80006ca:	2101      	movs	r1, #1
 80006cc:	4847      	ldr	r0, [pc, #284]	@ (80007ec <main+0x1a0>)
 80006ce:	f001 fab9 	bl	8001c44 <HAL_ADC_PollForConversion>
	  	  adcVref = HAL_ADC_GetValue(&hadc1);
 80006d2:	4846      	ldr	r0, [pc, #280]	@ (80007ec <main+0x1a0>)
 80006d4:	f001 fb8e 	bl	8001df4 <HAL_ADC_GetValue>
 80006d8:	4603      	mov	r3, r0
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b44      	ldr	r3, [pc, #272]	@ (80007f0 <main+0x1a4>)
 80006de:	801a      	strh	r2, [r3, #0]

	  	  /*Helper macro to calculate analog reference voltage (Vref+) unit: mVolt */
	  	  Vref = __LL_ADC_CALC_VREFANALOG_VOLTAGE(adcVref,LL_ADC_RESOLUTION_12B);
 80006e0:	4b44      	ldr	r3, [pc, #272]	@ (80007f4 <main+0x1a8>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80006ea:	fb02 f303 	mul.w	r3, r2, r3
 80006ee:	4a40      	ldr	r2, [pc, #256]	@ (80007f0 <main+0x1a4>)
 80006f0:	8812      	ldrh	r2, [r2, #0]
 80006f2:	b292      	uxth	r2, r2
 80006f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b3f      	ldr	r3, [pc, #252]	@ (80007f8 <main+0x1ac>)
 80006fc:	801a      	strh	r2, [r3, #0]

	  	  HAL_ADC_PollForConversion(&hadc1, 1);
 80006fe:	2101      	movs	r1, #1
 8000700:	483a      	ldr	r0, [pc, #232]	@ (80007ec <main+0x1a0>)
 8000702:	f001 fa9f 	bl	8001c44 <HAL_ADC_PollForConversion>
	  	  adcTemp = HAL_ADC_GetValue(&hadc1);
 8000706:	4839      	ldr	r0, [pc, #228]	@ (80007ec <main+0x1a0>)
 8000708:	f001 fb74 	bl	8001df4 <HAL_ADC_GetValue>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b3a      	ldr	r3, [pc, #232]	@ (80007fc <main+0x1b0>)
 8000712:	801a      	strh	r2, [r3, #0]

	  	  /*Helper macro to calculate Temperature, unit: degree Celsius */
	  	  Temp = __LL_ADC_CALC_TEMPERATURE(Vref, adcTemp, LL_ADC_RESOLUTION_12B);
 8000714:	4b3a      	ldr	r3, [pc, #232]	@ (8000800 <main+0x1b4>)
 8000716:	881a      	ldrh	r2, [r3, #0]
 8000718:	4b3a      	ldr	r3, [pc, #232]	@ (8000804 <main+0x1b8>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d023      	beq.n	8000768 <main+0x11c>
 8000720:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <main+0x1b0>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	b29b      	uxth	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	4b33      	ldr	r3, [pc, #204]	@ (80007f8 <main+0x1ac>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	b29b      	uxth	r3, r3
 800072e:	fb02 f303 	mul.w	r3, r2, r3
 8000732:	461a      	mov	r2, r3
 8000734:	4b34      	ldr	r3, [pc, #208]	@ (8000808 <main+0x1bc>)
 8000736:	fba3 2302 	umull	r2, r3, r3, r2
 800073a:	099b      	lsrs	r3, r3, #6
 800073c:	461a      	mov	r2, r3
 800073e:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <main+0x1b8>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	1ad2      	subs	r2, r2, r3
 8000744:	4613      	mov	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4413      	add	r3, r2
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	461a      	mov	r2, r3
 800074e:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <main+0x1b4>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	4619      	mov	r1, r3
 8000754:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <main+0x1b8>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	1acb      	subs	r3, r1, r3
 800075a:	fb92 f3f3 	sdiv	r3, r2, r3
 800075e:	b29b      	uxth	r3, r3
 8000760:	331e      	adds	r3, #30
 8000762:	b29b      	uxth	r3, r3
 8000764:	b21b      	sxth	r3, r3
 8000766:	e001      	b.n	800076c <main+0x120>
 8000768:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800076c:	4a27      	ldr	r2, [pc, #156]	@ (800080c <main+0x1c0>)
 800076e:	8013      	strh	r3, [r2, #0]
	  	* expected time spend in Run mode ~ 1ms
	  	* */
	  //	HAL_UART_Transmit(&hlpuart1, (uint8_t*)TXbuffer, length, 100);

	  	/* Enable MCU wake-up by LPUART */
	  	HAL_UARTEx_EnableStopMode(&hlpuart1);
 8000770:	4827      	ldr	r0, [pc, #156]	@ (8000810 <main+0x1c4>)
 8000772:	f005 f9d3 	bl	8005b1c <HAL_UARTEx_EnableStopMode>

	  	/* Enable IT for Transfer Complete = 8 bytes in our case*/
	  	LL_LPUART_ClearFlag_TC(LPUART1);
 8000776:	4827      	ldr	r0, [pc, #156]	@ (8000814 <main+0x1c8>)
 8000778:	f7ff ff3a 	bl	80005f0 <LL_LPUART_ClearFlag_TC>
	  	LL_LPUART_EnableIT_TC(LPUART1);
 800077c:	4825      	ldr	r0, [pc, #148]	@ (8000814 <main+0x1c8>)
 800077e:	f7ff ff44 	bl	800060a <LL_LPUART_EnableIT_TC>

	  	/*TX data w/ FIFO */
	  	/* Convert integers to string with comma and carriage return */
	  	length = sprintf(TXbuffer, "%d,%d\r", Vref, Temp);
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <main+0x1ac>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	b29b      	uxth	r3, r3
 8000788:	461a      	mov	r2, r3
 800078a:	4b20      	ldr	r3, [pc, #128]	@ (800080c <main+0x1c0>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	b21b      	sxth	r3, r3
 8000790:	4921      	ldr	r1, [pc, #132]	@ (8000818 <main+0x1cc>)
 8000792:	4822      	ldr	r0, [pc, #136]	@ (800081c <main+0x1d0>)
 8000794:	f005 fafa 	bl	8005d8c <siprintf>
 8000798:	4603      	mov	r3, r0
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <main+0x1d4>)
 800079e:	701a      	strb	r2, [r3, #0]
	  	i = 0;
 80007a0:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <main+0x1d8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	  	while(__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_TXFNF))
 80007a6:	e00c      	b.n	80007c2 <main+0x176>
	  	 	 {
	  	 		 LPUART1->TDR = (uint8_t)TXbuffer[i];
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <main+0x1d8>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <main+0x1d0>)
 80007b0:	5c9a      	ldrb	r2, [r3, r2]
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <main+0x1c8>)
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
	  	 		 i++;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <main+0x1d8>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <main+0x1d8>)
 80007c0:	701a      	strb	r2, [r3, #0]
	  	while(__HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_TXFNF))
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <main+0x1c4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007cc:	2b80      	cmp	r3, #128	@ 0x80
 80007ce:	d0eb      	beq.n	80007a8 <main+0x15c>
	  	 	 }
	  	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERMODE_STOP2, PWR_STOPENTRY_WFI);
 80007d0:	2101      	movs	r1, #1
 80007d2:	2002      	movs	r0, #2
 80007d4:	f002 fa70 	bl	8002cb8 <HAL_PWR_EnterSTOPMode>

	  /*Clear all wakeup source flags*/
	  __HAL_PWR_CLEAR_FLAG(PWR_WAKEUP_ALL_FLAG);
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <main+0x1dc>)
 80007da:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80007de:	649a      	str	r2, [r3, #72]	@ 0x48

	  /* Enter STOP 3 mode */
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERMODE_STOP3, PWR_STOPENTRY_WFI);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2003      	movs	r0, #3
 80007e4:	f002 fa68 	bl	8002cb8 <HAL_PWR_EnterSTOPMode>
	  HAL_ADC_Start(&hadc1);
 80007e8:	e76c      	b.n	80006c4 <main+0x78>
 80007ea:	bf00      	nop
 80007ec:	20030078 	.word	0x20030078
 80007f0:	200301a4 	.word	0x200301a4
 80007f4:	0bfa07a5 	.word	0x0bfa07a5
 80007f8:	200301a8 	.word	0x200301a8
 80007fc:	200301a6 	.word	0x200301a6
 8000800:	0bfa0742 	.word	0x0bfa0742
 8000804:	0bfa0710 	.word	0x0bfa0710
 8000808:	057619f1 	.word	0x057619f1
 800080c:	200301aa 	.word	0x200301aa
 8000810:	200300e0 	.word	0x200300e0
 8000814:	40042400 	.word	0x40042400
 8000818:	08006708 	.word	0x08006708
 800081c:	200301ac 	.word	0x200301ac
 8000820:	200301b4 	.word	0x200301b4
 8000824:	200301b5 	.word	0x200301b5
 8000828:	40030800 	.word	0x40030800

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	@ 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0318 	add.w	r3, r7, #24
 8000836:	2238      	movs	r2, #56	@ 0x38
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fac8 	bl	8005dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
 800084e:	615a      	str	r2, [r3, #20]

  /** Enable Epod Booster
  */
  if (HAL_RCCEx_EpodBoosterClkConfig(RCC_EPODBOOSTER_SOURCE_MSIS, RCC_EPODBOOSTER_DIV1) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	2001      	movs	r0, #1
 8000854:	f003 ffb8 	bl	80047c8 <HAL_RCCEx_EpodBoosterClkConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800085e:	f000 f9a9 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_PWREx_EnableEpodBooster() != HAL_OK)
 8000862:	f002 faa7 	bl	8002db4 <HAL_PWREx_EnableEpodBooster>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x44>
  {
    Error_Handler();
 800086c:	f000 f9a2 	bl	8000bb4 <Error_Handler>
  }

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000870:	2002      	movs	r0, #2
 8000872:	f002 fa51 	bl	8002d18 <HAL_PWREx_ControlVoltageScaling>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800087c:	f000 f99a 	bl	8000bb4 <Error_Handler>
  }

  /** Set Flash latency before increasing MSIS
  */
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_2);
 8000880:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <SystemClock_Config+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f023 030f 	bic.w	r3, r3, #15
 8000888:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <SystemClock_Config+0xd8>)
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	6013      	str	r3, [r2, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000890:	f002 f992 	bl	8002bb8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <SystemClock_Config+0xdc>)
 8000896:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800089a:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <SystemClock_Config+0xdc>)
 800089c:	f023 0318 	bic.w	r3, r3, #24
 80008a0:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSIS;
 80008a4:	2324      	movs	r3, #36	@ 0x24
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008a8:	2381      	movs	r3, #129	@ 0x81
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSISState = RCC_MSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSISSource = RCC_MSI_RC0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSISDiv = RCC_MSI_DIV2;
 80008b4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008b8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fb24 	bl	8002f0c <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ca:	f000 f973 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	231f      	movs	r3, #31
 80008d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSIS;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	2102      	movs	r1, #2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 fe64 	bl	80035b8 <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008f6:	f000 f95d 	bl	8000bb4 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	@ 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000
 8000908:	40030c00 	.word	0x40030c00

0800090c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2220      	movs	r2, #32
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fa59 	bl	8005dd0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800091e:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000920:	4a2e      	ldr	r2, [pc, #184]	@ (80009dc <MX_ADC1_Init+0xd0>)
 8000922:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  hadc1.Init.GainCompensation = 0;
 800092a:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000930:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000932:	2201      	movs	r2, #1
 8000934:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000936:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000938:	2204      	movs	r2, #4
 800093a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800093c:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800093e:	2201      	movs	r2, #1
 8000940:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000942:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000944:	2200      	movs	r2, #0
 8000946:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000948:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800094a:	2202      	movs	r2, #2
 800094c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800094e:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000950:	2200      	movs	r2, #0
 8000952:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000954:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095a:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000962:	2200      	movs	r2, #0
 8000964:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800096e:	2200      	movs	r2, #0
 8000970:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800097a:	4817      	ldr	r0, [pc, #92]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 800097c:	f000 ff5a 	bl	8001834 <HAL_ADC_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000986:	f000 f915 	bl	8000bb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_ADC1_Init+0xd4>)
 800098c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098e:	2306      	movs	r3, #6
 8000990:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_46CYCLES_5;
 8000992:	2305      	movs	r3, #5
 8000994:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000996:	2304      	movs	r3, #4
 8000998:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 80009a4:	f001 fa34 	bl	8001e10 <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009ae:	f000 f901 	bl	8000bb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_ADC1_Init+0xd8>)
 80009b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009b6:	230c      	movs	r3, #12
 80009b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <MX_ADC1_Init+0xcc>)
 80009c0:	f001 fa26 	bl	8001e10 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80009ca:	f000 f8f3 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20030078 	.word	0x20030078
 80009dc:	42028000 	.word	0x42028000
 80009e0:	00400c00 	.word	0x00400c00
 80009e4:	00800c11 	.word	0x00800c11

080009e8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80009ec:	2000      	movs	r0, #0
 80009ee:	f002 f8b3 	bl	8002b58 <HAL_ICACHE_ConfigAssociativityMode>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80009f8:	f000 f8dc 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80009fc:	f002 f8cc 	bl	8002b98 <HAL_ICACHE_Enable>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a06:	f000 f8d5 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a14:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a16:	4a25      	ldr	r2, [pc, #148]	@ (8000aac <MX_LPUART1_UART_Init+0x9c>)
 8000a18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000a1a:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a1c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a40:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a54:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a58:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a5a:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a5c:	f004 f8e4 	bl	8004c28 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000a66:	f000 f8a5 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000a6a:	f04f 4120 	mov.w	r1, #2684354560	@ 0xa0000000
 8000a6e:	480e      	ldr	r0, [pc, #56]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a70:	f005 f8c2 	bl	8005bf8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_LPUART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 f89b 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000a7e:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8000a82:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a84:	f005 f8f6 	bl	8005c74 <HAL_UARTEx_SetRxFifoThreshold>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_LPUART1_UART_Init+0x82>
  {
    Error_Handler();
 8000a8e:	f000 f891 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_LPUART1_UART_Init+0x98>)
 8000a94:	f005 f875 	bl	8005b82 <HAL_UARTEx_EnableFifoMode>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_LPUART1_UART_Init+0x92>
  {
    Error_Handler();
 8000a9e:	f000 f889 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200300e0 	.word	0x200300e0
 8000aac:	40042400 	.word	0x40042400

08000ab0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000aca:	4a24      	ldr	r2, [pc, #144]	@ (8000b5c <MX_RTC_Init+0xac>)
 8000acc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ace:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ad4:	4b20      	ldr	r3, [pc, #128]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000ad6:	227f      	movs	r2, #127	@ 0x7f
 8000ad8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000adc:	22ff      	movs	r2, #255	@ 0xff
 8000ade:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000af4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000af8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b06:	4814      	ldr	r0, [pc, #80]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000b08:	f003 fea2 	bl	8004850 <HAL_RTC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000b12:	f000 f84f 	bl	8000bb4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000b2c:	f004 f84e 	bl	8004bcc <HAL_RTCEx_PrivilegeModeSet>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000b36:	f000 f83d 	bl	8000bb4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_RTC_Init+0xa8>)
 8000b42:	f003 ffb3 	bl	8004aac <HAL_RTCEx_SetWakeUpTimer_IT>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000b4c:	f000 f832 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3720      	adds	r7, #32
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20030174 	.word	0x20030174
 8000b5c:	40007800 	.word	0x40007800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_GPIO_Init+0x50>)
 8000b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b6c:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <MX_GPIO_Init+0x50>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_GPIO_Init+0x50>)
 8000b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <MX_GPIO_Init+0x50>)
 8000b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8a:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <MX_GPIO_Init+0x50>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_GPIO_Init+0x50>)
 8000b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40030c00 	.word	0x40030c00

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <Error_Handler+0x8>

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bcc:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x30>)
 8000bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000be4:	f002 f8d6 	bl	8002d94 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40030c00 	.word	0x40030c00

08000bf4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0a2      	sub	sp, #136	@ 0x88
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2278      	movs	r2, #120	@ 0x78
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 f8e3 	bl	8005dd0 <memset>
  if(hadc->Instance==ADC1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <HAL_ADC_MspInit+0x6c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d120      	bne.n	8000c56 <HAL_ADC_MspInit+0x62>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000c18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInit.AdcDacClockDivider = RCC_ADCDACCLK_DIV2;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c22:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fe85 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_ADC_MspInit+0x44>
    {
      Error_Handler();
 8000c34:	f7ff ffbe 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_ADC_MspInit+0x70>)
 8000c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c3e:	4a09      	ldr	r2, [pc, #36]	@ (8000c64 <HAL_ADC_MspInit+0x70>)
 8000c40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_ADC_MspInit+0x70>)
 8000c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c56:	bf00      	nop
 8000c58:	3788      	adds	r7, #136	@ 0x88
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	42028000 	.word	0x42028000
 8000c64:	40030c00 	.word	0x40030c00

08000c68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0a8      	sub	sp, #160	@ 0xa0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2278      	movs	r2, #120	@ 0x78
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 f8a1 	bl	8005dd0 <memset>
  if(huart->Instance==LPUART1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a29      	ldr	r2, [pc, #164]	@ (8000d38 <HAL_UART_MspInit+0xd0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d14a      	bne.n	8000d2e <HAL_UART_MspInit+0xc6>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c98:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000c9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fe46 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cb2:	f7ff ff7f 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <HAL_UART_MspInit+0xd4>)
 8000cb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d3c <HAL_UART_MspInit+0xd4>)
 8000cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <HAL_UART_MspInit+0xd4>)
 8000cc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_UART_MspInit+0xd4>)
 8000cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cda:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <HAL_UART_MspInit+0xd4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_UART_MspInit+0xd4>)
 8000ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cf2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4809      	ldr	r0, [pc, #36]	@ (8000d40 <HAL_UART_MspInit+0xd8>)
 8000d1a:	f001 fd93 	bl	8002844 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	2042      	movs	r0, #66	@ 0x42
 8000d24:	f001 fc46 	bl	80025b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d28:	2042      	movs	r0, #66	@ 0x42
 8000d2a:	f001 fc5d 	bl	80025e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000d2e:	bf00      	nop
 8000d30:	37a0      	adds	r7, #160	@ 0xa0
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40042400 	.word	0x40042400
 8000d3c:	40030c00 	.word	0x40030c00
 8000d40:	42020000 	.word	0x42020000

08000d44 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0a2      	sub	sp, #136	@ 0x88
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	2278      	movs	r2, #120	@ 0x78
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 f83b 	bl	8005dd0 <memset>
  if(hrtc->Instance==RTC)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <HAL_RTC_MspInit+0x88>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d12f      	bne.n	8000dc4 <HAL_RTC_MspInit+0x80>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fdde 	bl	8003938 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d82:	f7ff ff17 	bl	8000bb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_RTC_MspInit+0x8c>)
 8000d88:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8000d8c:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_RTC_MspInit+0x8c>)
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d92:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <HAL_RTC_MspInit+0x8c>)
 8000d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd0 <HAL_RTC_MspInit+0x8c>)
 8000d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000da2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <HAL_RTC_MspInit+0x8c>)
 8000da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2002      	movs	r0, #2
 8000dba:	f001 fbfb 	bl	80025b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f001 fc12 	bl	80025e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3788      	adds	r7, #136	@ 0x88
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40007800 	.word	0x40007800
 8000dd0:	40030c00 	.word	0x40030c00

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <NMI_Handler+0x4>

08000ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <MemManage_Handler+0x4>

08000dec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2a:	f000 f98f 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <RTC_IRQHandler+0x10>)
 8000e3a:	f003 fea3 	bl	8004b84 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20030174 	.word	0x20030174

08000e48 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <LPUART1_IRQHandler+0x10>)
 8000e4e:	f003 ff3b 	bl	8004cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200300e0 	.word	0x200300e0

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f004 ffa8 	bl	8005de0 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20032000 	.word	0x20032000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	200301b8 	.word	0x200301b8
 8000ec4:	20030308 	.word	0x20030308

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <SystemCoreClockUpdate+0xb8>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d034      	beq.n	8000f68 <SystemCoreClockUpdate+0x7c>
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d836      	bhi.n	8000f70 <SystemCoreClockUpdate+0x84>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <SystemCoreClockUpdate+0x20>
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d02a      	beq.n	8000f60 <SystemCoreClockUpdate+0x74>
 8000f0a:	e031      	b.n	8000f70 <SystemCoreClockUpdate+0x84>
  {
  case 0x00:  /* MSIS used as system clock source */
    /* Read RCC ICSR1 register */
    tmp = RCC->ICSCR1;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <SystemCoreClockUpdate+0xb8>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	603b      	str	r3, [r7, #0]
    /* Check which MSIS Range is selected */
    if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00f      	beq.n	8000f3c <SystemCoreClockUpdate+0x50>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmp & RCC_ICSCR1_MSISSEL) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da03      	bge.n	8000f2a <SystemCoreClockUpdate+0x3e>
      {
        /* MSI RC1 is selected */
        SystemCoreClock = MSIRC1_VALUE;
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f24:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <SystemCoreClockUpdate+0xc0>)
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e002      	b.n	8000f30 <SystemCoreClockUpdate+0x44>
      }
      else
      {
        /* MSI RC0 is selected */
        SystemCoreClock = MSIRC0_VALUE;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f2c:	4a20      	ldr	r2, [pc, #128]	@ (8000fb0 <SystemCoreClockUpdate+0xc4>)
 8000f2e:	601a      	str	r2, [r3, #0]
      }

      /* Get MSIS range */
      msirange = (tmp & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	0f5b      	lsrs	r3, r3, #29
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e009      	b.n	8000f50 <SystemCoreClockUpdate+0x64>
    }
    else
    {
      /* MSI RC1 is selected */
      SystemCoreClock = MSIRC1_VALUE;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fac <SystemCoreClockUpdate+0xc0>)
 8000f40:	601a      	str	r2, [r3, #0]

      /* Get MSIS range */
      msirange = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <SystemCoreClockUpdate+0xb8>)
 8000f44:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8000f48:	0b1b      	lsrs	r3, r3, #12
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	607b      	str	r3, [r7, #4]
    }

    /*MSIS frequency in HZ*/
    SystemCoreClock >>= msirange;
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5a:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f5c:	6013      	str	r3, [r2, #0]
    break;
 8000f5e:	e00c      	b.n	8000f7a <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_0:  /* HSI used as system clock source */
    SystemCoreClock = HSI_VALUE;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f62:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <SystemCoreClockUpdate+0xc8>)
 8000f64:	601a      	str	r2, [r3, #0]
    break;
 8000f66:	e008      	b.n	8000f7a <SystemCoreClockUpdate+0x8e>

  case RCC_CFGR1_SWS_1:  /* HSE used as system clock source */
    SystemCoreClock = HSE_VALUE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <SystemCoreClockUpdate+0xc8>)
 8000f6c:	601a      	str	r2, [r3, #0]
    break;
 8000f6e:	e004      	b.n	8000f7a <SystemCoreClockUpdate+0x8e>

  default:
    SystemCoreClock = 0xFFFFFFFFu;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295
 8000f76:	601a      	str	r2, [r3, #0]
    break;
 8000f78:	bf00      	nop
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <SystemCoreClockUpdate+0xb8>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <SystemCoreClockUpdate+0xcc>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <SystemCoreClockUpdate+0xbc>)
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40030c00 	.word	0x40030c00
 8000fa8:	20030000 	.word	0x20030000
 8000fac:	016e3600 	.word	0x016e3600
 8000fb0:	05b8d800 	.word	0x05b8d800
 8000fb4:	00f42400 	.word	0x00f42400
 8000fb8:	08006710 	.word	0x08006710

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff ff82 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000fc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000fc6:	e003      	b.n	8000fd0 <LoopCopyDataInit>

08000fc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fce:	3104      	adds	r1, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fd0:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fd8:	d3f6      	bcc.n	8000fc8 <CopyDataInit>
	ldr	r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fdc:	e002      	b.n	8000fe4 <LoopFillZerobss>

08000fde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fe0:	f842 3b04 	str.w	r3, [r2], #4

08000fe4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <LoopForever+0x16>)
	cmp	r2, r3
 8000fe6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fe8:	d3f9      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fea:	f004 feff 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fb2d 	bl	800064c <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000ff4:	20032000 	.word	0x20032000
	ldr	r3, =_sidata
 8000ff8:	080067e0 	.word	0x080067e0
	ldr	r0, =_sdata
 8000ffc:	20030000 	.word	0x20030000
	ldr	r3, =_edata
 8001000:	2003005c 	.word	0x2003005c
	ldr	r2, =_sbss
 8001004:	2003005c 	.word	0x2003005c
	ldr	r3, = _ebss
 8001008:	20030308 	.word	0x20030308

0800100c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_IRQHandler>
	...

08001010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <HAL_Init+0x3c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0c      	ldr	r2, [pc, #48]	@ (800104c <HAL_Init+0x3c>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f001 fabc 	bl	800259e <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency */
  SystemCoreClockUpdate();
 8001026:	f7ff ff61 	bl	8000eec <SystemCoreClockUpdate>

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800102a:	2004      	movs	r0, #4
 800102c:	f001 fb0c 	bl	8002648 <HAL_SYSTICK_CLKSourceConfig>

  /* Initialize 1ms tick time base (default SysTick based on MSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001030:	200f      	movs	r0, #15
 8001032:	f000 f80d 	bl	8001050 <HAL_InitTick>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_Init+0x30>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e002      	b.n	8001046 <HAL_Init+0x36>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fdbe 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40022000 	.word	0x40022000

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800105c:	4b36      	ldr	r3, [pc, #216]	@ (8001138 <HAL_InitTick+0xe8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e062      	b.n	800112e <HAL_InitTick+0xde>
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001068:	4b34      	ldr	r3, [pc, #208]	@ (800113c <HAL_InitTick+0xec>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b04      	cmp	r3, #4
 8001072:	d10c      	bne.n	800108e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001074:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <HAL_InitTick+0xf0>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <HAL_InitTick+0xe8>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	e03d      	b.n	800110a <HAL_InitTick+0xba>
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 800108e:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <HAL_InitTick+0xf4>)
 8001090:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001094:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001098:	60bb      	str	r3, [r7, #8]
    switch (systicksel)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010a0:	d025      	beq.n	80010ee <HAL_InitTick+0x9e>
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80010a8:	d82e      	bhi.n	8001108 <HAL_InitTick+0xb8>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <HAL_InitTick+0x6a>
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010b6:	d00d      	beq.n	80010d4 <HAL_InitTick+0x84>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;

      default:
        /* Nothing to do */
        break;
 80010b8:	e026      	b.n	8001108 <HAL_InitTick+0xb8>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <HAL_InitTick+0xf0>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <HAL_InitTick+0xe8>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80010c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80010cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d0:	60fb      	str	r3, [r7, #12]
        break;
 80010d2:	e01a      	b.n	800110a <HAL_InitTick+0xba>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_InitTick+0xe8>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010de:	fbb3 f3f2 	udiv	r3, r3, r2
 80010e2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	60fb      	str	r3, [r7, #12]
        break;
 80010ec:	e00d      	b.n	800110a <HAL_InitTick+0xba>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0xe8>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80010fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001100:	fbb2 f3f3 	udiv	r3, r2, r3
 8001104:	60fb      	str	r3, [r7, #12]
        break;
 8001106:	e000      	b.n	800110a <HAL_InitTick+0xba>
        break;
 8001108:	bf00      	nop
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f001 fa7a 	bl	8002604 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0xca>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e009      	b.n	800112e <HAL_InitTick+0xde>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111a:	2200      	movs	r2, #0
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	f04f 30ff 	mov.w	r0, #4294967295
 8001122:	f001 fa47 	bl	80025b4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001126:	4a08      	ldr	r2, [pc, #32]	@ (8001148 <HAL_InitTick+0xf8>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20030008 	.word	0x20030008
 800113c:	e000e010 	.word	0xe000e010
 8001140:	20030000 	.word	0x20030000
 8001144:	40030c00 	.word	0x40030c00
 8001148:	20030004 	.word	0x20030004

0800114c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20030008 	.word	0x20030008
 8001170:	200301bc 	.word	0x200301bc

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200301bc 	.word	0x200301bc

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20030008 	.word	0x20030008

080011d4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	609a      	str	r2, [r3, #8]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <LL_ADC_SetPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetPathInternalCh(ADC_TypeDef *ADCx, uint32_t PathInternal)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->OR, ADC_OR_VDDCOREEN, (PathInternal >> ADC_PATH_INTERNAL_POS));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001226:	f023 0201 	bic.w	r2, r3, #1
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	0c1b      	lsrs	r3, r3, #16
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_ADC_GetPathInternalCh>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VDDCORE
  */
__STATIC_INLINE uint32_t LL_ADC_GetPathInternalCh(const ADC_TypeDef *ADCx)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->OR, ADC_OR_VDDCOREEN)) << ADC_PATH_INTERNAL_POS;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_SetOffsetChannel>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel)
{
 8001262:	b480      	push	{r7}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_cfg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3350      	adds	r3, #80	@ 0x50
 8001272:	461a      	mov	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_cfg,
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	06db      	lsls	r3, r3, #27
 8001288:	431a      	orrs	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_OFFSET_CH,
             (Channel & ADC_CHANNEL_NUMBER_MASK) << ADC_OFCFGR1_OFFSET_CH_Pos);
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_GetOffsetChannel>:
  *         (3) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3350      	adds	r3, #80	@ 0x50
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

  return (uint32_t) __LL_ADC_DECIMAL_NB_TO_CHANNEL(READ_BIT(*preg, ADC_OFCFGR1_OFFSET_CH) >> ADC_OFCFGR1_OFFSET_CH_Pos);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0edb      	lsrs	r3, r3, #27
 80012b8:	f003 031f 	and.w	r3, r3, #31
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_SetOffsetLevel>:
  *         @arg @ref LL_ADC_OFFSET_4
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x00FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetLevel)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg_offset_val = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3360      	adds	r3, #96	@ 0x60
 80012d8:	461a      	mov	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg_offset_val,
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	0d9b      	lsrs	r3, r3, #22
 80012e8:	059b      	lsls	r3, r3, #22
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET,
             OffsetLevel);
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3350      	adds	r3, #80	@ 0x50
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	431a      	orrs	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	601a      	str	r2, [r3, #0]
             ADC_OFCFGR1_POSOFF,
             OffsetSign);
}
 8001328:	bf00      	nop
 800132a:	371c      	adds	r7, #28
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3350      	adds	r3, #80	@ 0x50
 8001344:	461a      	mov	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_SSAT, OffsetSignedSaturation);
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	431a      	orrs	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	601a      	str	r2, [r3, #0]
}
 800135e:	bf00      	nop
 8001360:	371c      	adds	r7, #28
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SAT_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800136a:	b480      	push	{r7}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFCFGR1, Offsety);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3350      	adds	r3, #80	@ 0x50
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFCFGR1_USAT, OffsetUnsignedSaturation);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	431a      	orrs	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	601a      	str	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d002      	beq.n	80013d2 <LL_ADC_SetGainCompensation+0x32>
 80013cc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013d0:	e000      	b.n	80013d4 <LL_ADC_SetGainCompensation+0x34>
 80013d2:	2200      	movs	r2, #0
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_REG_SetSequencerRanks>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3330      	adds	r3, #48	@ 0x30
 800141c:	461a      	mov	r2, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	4413      	add	r3, r2
 800142a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	211f      	movs	r1, #31
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 011f 	and.w	r1, r3, #31
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	431a      	orrs	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_SetChannelPreselection>:
  *
  *         (1) On this STM32 series, parameter available only on ADC instance: ADC2.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  __IO uint32_t channel_preselectione = READ_REG(ADCx->PCSEL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	60fb      	str	r3, [r7, #12]
  WRITE_REG(ADCx->PCSEL,
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2201      	movs	r2, #1
 800147a:	409a      	lsls	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	61da      	str	r2, [r3, #28]
            channel_preselectione | (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)Channel) & 0x1FUL)));
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_246CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_1499CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  const uint32_t iChannel = __ADC_CHANNEL_INDEX(Channel);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f003 031f 	and.w	r3, r3, #31
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d07f      	beq.n	80015a6 <LL_ADC_SetChannelSamplingTime+0x116>
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d078      	beq.n	80015a2 <LL_ADC_SetChannelSamplingTime+0x112>
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d071      	beq.n	800159e <LL_ADC_SetChannelSamplingTime+0x10e>
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d06a      	beq.n	800159a <LL_ADC_SetChannelSamplingTime+0x10a>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d063      	beq.n	8001596 <LL_ADC_SetChannelSamplingTime+0x106>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d05c      	beq.n	8001592 <LL_ADC_SetChannelSamplingTime+0x102>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d055      	beq.n	800158e <LL_ADC_SetChannelSamplingTime+0xfe>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	d04e      	beq.n	800158a <LL_ADC_SetChannelSamplingTime+0xfa>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d047      	beq.n	8001586 <LL_ADC_SetChannelSamplingTime+0xf6>
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	2b09      	cmp	r3, #9
 80014fe:	d040      	beq.n	8001582 <LL_ADC_SetChannelSamplingTime+0xf2>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	2b0a      	cmp	r3, #10
 8001508:	d039      	beq.n	800157e <LL_ADC_SetChannelSamplingTime+0xee>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	2b0b      	cmp	r3, #11
 8001512:	d032      	beq.n	800157a <LL_ADC_SetChannelSamplingTime+0xea>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d02b      	beq.n	8001576 <LL_ADC_SetChannelSamplingTime+0xe6>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f003 031f 	and.w	r3, r3, #31
 8001524:	2b0d      	cmp	r3, #13
 8001526:	d024      	beq.n	8001572 <LL_ADC_SetChannelSamplingTime+0xe2>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	2b0e      	cmp	r3, #14
 8001530:	d01d      	beq.n	800156e <LL_ADC_SetChannelSamplingTime+0xde>
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d016      	beq.n	800156a <LL_ADC_SetChannelSamplingTime+0xda>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	2b10      	cmp	r3, #16
 8001544:	d00f      	beq.n	8001566 <LL_ADC_SetChannelSamplingTime+0xd6>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	2b11      	cmp	r3, #17
 800154e:	d008      	beq.n	8001562 <LL_ADC_SetChannelSamplingTime+0xd2>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	2b12      	cmp	r3, #18
 8001558:	d101      	bne.n	800155e <LL_ADC_SetChannelSamplingTime+0xce>
 800155a:	2312      	movs	r3, #18
 800155c:	e024      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800155e:	2300      	movs	r3, #0
 8001560:	e022      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 8001562:	2311      	movs	r3, #17
 8001564:	e020      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 8001566:	2310      	movs	r3, #16
 8001568:	e01e      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800156a:	230f      	movs	r3, #15
 800156c:	e01c      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800156e:	230e      	movs	r3, #14
 8001570:	e01a      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 8001572:	230d      	movs	r3, #13
 8001574:	e018      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 8001576:	230c      	movs	r3, #12
 8001578:	e016      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800157a:	230b      	movs	r3, #11
 800157c:	e014      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800157e:	230a      	movs	r3, #10
 8001580:	e012      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 8001582:	2309      	movs	r3, #9
 8001584:	e010      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 8001586:	2308      	movs	r3, #8
 8001588:	e00e      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800158a:	2307      	movs	r3, #7
 800158c:	e00c      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800158e:	2306      	movs	r3, #6
 8001590:	e00a      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_ADC_SetChannelSamplingTime+0x118>
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3314      	adds	r3, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4a15      	ldr	r2, [pc, #84]	@ (8001608 <LL_ADC_SetChannelSamplingTime+0x178>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b8:	0e5b      	lsrs	r3, r3, #25
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	440b      	add	r3, r1
 80015c2:	613b      	str	r3, [r7, #16]
                                             ((ADC_CHANNEL_LUT[iChannel]
                                               & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
  MODIFY_REG(*preg,
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	490f      	ldr	r1, [pc, #60]	@ (8001608 <LL_ADC_SetChannelSamplingTime+0x178>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015d0:	0d1b      	lsrs	r3, r3, #20
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	2107      	movs	r1, #7
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	401a      	ands	r2, r3
 80015e0:	4909      	ldr	r1, [pc, #36]	@ (8001608 <LL_ADC_SetChannelSamplingTime+0x178>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015e8:	0d1b      	lsrs	r3, r3, #20
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((ADC_CHANNEL_LUT[iChannel] & ADC_CHANNEL_SMPx_BITOFFSET_MASK)
                                >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	08006728 	.word	0x08006728

0800160c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 031f 	and.w	r3, r3, #31
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_GetMultiDataFormat>:
  *         @arg @ref LL_ADC_MULTI_REG_DATA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DATA_COMMON_32B
  *         @arg @ref LL_ADC_MULTI_REG_DATA_COMMON_16B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDataFormat(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6093      	str	r3, [r2, #8]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800167c:	d101      	bne.n	8001682 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016cc:	d101      	bne.n	80016d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80016f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001718:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800171c:	f043 0202 	orr.w	r2, r3, #2
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <LL_ADC_IsEnabled+0x18>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <LL_ADC_IsEnabled+0x1a>
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d101      	bne.n	800176e <LL_ADC_IsDisableOngoing+0x18>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <LL_ADC_IsDisableOngoing+0x1a>
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800178c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001790:	f043 0204 	orr.w	r2, r3, #4
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d101      	bne.n	80017bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d101      	bne.n	80017e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_IsActiveFlag_LDORDY>:
  * @rmtoll ISR      LDORDY          LL_ADC_IsActiveFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_LDORDY(const ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_LDORDY) == (ADC_ISR_LDORDY)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001804:	d101      	bne.n	800180a <LL_ADC_IsActiveFlag_LDORDY+0x1a>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <LL_ADC_IsActiveFlag_LDORDY+0x1c>
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_ClearFlag_LDORDY>:
  * @rmtoll ISR      LDORDY         LL_ADC_ClearFlag_LDORDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_LDORDY(ADC_TypeDef *ADCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_LDORDY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_ADC_Init>:
  *         without disabling the other ADCs sharing the same ADC common instance.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e139      	b.n	8001abe <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_ADC_Init+0x38>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff f9cb 	bl	8000bf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fef9 	bl	8001668 <LL_ADC_IsDeepPowerDownEnabled>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_ADC_Init+0x52>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fedf 	bl	8001644 <LL_ADC_DisableDeepPowerDown>

    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff14 	bl	80016b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d132      	bne.n	80018fc <HAL_ADC_Init+0xc8>
  {
    /* Clear flag ADC internal voltage regulator ready */
    LL_ADC_ClearFlag_LDORDY(hadc->Instance);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffbc 	bl	8001818 <LL_ADC_ClearFlag_LDORDY>

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fef3 	bl	8001690 <LL_ADC_EnableInternalRegulator>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80018aa:	f7ff fc63 	bl	8001174 <HAL_GetTick>
 80018ae:	6178      	str	r0, [r7, #20]

    /* Delay for ADC stabilization time */
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 80018b0:	e01c      	b.n	80018ec <HAL_ADC_Init+0xb8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_LDO_RDY_TIMEOUT)
 80018b2:	f7ff fc5f 	bl	8001174 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d915      	bls.n	80018ec <HAL_ADC_Init+0xb8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff93 	bl	80017f0 <LL_ADC_IsActiveFlag_LDORDY>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10d      	bne.n	80018ec <HAL_ADC_Init+0xb8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d4:	f043 0210 	orr.w	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0e8      	b.n	8001abe <HAL_ADC_Init+0x28a>
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff7d 	bl	80017f0 <LL_ADC_IsActiveFlag_LDORDY>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0da      	beq.n	80018b2 <HAL_ADC_Init+0x7e>

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff4f 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 8001906:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 80cb 	bne.w	8001aac <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f040 80c7 	bne.w	8001aac <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001922:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7d5b      	ldrb	r3, [r3, #21]
 8001932:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001938:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
                hadc->Init.Overrun                                                    |
 800193e:	431a      	orrs	r2, r3
                ADC_CFGR1_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7f1b      	ldrb	r3, [r3, #28]
 8001944:	041b      	lsls	r3, r3, #16
    tmpCFGR1 = (ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7f1b      	ldrb	r3, [r3, #28]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d106      	bne.n	8001960 <HAL_ADC_Init+0x12c>
    {
      tmpCFGR1 |= ADC_CFGR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	3b01      	subs	r3, #1
 8001958:	045b      	lsls	r3, r3, #17
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d009      	beq.n	800197c <HAL_ADC_Init+0x148>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	4313      	orrs	r3, r2
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL)
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_1, tmpCFGR1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	4b51      	ldr	r3, [pc, #324]	@ (8001ac8 <HAL_ADC_Init+0x294>)
 8001984:	4013      	ands	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	430b      	orrs	r3, r1
 800198e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f423 4120 	bic.w	r1, r3, #40960	@ 0xa000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fefa 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 80019b0:	60f8      	str	r0, [r7, #12]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff07 	bl	80017ca <LL_ADC_INJ_IsConversionOngoing>
 80019bc:	60b8      	str	r0, [r7, #8]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d151      	bne.n	8001a68 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d14e      	bne.n	8001a68 <HAL_ADC_Init+0x234>
       )
    {
      tmpCFGR1 = (
                   ADC_CFGR1_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7d1b      	ldrb	r3, [r3, #20]
 80019ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR1 = (
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_FIELDS_2, tmpCFGR1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	60d3      	str	r3, [r2, #12]

      LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7ff fcd0 	bl	80013a0 <LL_ADC_SetGainCompensation>

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d11b      	bne.n	8001a42 <HAL_ADC_Init+0x20e>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	4b2d      	ldr	r3, [pc, #180]	@ (8001acc <HAL_ADC_Init+0x298>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a1e:	3a01      	subs	r2, #1
 8001a20:	0411      	lsls	r1, r2, #16
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a26:	4311      	orrs	r1, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a32:	430a      	orrs	r2, r1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	e007      	b.n	8001a52 <HAL_ADC_Init+0x21e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0201 	bic.w	r2, r2, #1
 8001a50:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d10c      	bne.n	8001a8a <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f023 010f 	bic.w	r1, r3, #15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	1e5a      	subs	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a88:	e007      	b.n	8001a9a <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 020f 	bic.w	r2, r2, #15
 8001a98:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aaa:	e007      	b.n	8001abc <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8001abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	fff0c013 	.word	0xfff0c013
 8001acc:	fc00f81e 	.word	0xfc00f81e

08001ad0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ad8:	4857      	ldr	r0, [pc, #348]	@ (8001c38 <HAL_ADC_Start+0x168>)
 8001ada:	f7ff fd97 	bl	800160c <LL_ADC_GetMultimode>
 8001ade:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fe5d 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f040 809c 	bne.w	8001c2a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_Start+0x30>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e097      	b.n	8001c30 <HAL_ADC_Start+0x160>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fb2d 	bl	8002168 <ADC_Enable>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f040 8083 	bne.w	8001c20 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a42      	ldr	r2, [pc, #264]	@ (8001c3c <HAL_ADC_Start+0x16c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d002      	beq.n	8001b3e <HAL_ADC_Start+0x6e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e000      	b.n	8001b40 <HAL_ADC_Start+0x70>
 8001b3e:	4b40      	ldr	r3, [pc, #256]	@ (8001c40 <HAL_ADC_Start+0x170>)
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b66:	d106      	bne.n	8001b76 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6c:	f023 0206 	bic.w	r2, r3, #6
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	221c      	movs	r2, #28
 8001b82:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2a      	ldr	r2, [pc, #168]	@ (8001c3c <HAL_ADC_Start+0x16c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d002      	beq.n	8001b9c <HAL_ADC_Start+0xcc>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e000      	b.n	8001b9e <HAL_ADC_Start+0xce>
 8001b9c:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <HAL_ADC_Start+0x170>)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d008      	beq.n	8001bb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d002      	beq.n	8001bb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	d114      	bne.n	8001be2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d007      	beq.n	8001bd6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fdce 	bl	800177c <LL_ADC_REG_StartConversion>
 8001be0:	e025      	b.n	8001c2e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <HAL_ADC_Start+0x16c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d002      	beq.n	8001bfe <HAL_ADC_Start+0x12e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	e000      	b.n	8001c00 <HAL_ADC_Start+0x130>
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <HAL_ADC_Start+0x170>)
 8001c00:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00f      	beq.n	8001c2e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c1e:	e006      	b.n	8001c2e <HAL_ADC_Start+0x15e>
      LL_ADC_REG_StartConversion(hadc->Instance);
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001c28:	e001      	b.n	8001c2e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	42028300 	.word	0x42028300
 8001c3c:	42028100 	.word	0x42028100
 8001c40:	42028000 	.word	0x42028000

08001c44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c4e:	4866      	ldr	r0, [pc, #408]	@ (8001de8 <HAL_ADC_PollForConversion+0x1a4>)
 8001c50:	f7ff fcdc 	bl	800160c <LL_ADC_GetMultimode>
 8001c54:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d102      	bne.n	8001c64 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c5e:	2308      	movs	r3, #8
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e02a      	b.n	8001cba <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d002      	beq.n	8001c76 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b09      	cmp	r3, #9
 8001c74:	d111      	bne.n	8001c9a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c88:	f043 0220 	orr.w	r2, r3, #32
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0a4      	b.n	8001dde <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c94:	2304      	movs	r3, #4
 8001c96:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 8001c98:	e00f      	b.n	8001cba <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDataFormat(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DATA_EACH_ADC)
 8001c9a:	4853      	ldr	r0, [pc, #332]	@ (8001de8 <HAL_ADC_PollForConversion+0x1a4>)
 8001c9c:	f7ff fcc4 	bl	8001628 <LL_ADC_GetMultiDataFormat>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f043 0220 	orr.w	r2, r3, #32
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e093      	b.n	8001dde <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cba:	f7ff fa5b 	bl	8001174 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cc0:	e021      	b.n	8001d06 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d01d      	beq.n	8001d06 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001cca:	f7ff fa53 	bl	8001174 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d302      	bcc.n	8001ce0 <HAL_ADC_PollForConversion+0x9c>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d112      	bne.n	8001d06 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	f043 0204 	orr.w	r2, r3, #4
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e06b      	b.n	8001dde <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0d6      	beq.n	8001cc2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fb5e 	bl	80013e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01c      	beq.n	8001d6a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7d5b      	ldrb	r3, [r3, #21]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d118      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d111      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dec <HAL_ADC_PollForConversion+0x1a8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d002      	beq.n	8001d7a <HAL_ADC_PollForConversion+0x136>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	e000      	b.n	8001d7c <HAL_ADC_PollForConversion+0x138>
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <HAL_ADC_PollForConversion+0x1ac>)
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d008      	beq.n	8001d96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d002      	beq.n	8001d96 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b09      	cmp	r3, #9
 8001d94:	d104      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve ADC CFGR1 register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	e00c      	b.n	8001dba <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <HAL_ADC_PollForConversion+0x1a8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d002      	beq.n	8001db0 <HAL_ADC_PollForConversion+0x16c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	e000      	b.n	8001db2 <HAL_ADC_PollForConversion+0x16e>
 8001db0:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_ADC_PollForConversion+0x1ac>)
 8001db2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR1);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
  /* Retrieve ADC CFGR1 register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d104      	bne.n	8001dca <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e008      	b.n	8001ddc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d103      	bne.n	8001ddc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	220c      	movs	r2, #12
 8001dda:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	42028300 	.word	0x42028300
 8001dec:	42028100 	.word	0x42028100
 8001df0:	42028000 	.word	0x42028000

08001df4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_common_path_internal_channel;
  uint32_t tmp_config_path_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_OFFSET(pConfig->Offset));

  assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x22>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e183      	b.n	800213a <HAL_ADC_ConfigChannel+0x32a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fcb0 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 8162 	bne.w	8002110 <HAL_ADC_ConfigChannel+0x300>
  {
    /* ADC channels preselection */
    LL_ADC_SetChannelPreselection(hadc->Instance, pConfig->Channel);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7ff fb03 	bl	8001462 <LL_ADC_SetChannelPreselection>

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f7ff facf 	bl	800140c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fc96 	bl	80017a4 <LL_ADC_REG_IsConversionOngoing>
 8001e78:	6238      	str	r0, [r7, #32]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fca3 	bl	80017ca <LL_ADC_INJ_IsConversionOngoing>
 8001e84:	61f8      	str	r0, [r7, #28]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f040 80aa 	bne.w	8001fe2 <HAL_ADC_ConfigChannel+0x1d2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 80a6 	bne.w	8001fe2 <HAL_ADC_ConfigChannel+0x1d2>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f7ff faf4 	bl	8001490 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	61bb      	str	r3, [r7, #24]

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d038      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x12a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffsetChannel(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6919      	ldr	r1, [r3, #16]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f7ff f9c4 	bl	8001262 <LL_ADC_SetOffsetChannel>
        LL_ADC_SetOffsetLevel(hadc->Instance, pConfig->OffsetNumber, tmpOffsetShifted);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7ff f9ef 	bl	80012c8 <LL_ADC_SetOffsetLevel>
        /* Signed and unsigned saturation cannot be set at the same time */
        assert_param(!((pConfig->OffsetSignedSaturation == ENABLE) && (pConfig->OffsetSaturation == ENABLE)));


        /* Set ADC offset sign */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7ff fa01 	bl	80012fe <LL_ADC_SetOffsetSign>
        /* Set ADC offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6919      	ldr	r1, [r3, #16]
                                         (pConfig->OffsetSignedSaturation == ENABLE) \
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	7e1b      	ldrb	r3, [r3, #24]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,      \
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d102      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x102>
 8001f0c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f10:	e000      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x104>
 8001f12:	2300      	movs	r3, #0
 8001f14:	461a      	mov	r2, r3
 8001f16:	f7ff fa0d 	bl	8001334 <LL_ADC_SetOffsetSignedSaturation>
                                         ? LL_ADC_OFFSET_SIGNED_SAT_ENABLE           \
                                         : LL_ADC_OFFSET_SIGNED_SAT_DISABLE);
        /* Set ADC offset unsigned saturation */
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6919      	ldr	r1, [r3, #16]
                                           (pConfig->OffsetSaturation == ENABLE)     \
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	7e5b      	ldrb	r3, [r3, #25]
        LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,    \
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x120>
 8001f2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f2e:	e000      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x122>
 8001f30:	2300      	movs	r3, #0
 8001f32:	461a      	mov	r2, r3
 8001f34:	f7ff fa19 	bl	800136a <LL_ADC_SetOffsetUnsignedSaturation>
 8001f38:	e053      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x1d2>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted.
           If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f9aa 	bl	800129a <LL_ADC_GetOffsetChannel>
 8001f46:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4053      	eors	r3, r2
 8001f4e:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x154>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_1, 0UL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f9b2 	bl	80012c8 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f995 	bl	800129a <LL_ADC_GetOffsetChannel>
 8001f70:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4053      	eors	r3, r2
 8001f78:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d106      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x17e>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_2, 0UL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f99d 	bl	80012c8 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2102      	movs	r1, #2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff f980 	bl	800129a <LL_ADC_GetOffsetChannel>
 8001f9a:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4053      	eors	r3, r2
 8001fa2:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_3, 0UL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f988 	bl	80012c8 <LL_ADC_SetOffsetLevel>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2103      	movs	r1, #3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f96b 	bl	800129a <LL_ADC_GetOffsetChannel>
 8001fc4:	4602      	mov	r2, r0
            == __HAL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4053      	eors	r3, r2
 8001fcc:	f003 031f 	and.w	r3, r3, #31
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d106      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x1d2>
        {
          LL_ADC_SetOffsetLevel(hadc->Instance, LL_ADC_OFFSET_4, 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2103      	movs	r1, #3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff f973 	bl	80012c8 <LL_ADC_SetOffsetLevel>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 809f 	beq.w	800212e <HAL_ADC_ConfigChannel+0x31e>
    {
      tmp_config_common_path_internal_channel =
        LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ff0:	4854      	ldr	r0, [pc, #336]	@ (8002144 <HAL_ADC_ConfigChannel+0x334>)
 8001ff2:	f7ff f902 	bl	80011fa <LL_ADC_GetCommonPathInternalCh>
 8001ff6:	6178      	str	r0, [r7, #20]
      tmp_config_path_internal_channel = LL_ADC_GetPathInternalCh(hadc->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff f920 	bl	8001242 <LL_ADC_GetPathInternalCh>
 8002002:	6138      	str	r0, [r7, #16]
      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4f      	ldr	r2, [pc, #316]	@ (8002148 <HAL_ADC_ConfigChannel+0x338>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d116      	bne.n	800203c <HAL_ADC_ConfigChannel+0x22c>
          && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d111      	bne.n	800203c <HAL_ADC_ConfigChannel+0x22c>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4b      	ldr	r2, [pc, #300]	@ (800214c <HAL_ADC_ConfigChannel+0x33c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_ADC_ConfigChannel+0x21c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4a      	ldr	r2, [pc, #296]	@ (8002150 <HAL_ADC_ConfigChannel+0x340>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d17b      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x314>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002032:	4619      	mov	r1, r3
 8002034:	4843      	ldr	r0, [pc, #268]	@ (8002144 <HAL_ADC_ConfigChannel+0x334>)
 8002036:	f7ff f8cd 	bl	80011d4 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 800203a:	e073      	b.n	8002124 <HAL_ADC_ConfigChannel+0x314>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_common_path_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a44      	ldr	r2, [pc, #272]	@ (8002154 <HAL_ADC_ConfigChannel+0x344>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d12a      	bne.n	800209c <HAL_ADC_ConfigChannel+0x28c>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d125      	bne.n	800209c <HAL_ADC_ConfigChannel+0x28c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3d      	ldr	r2, [pc, #244]	@ (800214c <HAL_ADC_ConfigChannel+0x33c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x254>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a3c      	ldr	r2, [pc, #240]	@ (8002150 <HAL_ADC_ConfigChannel+0x340>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d161      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x318>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800206a:	4619      	mov	r1, r3
 800206c:	4835      	ldr	r0, [pc, #212]	@ (8002144 <HAL_ADC_ConfigChannel+0x334>)
 800206e:	f7ff f8b1 	bl	80011d4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002072:	4b39      	ldr	r3, [pc, #228]	@ (8002158 <HAL_ADC_ConfigChannel+0x348>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	4a38      	ldr	r2, [pc, #224]	@ (800215c <HAL_ADC_ConfigChannel+0x34c>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800208c:	e002      	b.n	8002094 <HAL_ADC_ConfigChannel+0x284>
          {
            wait_loop_index--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3b01      	subs	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_ConfigChannel+0x27e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209a:	e045      	b.n	8002128 <HAL_ADC_ConfigChannel+0x318>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002160 <HAL_ADC_ConfigChannel+0x350>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d116      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x2c4>
               && ((tmp_config_common_path_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d111      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x2c4>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a25      	ldr	r2, [pc, #148]	@ (800214c <HAL_ADC_ConfigChannel+0x33c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0x2b4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a24      	ldr	r2, [pc, #144]	@ (8002150 <HAL_ADC_ConfigChannel+0x340>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d133      	bne.n	800212c <HAL_ADC_ConfigChannel+0x31c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	4619      	mov	r1, r3
 80020cc:	481d      	ldr	r0, [pc, #116]	@ (8002144 <HAL_ADC_ConfigChannel+0x334>)
 80020ce:	f7ff f881 	bl	80011d4 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020d2:	e02b      	b.n	800212c <HAL_ADC_ConfigChannel+0x31c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_common_path_internal_channel);
        }
      }
      else if (((pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a22      	ldr	r2, [pc, #136]	@ (8002164 <HAL_ADC_ConfigChannel+0x354>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d127      	bne.n	800212e <HAL_ADC_ConfigChannel+0x31e>
                && ((tmp_config_path_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL)))
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d122      	bne.n	800212e <HAL_ADC_ConfigChannel+0x31e>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a17      	ldr	r2, [pc, #92]	@ (800214c <HAL_ADC_ConfigChannel+0x33c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_ADC_ConfigChannel+0x2ec>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a16      	ldr	r2, [pc, #88]	@ (8002150 <HAL_ADC_ConfigChannel+0x340>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d118      	bne.n	800212e <HAL_ADC_ConfigChannel+0x31e>
        {
          LL_ADC_SetPathInternalCh(hadc->Instance, LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_path_internal_channel);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f7ff f884 	bl	8001216 <LL_ADC_SetPathInternalCh>
 800210e:	e00e      	b.n	800212e <HAL_ADC_ConfigChannel+0x31e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002122:	e004      	b.n	800212e <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002124:	bf00      	nop
 8002126:	e002      	b.n	800212e <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002128:	bf00      	nop
 800212a:	e000      	b.n	800212e <HAL_ADC_ConfigChannel+0x31e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800212c:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8002136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800213a:	4618      	mov	r0, r3
 800213c:	3728      	adds	r7, #40	@ 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	42028300 	.word	0x42028300
 8002148:	00400c00 	.word	0x00400c00
 800214c:	42028000 	.word	0x42028000
 8002150:	42028100 	.word	0x42028100
 8002154:	00800c11 	.word	0x00800c11
 8002158:	20030000 	.word	0x20030000
 800215c:	053e2d63 	.word	0x053e2d63
 8002160:	01000c10 	.word	0x01000c10
 8002164:	00010c12 	.word	0x00010c12

08002168 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fadb 	bl	8001730 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d169      	bne.n	8002254 <ADC_Enable+0xec>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <ADC_Enable+0xf8>)
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e055      	b.n	8002256 <ADC_Enable+0xee>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fa96 	bl	80016e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021b4:	482b      	ldr	r0, [pc, #172]	@ (8002264 <ADC_Enable+0xfc>)
 80021b6:	f7ff f820 	bl	80011fa <LL_ADC_GetCommonPathInternalCh>
 80021ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <ADC_Enable+0x84>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <ADC_Enable+0x100>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	4a28      	ldr	r2, [pc, #160]	@ (800226c <ADC_Enable+0x104>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80021de:	e002      	b.n	80021e6 <ADC_Enable+0x7e>
      {
        wait_loop_index--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <ADC_Enable+0x78>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021ec:	f7fe ffc2 	bl	8001174 <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f2:	e028      	b.n	8002246 <ADC_Enable+0xde>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fa99 	bl	8001730 <LL_ADC_IsEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <ADC_Enable+0xa6>
      {
        LL_ADC_Enable(hadc->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fa69 	bl	80016e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800220e:	f7fe ffb1 	bl	8001174 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d914      	bls.n	8002246 <ADC_Enable+0xde>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d00d      	beq.n	8002246 <ADC_Enable+0xde>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f043 0210 	orr.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e007      	b.n	8002256 <ADC_Enable+0xee>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d1cf      	bne.n	80021f4 <ADC_Enable+0x8c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	8000003f 	.word	0x8000003f
 8002264:	42028300 	.word	0x42028300
 8002268:	20030000 	.word	0x20030000
 800226c:	053e2d63 	.word	0x053e2d63

08002270 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fa6a 	bl	8001756 <LL_ADC_IsDisableOngoing>
 8002282:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fa51 	bl	8001730 <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d047      	beq.n	8002324 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d144      	bne.n	8002324 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030d 	and.w	r3, r3, #13
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10c      	bne.n	80022c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fa2b 	bl	8001708 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2203      	movs	r2, #3
 80022b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ba:	f7fe ff5b 	bl	8001174 <HAL_GetTick>
 80022be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022c0:	e029      	b.n	8002316 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e023      	b.n	8002326 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022de:	f7fe ff49 	bl	8001174 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d914      	bls.n	8002316 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00d      	beq.n	8002316 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e007      	b.n	8002326 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1dc      	bne.n	80022de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <LL_ADC_StartCalibration>:
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800233e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002342:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_IsCalibrationOnGoing>:
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800236a:	d101      	bne.n	8002370 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_ADCEx_Calibration_Start>:
  *         This parameter can be one of the following values:
  *           @arg @ref ADC_SINGLE_ENDED      Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  UNUSED(SingleDiff);
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_ADCEx_Calibration_Start+0x1c>
 8002398:	2302      	movs	r3, #2
 800239a:	e04c      	b.n	8002436 <HAL_ADCEx_Calibration_Start+0xb6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff63 	bl	8002270 <ADC_Disable>
 80023aa:	4603      	mov	r3, r0
 80023ac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d135      	bne.n	8002420 <HAL_ADCEx_Calibration_Start+0xa0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023bc:	f023 0302 	bic.w	r3, r3, #2
 80023c0:	f043 0202 	orr.w	r2, r3, #2
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    /* Start ADC calibration */
    LL_ADC_StartCalibration(hadc->Instance);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ffae 	bl	800232e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023d2:	e014      	b.n	80023fe <HAL_ADCEx_Calibration_Start+0x7e>
    {

      wait_loop_index++;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3301      	adds	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4a18      	ldr	r2, [pc, #96]	@ (8002440 <HAL_ADCEx_Calibration_Start+0xc0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d90d      	bls.n	80023fe <HAL_ADCEx_Calibration_Start+0x7e>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	f023 0312 	bic.w	r3, r3, #18
 80023ea:	f043 0210 	orr.w	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e01b      	b.n	8002436 <HAL_ADCEx_Calibration_Start+0xb6>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ffa7 	bl	8002356 <LL_ADC_IsCalibrationOnGoing>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e2      	bne.n	80023d4 <HAL_ADCEx_Calibration_Start+0x54>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	659a      	str	r2, [r3, #88]	@ 0x58
 800241e:	e005      	b.n	800242c <HAL_ADCEx_Calibration_Start+0xac>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	f043 0210 	orr.w	r2, r3, #16
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	0005e8ff 	.word	0x0005e8ff

08002444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800246c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002476:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002490:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0307 	and.w	r3, r3, #7
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db0b      	blt.n	80024d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	4907      	ldr	r1, [pc, #28]	@ (80024e0 <__NVIC_EnableIRQ+0x38>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2001      	movs	r0, #1
 80024ca:	fa00 f202 	lsl.w	r2, r0, r2
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e100 	.word	0xe000e100

080024e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db0a      	blt.n	800250e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	490c      	ldr	r1, [pc, #48]	@ (8002530 <__NVIC_SetPriority+0x4c>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	440b      	add	r3, r1
 8002508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800250c:	e00a      	b.n	8002524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4908      	ldr	r1, [pc, #32]	@ (8002534 <__NVIC_SetPriority+0x50>)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3b04      	subs	r3, #4
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	440b      	add	r3, r1
 8002522:	761a      	strb	r2, [r3, #24]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f1c3 0307 	rsb	r3, r3, #7
 8002552:	2b04      	cmp	r3, #4
 8002554:	bf28      	it	cs
 8002556:	2304      	movcs	r3, #4
 8002558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3304      	adds	r3, #4
 800255e:	2b06      	cmp	r3, #6
 8002560:	d902      	bls.n	8002568 <NVIC_EncodePriority+0x30>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3b03      	subs	r3, #3
 8002566:	e000      	b.n	800256a <NVIC_EncodePriority+0x32>
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	f04f 32ff 	mov.w	r2, #4294967295
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002580:	f04f 31ff 	mov.w	r1, #4294967295
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43d9      	mvns	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	4313      	orrs	r3, r2
         );
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	@ 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ff4c 	bl	8002444 <__NVIC_SetPriorityGrouping>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c2:	f7ff ff63 	bl	800248c <__NVIC_GetPriorityGrouping>
 80025c6:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	6978      	ldr	r0, [r7, #20]
 80025ce:	f7ff ffb3 	bl	8002538 <NVIC_EncodePriority>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff82 	bl	80024e4 <__NVIC_SetPriority>
}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32u3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff56 	bl	80024a8 <__NVIC_EnableIRQ>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002614:	d301      	bcc.n	800261a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002616:	2301      	movs	r3, #1
 8002618:	e00d      	b.n	8002636 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800261a:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <HAL_SYSTICK_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HAL_SYSTICK_Config+0x40>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002628:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_SYSTICK_Config+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a05      	ldr	r2, [pc, #20]	@ (8002644 <HAL_SYSTICK_Config+0x40>)
 800262e:	f043 0303 	orr.w	r3, r3, #3
 8002632:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8 AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d844      	bhi.n	80026e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002656:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	0800267f 	.word	0x0800267f
 8002660:	0800269d 	.word	0x0800269d
 8002664:	080026bf 	.word	0x080026bf
 8002668:	080026e1 	.word	0x080026e1
 800266c:	08002671 	.word	0x08002671
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002670:	4b1f      	ldr	r3, [pc, #124]	@ (80026f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1e      	ldr	r2, [pc, #120]	@ (80026f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6013      	str	r3, [r2, #0]
      break;
 800267c:	e031      	b.n	80026e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800267e:	4b1c      	ldr	r3, [pc, #112]	@ (80026f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800268a:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800268c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002690:	4a18      	ldr	r2, [pc, #96]	@ (80026f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002692:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002696:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 800269a:	e022      	b.n	80026e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800269c:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a13      	ldr	r2, [pc, #76]	@ (80026f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80026a2:	f023 0304 	bic.w	r3, r3, #4
 80026a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80026a8:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80026aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80026ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80026b2:	4a10      	ldr	r2, [pc, #64]	@ (80026f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80026b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026b8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 80026bc:	e011      	b.n	80026e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80026be:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0b      	ldr	r2, [pc, #44]	@ (80026f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80026cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80026d0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80026d4:	4a07      	ldr	r2, [pc, #28]	@ (80026f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80026d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026da:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      break;
 80026de:	e000      	b.n	80026e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80026e0:	bf00      	nop
  }
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010
 80026f4:	40030c00 	.word	0x40030c00

080026f8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002700:	f7fe fd38 	bl	8001174 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e06b      	b.n	80027e8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d008      	beq.n	800272e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e05c      	b.n	80027e8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0204 	orr.w	r2, r2, #4
 800273c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2205      	movs	r2, #5
 8002742:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002746:	e020      	b.n	800278a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002748:	f7fe fd14 	bl	8001174 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b05      	cmp	r3, #5
 8002754:	d919      	bls.n	800278a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2203      	movs	r2, #3
 8002766:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277a:	2201      	movs	r2, #1
 800277c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e02e      	b.n	80027e8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0d7      	beq.n	8002748 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0202 	orr.w	r2, r2, #2
 80027a6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2204      	movs	r2, #4
 80027ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80027b8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d2:	2201      	movs	r2, #1
 80027d4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2200      	movs	r2, #0
 80027dc:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e019      	b.n	8002836 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d004      	beq.n	8002818 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e00e      	b.n	8002836 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2204      	movs	r2, #4
 800281c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002852:	e162      	b.n	8002b1a <HAL_GPIO_Init+0x2d6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	4013      	ands	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8154 	beq.w	8002b14 <HAL_GPIO_Init+0x2d0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d005      	beq.n	8002884 <HAL_GPIO_Init+0x40>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d130      	bne.n	80028e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ba:	2201      	movs	r2, #1
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 0201 	and.w	r2, r3, #1
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d109      	bne.n	8002906 <HAL_GPIO_Init+0xc2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d11b      	bne.n	8002936 <HAL_GPIO_Init+0xf2>
         (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d017      	beq.n	8002936 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d123      	bne.n	800298a <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	08da      	lsrs	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3208      	adds	r2, #8
 800294a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	6939      	ldr	r1, [r7, #16]
 8002986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0203 	and.w	r2, r3, #3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80a4 	beq.w	8002b14 <HAL_GPIO_Init+0x2d0>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80029cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3318      	adds	r3, #24
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	220f      	movs	r2, #15
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a52      	ldr	r2, [pc, #328]	@ (8002b3c <HAL_GPIO_Init+0x2f8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d025      	beq.n	8002a44 <HAL_GPIO_Init+0x200>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a51      	ldr	r2, [pc, #324]	@ (8002b40 <HAL_GPIO_Init+0x2fc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d01f      	beq.n	8002a40 <HAL_GPIO_Init+0x1fc>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a50      	ldr	r2, [pc, #320]	@ (8002b44 <HAL_GPIO_Init+0x300>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d019      	beq.n	8002a3c <HAL_GPIO_Init+0x1f8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a4f      	ldr	r2, [pc, #316]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_GPIO_Init+0x1f4>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a4e      	ldr	r2, [pc, #312]	@ (8002b4c <HAL_GPIO_Init+0x308>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00d      	beq.n	8002a34 <HAL_GPIO_Init+0x1f0>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b50 <HAL_GPIO_Init+0x30c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <HAL_GPIO_Init+0x1ec>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a4c      	ldr	r2, [pc, #304]	@ (8002b54 <HAL_GPIO_Init+0x310>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_GPIO_Init+0x1e8>
 8002a28:	2307      	movs	r3, #7
 8002a2a:	e00c      	b.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a2c:	2310      	movs	r3, #16
 8002a2e:	e00a      	b.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a30:	2306      	movs	r3, #6
 8002a32:	e008      	b.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a34:	2304      	movs	r3, #4
 8002a36:	e006      	b.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e004      	b.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e002      	b.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_GPIO_Init+0x202>
 8002a44:	2300      	movs	r3, #0
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	f002 0203 	and.w	r2, r2, #3
 8002a4c:	00d2      	lsls	r2, r2, #3
 8002a4e:	4093      	lsls	r3, r2
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002a56:	4938      	ldr	r1, [pc, #224]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3318      	adds	r3, #24
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a64:	4b34      	ldr	r3, [pc, #208]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002a92:	4b29      	ldr	r3, [pc, #164]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ae4:	4a14      	ldr	r2, [pc, #80]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002aea:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_GPIO_Init+0x2f4>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3301      	adds	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f47f ae95 	bne.w	8002854 <HAL_GPIO_Init+0x10>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40032000 	.word	0x40032000
 8002b3c:	42020000 	.word	0x42020000
 8002b40:	42020400 	.word	0x42020400
 8002b44:	42020800 	.word	0x42020800
 8002b48:	42020c00 	.word	0x42020c00
 8002b4c:	42021000 	.word	0x42021000
 8002b50:	42021800 	.word	0x42021800
 8002b54:	42021c00 	.word	0x42021c00

08002b58 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002b64:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e007      	b.n	8002b86 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002b76:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0204 	bic.w	r2, r3, #4
 8002b7e:	4905      	ldr	r1, [pc, #20]	@ (8002b94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40030400 	.word	0x40030400

08002b98 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <HAL_ICACHE_Enable+0x1c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <HAL_ICACHE_Enable+0x1c>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40030400 	.word	0x40030400

08002bb8 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->DBPR, PWR_DBPR_DBP);
 8002bbc:	4b03      	ldr	r3, [pc, #12]	@ (8002bcc <HAL_PWR_EnableBkUpAccess+0x14>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bc2:	bf00      	nop
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40030800 	.word	0x40030800

08002bd0 <HAL_PWR_EnableWakeUpLine>:
  *                     @arg @ref PWR_WAKEUP_POLARITY_HIGH
  *                     @arg @ref PWR_WAKEUP_POLARITY_LOW
  * @retval None.
  */
void HAL_PWR_EnableWakeUpLine(uint32_t WakeUpLine, uint32_t Selection, uint32_t Polarity)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b091      	sub	sp, #68	@ 0x44
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_PWR_WAKEUP_LINE(WakeUpLine));
  assert_param(IS_PWR_WAKEUP_SELECTION(Selection));
  assert_param(IS_PWR_WAKEUP_POLARITY(Polarity));

  /* Specifies the wake up line I/O selection */
  MODIFY_REG(PWR->WUCR3, (3UL << (POSITION_VAL(WakeUpLine) * 2U)), Selection << (POSITION_VAL(WakeUpLine) * 2U));
 8002bdc:	4b35      	ldr	r3, [pc, #212]	@ (8002cb4 <HAL_PWR_EnableWakeUpLine+0xe4>)
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa93 f3a3 	rbit	r3, r3
 8002bea:	613b      	str	r3, [r7, #16]
  return result;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_PWR_EnableWakeUpLine+0x2a>
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e003      	b.n	8002c02 <HAL_PWR_EnableWakeUpLine+0x32>
  return __builtin_clz(value);
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2103      	movs	r1, #3
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	61fb      	str	r3, [r7, #28]
  return result;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_PWR_EnableWakeUpLine+0x58>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <HAL_PWR_EnableWakeUpLine+0x60>
  return __builtin_clz(value);
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	491e      	ldr	r1, [pc, #120]	@ (8002cb4 <HAL_PWR_EnableWakeUpLine+0xe4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61cb      	str	r3, [r1, #28]

  /* Specifies the wake up line polarity */
  MODIFY_REG(PWR->WUCR2, (1UL << (POSITION_VAL(WakeUpLine))), Polarity << (POSITION_VAL(WakeUpLine)));
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <HAL_PWR_EnableWakeUpLine+0xe4>)
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_PWR_EnableWakeUpLine+0x8c>
    return 32U;
 8002c58:	2320      	movs	r3, #32
 8002c5a:	e003      	b.n	8002c64 <HAL_PWR_EnableWakeUpLine+0x94>
  return __builtin_clz(value);
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4619      	mov	r1, r3
 8002c66:	2301      	movs	r3, #1
 8002c68:	408b      	lsls	r3, r1
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_PWR_EnableWakeUpLine+0xb8>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e003      	b.n	8002c90 <HAL_PWR_EnableWakeUpLine+0xc0>
  return __builtin_clz(value);
 8002c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	4619      	mov	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	408b      	lsls	r3, r1
 8002c96:	4907      	ldr	r1, [pc, #28]	@ (8002cb4 <HAL_PWR_EnableWakeUpLine+0xe4>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	618b      	str	r3, [r1, #24]

  /* Enable wake-up line */
  SET_BIT(PWR->WUCR1, WakeUpLine);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_PWR_EnableWakeUpLine+0xe4>)
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	4904      	ldr	r1, [pc, #16]	@ (8002cb4 <HAL_PWR_EnableWakeUpLine+0xe4>)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	614b      	str	r3, [r1, #20]
}
 8002ca8:	bf00      	nop
 8002caa:	3744      	adds	r7, #68	@ 0x44
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40030800 	.word	0x40030800

08002cb8 <HAL_PWR_EnterSTOPMode>:
  *                     @arg @ref PWR_STOPENTRY_WFE_NO_EVT_CLEAR enter Stop mode with Wait
  *                               For Event request and no clear of pending event before.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode(uint32_t StopMode, uint8_t STOPEntry)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameter */
  assert_param(IS_PWR_STOPMODE(StopMode));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Configure Stop mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, StopMode);
 8002cc4:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <HAL_PWR_EnterSTOPMode+0x58>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 0207 	bic.w	r2, r3, #7
 8002ccc:	4910      	ldr	r1, [pc, #64]	@ (8002d10 <HAL_PWR_EnterSTOPMode+0x58>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <HAL_PWR_EnterSTOPMode+0x5c>)
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d14 <HAL_PWR_EnterSTOPMode+0x5c>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Wait For Interrupt Request */
    __WFI();
 8002ce6:	bf30      	wfi
 8002ce8:	e005      	b.n	8002cf6 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if (STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d001      	beq.n	8002cf4 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 8002cf0:	bf40      	sev
      __WFE();
 8002cf2:	bf20      	wfe
    }

    /* Request Wait For Event */
    __WFE();
 8002cf4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <HAL_PWR_EnterSTOPMode+0x5c>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	4a06      	ldr	r2, [pc, #24]	@ (8002d14 <HAL_PWR_EnterSTOPMode+0x5c>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6113      	str	r3, [r2, #16]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40030800 	.word	0x40030800
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <HAL_PWREx_ControlVoltageScaling>:
  * @note   Before moving to voltage scaling 2, it is mandatory to ensure that
  *         the system frequency is equal or below 16 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Set voltage scaling level */
  vosr = (PWR->VOSR & ~(PWR_VOSR_R2EN | PWR_VOSR_R1EN));
 8002d20:	4b19      	ldr	r3, [pc, #100]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f023 0303 	bic.w	r3, r3, #3
 8002d28:	60bb      	str	r3, [r7, #8]
  vosr |= VoltageScaling;
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]
  PWR->VOSR = vosr;
 8002d32:	4a15      	ldr	r2, [pc, #84]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]

  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002d38:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2232      	movs	r2, #50	@ 0x32
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	4a13      	ldr	r2, [pc, #76]	@ (8002d90 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0c9b      	lsrs	r3, r3, #18
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* store expected ready flag */
  vosr = (VoltageScaling << (PWR_VOSR_R1RDY_Pos - PWR_VOSR_R1EN_Pos));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	60bb      	str	r3, [r7, #8]

  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8002d54:	e002      	b.n	8002d5c <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    timeout--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
  while (((PWR->VOSR & vosr) != vosr) && (timeout != 0U))
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d002      	beq.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x58>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f2      	bne.n	8002d56 <HAL_PWREx_ControlVoltageScaling+0x3e>
  }

  /* Check time out */
  if (timeout == 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_PWREx_ControlVoltageScaling+0x62>
  {
    return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e000      	b.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x64>
  }
  else
  {
    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40030800 	.word	0x40030800
 8002d8c:	20030000 	.word	0x20030000
 8002d90:	431bde83 	.word	0x431bde83

08002d94 <HAL_PWREx_EnableVddA>:
  * @brief  Enable VDDA supply valid.
  * @note   Setting this bit is mandatory to use the analog peripherals.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8002d98:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <HAL_PWREx_EnableVddA+0x1c>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_PWREx_EnableVddA+0x1c>)
 8002d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002da2:	6113      	str	r3, [r2, #16]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40030800 	.word	0x40030800

08002db4 <HAL_PWREx_EnableEpodBooster>:
  * @note   EPOD booster shall be enabled prior to increase system frequency above 24 MHz in all ranges.
  * @note   EPOD Booster clock source and divider shall be configured through RCC before calling this function.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableEpodBooster(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Set EPOD booster bit */
  PWR->VOSR |= PWR_VOSR_BOOSTEN;
 8002dba:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <HAL_PWREx_EnableEpodBooster+0x54>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <HAL_PWREx_EnableEpodBooster+0x54>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc4:	60d3      	str	r3, [r2, #12]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002dc6:	f7fe f9d5 	bl	8001174 <HAL_GetTick>
 8002dca:	6078      	str	r0, [r7, #4]

  /* Wait till boster ready bit is set */
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002dcc:	e00f      	b.n	8002dee <HAL_PWREx_EnableEpodBooster+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > BOOSTER_TIMEOUT_VALUE)
 8002dce:	f7fe f9d1 	bl	8001174 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d908      	bls.n	8002dee <HAL_PWREx_EnableEpodBooster+0x3a>
    {
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_PWREx_EnableEpodBooster+0x54>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002de8:	d001      	beq.n	8002dee <HAL_PWREx_EnableEpodBooster+0x3a>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e007      	b.n	8002dfe <HAL_PWREx_EnableEpodBooster+0x4a>
  while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) != PWR_VOSR_BOOSTRDY)
 8002dee:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_PWREx_EnableEpodBooster+0x54>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002df6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dfa:	d1e8      	bne.n	8002dce <HAL_PWREx_EnableEpodBooster+0x1a>
      }
    }
  }

  /* Booster is enabled and ready */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40030800 	.word	0x40030800

08002e0c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_MODE_CHANGE_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8002e14:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <HAL_PWREx_ConfigSupply+0x8c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2232      	movs	r2, #50	@ 0x32
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e9c <HAL_PWREx_ConfigSupply+0x90>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	3301      	adds	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply  */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d113      	bne.n	8002e58 <HAL_PWREx_ConfigSupply+0x4c>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0x94>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0x94>)
 8002e36:	f023 0302 	bic.w	r3, r3, #2
 8002e3a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e3c:	e002      	b.n	8002e44 <HAL_PWREx_ConfigSupply+0x38>
    {
      timeout--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0x94>)
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d116      	bne.n	8002e7e <HAL_PWREx_ConfigSupply+0x72>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f3      	bne.n	8002e3e <HAL_PWREx_ConfigSupply+0x32>
 8002e56:	e012      	b.n	8002e7e <HAL_PWREx_ConfigSupply+0x72>
  }
  /* Configure the SMPS as system regulator supply  */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0x94>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a10      	ldr	r2, [pc, #64]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0x94>)
 8002e5e:	f043 0302 	orr.w	r3, r3, #2
 8002e62:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e64:	e002      	b.n	8002e6c <HAL_PWREx_ConfigSupply+0x60>
    {
      timeout--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <HAL_PWREx_ConfigSupply+0x94>)
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <HAL_PWREx_ConfigSupply+0x72>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f3      	bne.n	8002e66 <HAL_PWREx_ConfigSupply+0x5a>
    }
  }

  /* Check time out  */
  if (timeout == 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_PWREx_ConfigSupply+0x7c>
  {
    return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e000      	b.n	8002e8a <HAL_PWREx_ConfigSupply+0x7e>
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20030000 	.word	0x20030000
 8002e9c:	431bde83 	.word	0x431bde83
 8002ea0:	40030800 	.word	0x40030800

08002ea4 <HAL_PWREx_EnableRAMsPowerDown>:
  *                      @arg PWR_SRAM1_POWERDOWN  : SRAM1 powered off.
  *                      @arg PWR_SRAM2_POWERDOWN  : SRAM2 powered off.
  * @retval None.
  */
void HAL_PWREx_EnableRAMsPowerDown(uint32_t RAMSelection)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_RAM_POWERDOWN(RAMSelection));

  /* SRAMi powered off */
  SET_BIT(PWR->CR1, RAMSelection);
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_PWREx_EnableRAMsPowerDown+0x20>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4904      	ldr	r1, [pc, #16]	@ (8002ec4 <HAL_PWREx_EnableRAMsPowerDown+0x20>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40030800 	.word	0x40030800

08002ec8 <HAL_PWREx_DisableRAMsContentStopRetention>:
  *                      @arg PWR_FDCAN_USB_STOP_RETENTION   : FDCAN & USB SRAM retention.
  *                      @arg PWR_PKA_STOP_RETENTION         : PKA SRAM retention.
  * @retval None.
  */
void HAL_PWREx_DisableRAMsContentStopRetention(uint32_t RAMSelection)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_RAM_STOP_RETENTION(RAMSelection));

  /* Disable RAM retention in Stop mode */
  SET_BIT(PWR->CR2, RAMSelection);
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_PWREx_DisableRAMsContentStopRetention+0x20>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4904      	ldr	r1, [pc, #16]	@ (8002ee8 <HAL_PWREx_DisableRAMsContentStopRetention+0x20>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40030800 	.word	0x40030800

08002eec <HAL_PWREx_DisableFlashFastWakeUp>:
  *         mode in Stop 0 and Stop 1 modes, which causes a slower startup time
  *         with lower consumption.
  * @retval None.
  */
void HAL_PWREx_DisableFlashFastWakeUp(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR2, PWR_CR2_FLASHFWU);
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_PWREx_DisableFlashFastWakeUp+0x1c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <HAL_PWREx_DisableFlashFastWakeUp+0x1c>)
 8002ef6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002efa:	6053      	str	r3, [r2, #4]
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40030800 	.word	0x40030800

08002f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef *RCC_OscInitStruct)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t sysclksrc;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e340      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1e:	4b98      	ldr	r3, [pc, #608]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) != 0x00u)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80ad 	beq.w	8003090 <HAL_RCC_OscConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock source, it is not allowed to be disabled */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 80a5 	bne.w	8003090 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e32a      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      }
    }
    else
    {
      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d04f      	beq.n	8002ff2 <HAL_RCC_OscConfig+0xe6>
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x5e>
 8002f5c:	4b88      	ldr	r3, [pc, #544]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a87      	ldr	r2, [pc, #540]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e02f      	b.n	8002fca <HAL_RCC_OscConfig+0xbe>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f72:	d10c      	bne.n	8002f8e <HAL_RCC_OscConfig+0x82>
 8002f74:	4b82      	ldr	r3, [pc, #520]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a81      	ldr	r2, [pc, #516]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b7f      	ldr	r3, [pc, #508]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a7e      	ldr	r2, [pc, #504]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	e01d      	b.n	8002fca <HAL_RCC_OscConfig+0xbe>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002f96:	d10c      	bne.n	8002fb2 <HAL_RCC_OscConfig+0xa6>
 8002f98:	4b79      	ldr	r3, [pc, #484]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a78      	ldr	r2, [pc, #480]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002f9e:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b76      	ldr	r3, [pc, #472]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a75      	ldr	r2, [pc, #468]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	e00b      	b.n	8002fca <HAL_RCC_OscConfig+0xbe>
 8002fb2:	4b73      	ldr	r3, [pc, #460]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a72      	ldr	r2, [pc, #456]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b70      	ldr	r3, [pc, #448]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe f8d3 	bl	8001174 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd2:	f7fe f8cf 	bl	8001174 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	@ 0x64
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e2dd      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe4:	4b66      	ldr	r3, [pc, #408]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0xc6>
 8002ff0:	e04e      	b.n	8003090 <HAL_RCC_OscConfig+0x184>
        }
      }
      else
      {
        /* Set the new HSE configuration ---------------------------------------*/
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0xfe>
 8002ffc:	4b60      	ldr	r3, [pc, #384]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a5f      	ldr	r2, [pc, #380]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e02f      	b.n	800306a <HAL_RCC_OscConfig+0x15e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003012:	d10c      	bne.n	800302e <HAL_RCC_OscConfig+0x122>
 8003014:	4b5a      	ldr	r3, [pc, #360]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a59      	ldr	r2, [pc, #356]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 800301a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b57      	ldr	r3, [pc, #348]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a56      	ldr	r2, [pc, #344]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e01d      	b.n	800306a <HAL_RCC_OscConfig+0x15e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003036:	d10c      	bne.n	8003052 <HAL_RCC_OscConfig+0x146>
 8003038:	4b51      	ldr	r3, [pc, #324]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a50      	ldr	r2, [pc, #320]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 800303e:	f443 13a0 	orr.w	r3, r3, #1310720	@ 0x140000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	4b4e      	ldr	r3, [pc, #312]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a4d      	ldr	r2, [pc, #308]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e00b      	b.n	800306a <HAL_RCC_OscConfig+0x15e>
 8003052:	4b4b      	ldr	r3, [pc, #300]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a4a      	ldr	r2, [pc, #296]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b48      	ldr	r3, [pc, #288]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a47      	ldr	r2, [pc, #284]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003064:	f423 13a0 	bic.w	r3, r3, #1310720	@ 0x140000
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fe f883 	bl	8001174 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003072:	f7fe f87f 	bl	8001174 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b64      	cmp	r3, #100	@ 0x64
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e28d      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003084:	4b3e      	ldr	r3, [pc, #248]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x166>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) != 0x00u)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d054      	beq.n	8003146 <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d110      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e278      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	4930      	ldr	r1, [pc, #192]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	610b      	str	r3, [r1, #16]
 80030c2:	e040      	b.n	8003146 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d023      	beq.n	8003114 <HAL_RCC_OscConfig+0x208>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 80030d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fe f84c 	bl	8001174 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fe f848 	bl	8001174 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e256      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f2:	4b23      	ldr	r3, [pc, #140]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x1d4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	491c      	ldr	r1, [pc, #112]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 800310e:	4313      	orrs	r3, r2
 8003110:	610b      	str	r3, [r1, #16]
 8003112:	e018      	b.n	8003146 <HAL_RCC_OscConfig+0x23a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003114:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a19      	ldr	r2, [pc, #100]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 800311a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800311e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe f828 	bl	8001174 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003128:	f7fe f824 	bl	8001174 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e232      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x21c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) != 0x00u)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d038      	beq.n	80031c4 <HAL_RCC_OscConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01b      	beq.n	8003192 <HAL_RCC_OscConfig+0x286>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a08      	ldr	r2, [pc, #32]	@ (8003180 <HAL_RCC_OscConfig+0x274>)
 8003160:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003164:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fe f805 	bl	8001174 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800316e:	f7fe f801 	bl	8001174 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d903      	bls.n	8003184 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e20f      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
 8003180:	40030c00 	.word	0x40030c00
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003184:	4ba0      	ldr	r3, [pc, #640]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ee      	beq.n	800316e <HAL_RCC_OscConfig+0x262>
 8003190:	e018      	b.n	80031c4 <HAL_RCC_OscConfig+0x2b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003192:	4b9d      	ldr	r3, [pc, #628]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a9c      	ldr	r2, [pc, #624]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003198:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800319c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fd ffe9 	bl	8001174 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x2ac>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031a6:	f7fd ffe5 	bl	8001174 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1f3      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80031b8:	4b93      	ldr	r3, [pc, #588]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x29a>
    }
  }


  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) != 0x00u)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a7 	beq.w	8003320 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	76fb      	strb	r3, [r7, #27]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80031d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80031d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d110      	bne.n	8003206 <HAL_RCC_OscConfig+0x2fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	4b88      	ldr	r3, [pc, #544]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ea:	4a87      	ldr	r2, [pc, #540]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80031f4:	4b84      	ldr	r3, [pc, #528]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80031f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003202:	2301      	movs	r3, #1
 8003204:	76fb      	strb	r3, [r7, #27]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003206:	4b81      	ldr	r3, [pc, #516]	@ (800340c <HAL_RCC_OscConfig+0x500>)
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	4a80      	ldr	r2, [pc, #512]	@ (800340c <HAL_RCC_OscConfig+0x500>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Set the new LSE configuration -----------------------------------------*/
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d051      	beq.n	80032be <HAL_RCC_OscConfig+0x3b2>
    {
      /* If LSE is already on or in bypass mode, only LSE system can be modified */
      tmpreg1 = (RCC->BDCR & ~RCC_BDCR_LSESYSEN);
 800321a:	4b7b      	ldr	r3, [pc, #492]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 800321c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003224:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	4313      	orrs	r3, r2
 800322e:	61fb      	str	r3, [r7, #28]
      RCC->BDCR = tmpreg1;
 8003230:	4a75      	ldr	r2, [pc, #468]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fd ff9c 	bl	8001174 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fd ff98 	bl	8001174 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e1a4      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003256:	4b6c      	ldr	r3, [pc, #432]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003258:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ed      	beq.n	8003240 <HAL_RCC_OscConfig+0x334>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01e      	beq.n	80032ae <HAL_RCC_OscConfig+0x3a2>
      {
        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003270:	e00a      	b.n	8003288 <HAL_RCC_OscConfig+0x37c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fd ff7f 	bl	8001174 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003280:	4293      	cmp	r3, r2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x37c>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e18b      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003288:	4b5f      	ldr	r3, [pc, #380]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 800328a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800328e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0ed      	beq.n	8003272 <HAL_RCC_OscConfig+0x366>
 8003296:	e038      	b.n	800330a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fd ff6c 	bl	8001174 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e178      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032ae:	4b56      	ldr	r3, [pc, #344]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80032b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80032b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ed      	bne.n	8003298 <HAL_RCC_OscConfig+0x38c>
 80032bc:	e025      	b.n	800330a <HAL_RCC_OscConfig+0x3fe>
        }
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEON | RCC_BDCR_LSESYSEN));
 80032be:	4b52      	ldr	r3, [pc, #328]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80032c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80032c4:	4a50      	ldr	r2, [pc, #320]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80032c6:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 80032ca:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80032d0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80032d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80032d6:	f023 0304 	bic.w	r3, r3, #4
 80032da:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fd ff49 	bl	8001174 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x3f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fd ff45 	bl	8001174 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e151      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032fc:	4b42      	ldr	r3, [pc, #264]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80032fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ed      	bne.n	80032e6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800330a:	7efb      	ldrb	r3, [r7, #27]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003310:	4b3d      	ldr	r3, [pc, #244]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003316:	4a3c      	ldr	r2, [pc, #240]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) != 0x00u)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d078      	beq.n	800341e <HAL_RCC_OscConfig+0x512>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Get CSR register value */
    tmpreg1 = RCC->CSR;
 800332c:	4b36      	ldr	r3, [pc, #216]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 800332e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003332:	61fb      	str	r3, [r7, #28]

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d050      	beq.n	80033de <HAL_RCC_OscConfig+0x4d2>
    {
      /* Check LSI division factor */
      assert_param(IS_RCC_LSI_DIV(RCC_OscInitStruct->LSIDiv));

      /* Check is LSIDiv is requested to be changed and LSI is already ON */
      if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_CSR_LSIPREDIV)) && ((tmpreg1 & RCC_CSR_LSIRDY) != 0x00u))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	429a      	cmp	r2, r3
 8003348:	d023      	beq.n	8003392 <HAL_RCC_OscConfig+0x486>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01e      	beq.n	8003392 <HAL_RCC_OscConfig+0x486>
      {
        /* Disable LSI (end clear ready bit from tmpreg to avoid its propagation below) */
        tmpreg1 &= ~(RCC_CSR_LSION | RCC_CSR_LSIRDY);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	61fb      	str	r3, [r7, #28]
        RCC->CSR = tmpreg1;
 800335c:	4a2a      	ldr	r2, [pc, #168]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd ff06 	bl	8001174 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x472>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336c:	f7fd ff02 	bl	8001174 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b14      	cmp	r3, #20
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x472>
          {
            /* LSI may be forced ON by IWDG */
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e110      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 800337e:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 8003380:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ef      	bne.n	800336c <HAL_RCC_OscConfig+0x460>
          }
        }
        /* Wait at least a half of LSI clock period before applying the new LSI prediv value */
        HAL_Delay(1);
 800338c:	2001      	movs	r0, #1
 800338e:	f7fd fefd 	bl	800118c <HAL_Delay>
      }

      /* Set LSI division factor */
      tmpreg1 &= ~RCC_CSR_LSIPREDIV;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f023 0304 	bic.w	r3, r3, #4
 8003398:	61fb      	str	r3, [r7, #28]
      tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61fb      	str	r3, [r7, #28]

      /* Enable  LSI */
      tmpreg1 |= RCC_CSR_LSION;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 80033ac:	4a16      	ldr	r2, [pc, #88]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fede 	bl	8001174 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x4c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fd feda 	bl	8001174 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b14      	cmp	r3, #20
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0e8      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0x00u)
 80033ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80033d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ef      	beq.n	80033bc <HAL_RCC_OscConfig+0x4b0>
 80033dc:	e01f      	b.n	800341e <HAL_RCC_OscConfig+0x512>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator */
      tmpreg1 &= ~RCC_CSR_LSION;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
      RCC->CSR = tmpreg1;
 80033e6:	4a08      	ldr	r2, [pc, #32]	@ (8003408 <HAL_RCC_OscConfig+0x4fc>)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ee:	f7fd fec1 	bl	8001174 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 80033f4:	e00c      	b.n	8003410 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fd febd 	bl	8001174 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b14      	cmp	r3, #20
 8003402:	d905      	bls.n	8003410 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0cb      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
 8003408:	40030c00 	.word	0x40030c00
 800340c:	40030800 	.word	0x40030800
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0x00u)
 8003410:	4b65      	ldr	r3, [pc, #404]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003412:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1eb      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
  }

  /*------------------------------ MSIS Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIS) != 0x00u)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d068      	beq.n	80034fc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSISState));

    /* Check if MSIS is asked to be turn off */
    if (RCC_OscInitStruct->MSISState == RCC_MSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10d      	bne.n	800344e <HAL_RCC_OscConfig+0x542>
    {
      /* When MSIS is used as system clock it will not be disabled */
      if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_OscConfig+0x530>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0b1      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Disable the MSIS */
        __HAL_RCC_MSIS_DISABLE();
 800343c:	4b5a      	ldr	r3, [pc, #360]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a59      	ldr	r2, [pc, #356]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = 0x00u;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	e03b      	b.n	80034c6 <HAL_RCC_OscConfig+0x5ba>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSISSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSISDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSISON | RCC_CR_MSISRDY)) == RCC_CR_MSISON)
 800344e:	4b56      	ldr	r3, [pc, #344]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0305 	and.w	r3, r3, #5
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x552>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0a0      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIS source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSISSEL | RCC_ICSCR1_MSISDIV);
 800345e:	4b52      	ldr	r3, [pc, #328]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8003466:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | RCC_OscInitStruct->MSISSource | RCC_OscInitStruct->MSISDiv);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003470:	431a      	orrs	r2, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4313      	orrs	r3, r2
 8003476:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800347a:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 800347c:	4a4a      	ldr	r2, [pc, #296]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	6093      	str	r3, [r2, #8]

        /* If MSIS is already selected as system clock, update Systick */
        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSIS)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d116      	bne.n	80034b6 <HAL_RCC_OscConfig+0x5aa>
        {
          /* Update the SystemCoreClock global variable */
          SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003488:	f000 f982 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b46      	ldr	r3, [pc, #280]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4945      	ldr	r1, [pc, #276]	@ (80035ac <HAL_RCC_OscConfig+0x6a0>)
 8003498:	5ccb      	ldrb	r3, [r1, r3]
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	4a44      	ldr	r2, [pc, #272]	@ (80035b0 <HAL_RCC_OscConfig+0x6a4>)
 80034a0:	6013      	str	r3, [r2, #0]

          /* Configure the source of time base considering new system clocks settings*/
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034a2:	4b44      	ldr	r3, [pc, #272]	@ (80035b4 <HAL_RCC_OscConfig+0x6a8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fdd2 	bl	8001050 <HAL_InitTick>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_RCC_OscConfig+0x5b6>
          {
            return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e074      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
          }
        }
        else
        {
          /* Enable the MSIS */
          __HAL_RCC_MSIS_ENABLE();
 80034b6:	4b3c      	ldr	r3, [pc, #240]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a3b      	ldr	r2, [pc, #236]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6013      	str	r3, [r2, #0]
        }

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSISRDY;
 80034c2:	2304      	movs	r3, #4
 80034c4:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c6:	f7fd fe55 	bl	8001174 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80034cc:	e00f      	b.n	80034ee <HAL_RCC_OscConfig+0x5e2>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ce:	f7fd fe51 	bl	8001174 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d908      	bls.n	80034ee <HAL_RCC_OscConfig+0x5e2>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80034dc:	4b32      	ldr	r3, [pc, #200]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d001      	beq.n	80034ee <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e058      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != tmpreg1)
 80034ee:	4b2e      	ldr	r3, [pc, #184]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d1e8      	bne.n	80034ce <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ MSIK Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) != 0x00u)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d04a      	beq.n	800359e <HAL_RCC_OscConfig+0x692>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIKState));

    /* Check if MSIK is asked to be turn off */
    if (RCC_OscInitStruct->MSIKState == RCC_MSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <HAL_RCC_OscConfig+0x616>
    {
      /* Disable the MSIK */
      __HAL_RCC_MSIK_DISABLE();
 8003510:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a24      	ldr	r2, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003516:	f023 0308 	bic.w	r3, r3, #8
 800351a:	6013      	str	r3, [r2, #0]

      /* Store ready bit value for timeout */
      tmpreg1 = 0x00u;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	e022      	b.n	8003568 <HAL_RCC_OscConfig+0x65c>
      /* Otherwise, turn it ON or if already ON, changing source and range is allowed */
      assert_param(IS_RCC_MSI_SOURCE(RCC_OscInitStruct->MSIKSource));
      assert_param(IS_RCC_MSI_DIV(RCC_OscInitStruct->MSIKDiv));

      /* Changing source and range is not possible when osnillator is ON but not Ready */
      if ((RCC->CR & (RCC_CR_MSIKON | RCC_CR_MSIKRDY)) == RCC_CR_MSIKON)
 8003522:	4b21      	ldr	r3, [pc, #132]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0318 	and.w	r3, r3, #24
 800352a:	2b08      	cmp	r3, #8
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x626>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e036      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
      }
      else
      {
        /* Adjusts the MSIK source and divider, and force MSI selection to ICSCR1 */
        tmpreg1 = RCC->ICSCR1 & ~(RCC_ICSCR1_MSIKSEL | RCC_ICSCR1_MSIKDIV);
 8003532:	4b1d      	ldr	r3, [pc, #116]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
 800353a:	61fb      	str	r3, [r7, #28]
        tmpreg1 |= (RCC_ICSCR1_MSIRGSEL | ((RCC_OscInitStruct->MSIKSource | RCC_OscInitStruct->MSIKDiv) >> (RCC_ICSCR1_MSISSEL_Pos - RCC_ICSCR1_MSIKSEL_Pos)));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003544:	4313      	orrs	r3, r2
 8003546:	08da      	lsrs	r2, r3, #3
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4313      	orrs	r3, r2
 800354c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003550:	61fb      	str	r3, [r7, #28]
        RCC->ICSCR1 = tmpreg1;
 8003552:	4a15      	ldr	r2, [pc, #84]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	6093      	str	r3, [r2, #8]

        /* Enable the MSIK */
        __HAL_RCC_MSIK_ENABLE();
 8003558:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a12      	ldr	r2, [pc, #72]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 800355e:	f043 0308 	orr.w	r3, r3, #8
 8003562:	6013      	str	r3, [r2, #0]

        /* Store ready bit value for timeout */
        tmpreg1 = RCC_CR_MSIKRDY;
 8003564:	2310      	movs	r3, #16
 8003566:	61fb      	str	r3, [r7, #28]
      }
    }

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003568:	f7fd fe04 	bl	8001174 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

    /* Wait till HSI48 is disabled */
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 800356e:	e00f      	b.n	8003590 <HAL_RCC_OscConfig+0x684>
    {
      if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003570:	f7fd fe00 	bl	8001174 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d908      	bls.n	8003590 <HAL_RCC_OscConfig+0x684>
      {
        if (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x684>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e007      	b.n	80035a0 <HAL_RCC_OscConfig+0x694>
    while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != tmpreg1)
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_OscConfig+0x69c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	429a      	cmp	r2, r3
 800359c:	d1e8      	bne.n	8003570 <HAL_RCC_OscConfig+0x664>
        }
      }
    }
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40030c00 	.word	0x40030c00
 80035ac:	08006710 	.word	0x08006710
 80035b0:	20030000 	.word	0x20030000
 80035b4:	20030004 	.word	0x20030004

080035b8 <HAL_RCC_ClockConfig>:
  * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef  HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  uint32_t update;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0d2      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b6b      	ldr	r3, [pc, #428]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d910      	bls.n	80035fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b68      	ldr	r3, [pc, #416]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	4966      	ldr	r1, [pc, #408]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b64      	ldr	r3, [pc, #400]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0ba      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d040      	beq.n	800368a <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* Read CR register */
    tmpreg1 = RCC->CR;
 8003608:	4b5d      	ldr	r3, [pc, #372]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	617b      	str	r3, [r7, #20]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d106      	bne.n	8003624 <HAL_RCC_ClockConfig+0x6c>
    {
      /* Check the HSE ready flag */
      if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0a6      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d106      	bne.n	800363a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSI ready flag */
      if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e09b      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* MSIS is selected as System Clock Source */
    else
    {
      /* Check the MSIS ready flag */
      if ((tmpreg1 & RCC_CR_MSISRDY) == 0U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e094      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    /* Switch System clock source */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003648:	4b4d      	ldr	r3, [pc, #308]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f023 0203 	bic.w	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	494a      	ldr	r1, [pc, #296]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365a:	f7fd fd8b 	bl	8001174 <HAL_GetTick>
 800365e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8003660:	e00a      	b.n	8003678 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003662:	f7fd fd87 	bl	8001174 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e07c      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8003678:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f003 020c 	and.w	r2, r3, #12
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	429a      	cmp	r2, r3
 8003688:	d1eb      	bne.n	8003662 <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Get CFGR2 content value, and reset update variable */
  tmpreg1 = RCC->CFGR2;
 800368a:	4b3d      	ldr	r3, [pc, #244]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	617b      	str	r3, [r7, #20]
  update = 0x00u;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xfe>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    /* update HCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 030f 	bic.w	r3, r3, #15
 80036a6:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80036b2:	2301      	movs	r3, #1
 80036b4:	613b      	str	r3, [r7, #16]
  }


  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));

    /* update PCLK1 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c8:	617b      	str	r3, [r7, #20]
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80036d4:	2301      	movs	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));

    /* update PCLK2 divider and notify register is required */
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036ea:	617b      	str	r3, [r7, #20]
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
    update = 0x01u;
 80036f8:	2301      	movs	r3, #1
 80036fa:	613b      	str	r3, [r7, #16]
  }

  /* update CFGR2 if required */
  if (update != 0x00u)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_RCC_ClockConfig+0x150>
  {
    RCC->CFGR2 = tmpreg1;
 8003702:	4a1f      	ldr	r2, [pc, #124]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	6213      	str	r3, [r2, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_RCC_ClockConfig+0x164>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB3CLKDivider));
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB3CLKDivider);
 8003714:	4a1a      	ldr	r2, [pc, #104]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b17      	ldr	r3, [pc, #92]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d210      	bcs.n	800374c <HAL_RCC_ClockConfig+0x194>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b14      	ldr	r3, [pc, #80]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 020f 	bic.w	r2, r3, #15
 8003732:	4912      	ldr	r1, [pc, #72]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b10      	ldr	r3, [pc, #64]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x194>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e012      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800374c:	f000 f820 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	490a      	ldr	r1, [pc, #40]	@ (8003784 <HAL_RCC_ClockConfig+0x1cc>)
 800375c:	5ccb      	ldrb	r3, [r1, r3]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	4a09      	ldr	r2, [pc, #36]	@ (8003788 <HAL_RCC_ClockConfig+0x1d0>)
 8003764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1d4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fc70 	bl	8001050 <HAL_InitTick>
 8003770:	4603      	mov	r3, r0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40022000 	.word	0x40022000
 8003780:	40030c00 	.word	0x40030c00
 8003784:	08006710 	.word	0x08006710
 8003788:	20030000 	.word	0x20030000
 800378c:	20030004 	.word	0x20030004

08003790 <HAL_RCC_GetSysClockFreq>:
  * @note   This function can be used by the user application to compute the
  *         baudrate for the communication peripherals or configure other parameters.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
  uint32_t tmpcfgr;
  uint32_t sysclk;

  /* Get SYSCLK source */
  tmpcfgr = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003796:	4b1e      	ldr	r3, [pc, #120]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x80>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	607b      	str	r3, [r7, #4]

  if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d102      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSE used as system clock source */
    sysclk = HSE_VALUE;
 80037a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x84>)
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	e029      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else if (tmpcfgr == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d102      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* HSI used as system clock source */
    sysclk = HSI_VALUE;
 80037b2:	4b18      	ldr	r3, [pc, #96]	@ (8003814 <HAL_RCC_GetSysClockFreq+0x84>)
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	e023      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x70>
  }
  else
  {
    /* MSIS used as system clock source. Read ICSR1 register */
    tmpcfgr = RCC->ICSCR1;
 80037b8:	4b15      	ldr	r3, [pc, #84]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x80>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	607b      	str	r3, [r7, #4]

    /* Check which MSIS Range is selected */
    if ((tmpcfgr & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00d      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x54>
    {
      /* Check which MSIRCx is selected as MSIS source */
      if ((tmpcfgr & RCC_ICSCR1_MSISSEL) != 0x00u)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	da02      	bge.n	80037d4 <HAL_RCC_GetSysClockFreq+0x44>
      {
        /* MSI RC1 is selected */
        sysclk = MSIRC1_VALUE;
 80037ce:	4b12      	ldr	r3, [pc, #72]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x88>)
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	e001      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x48>
      }
      else
      {
        /* MSI RC0 is selected */
        sysclk = MSIRC0_VALUE;
 80037d4:	4b11      	ldr	r3, [pc, #68]	@ (800381c <HAL_RCC_GetSysClockFreq+0x8c>)
 80037d6:	603b      	str	r3, [r7, #0]
      }

      /* Get MSIS range */
      tmpcfgr = (tmpcfgr & RCC_ICSCR1_MSISDIV) >> RCC_ICSCR1_MSISDIV_Pos;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0f5b      	lsrs	r3, r3, #29
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_GetSysClockFreq+0x66>
    }
    else
    {
      /* MSI RC1 is selected */
      sysclk = MSIRC1_VALUE;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x88>)
 80037e6:	603b      	str	r3, [r7, #0]

      /* Get MSIS range */
      tmpcfgr = (RCC->CSR & (RCC_CSR_MSISDIVS_1 | RCC_CSR_MSISDIVS_0)) >> RCC_CSR_MSISDIVS_Pos;
 80037e8:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_GetSysClockFreq+0x80>)
 80037ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80037ee:	0b1b      	lsrs	r3, r3, #12
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	607b      	str	r3, [r7, #4]
    }

    /* MSIS frequency in HZ*/
    sysclk >>= tmpcfgr;
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	fa22 f303 	lsr.w	r3, r2, r3
 80037fe:	603b      	str	r3, [r7, #0]
  }

  return sysclk;
 8003800:	683b      	ldr	r3, [r7, #0]
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40030c00 	.word	0x40030c00
 8003814:	00f42400 	.word	0x00f42400
 8003818:	016e3600 	.word	0x016e3600
 800381c:	05b8d800 	.word	0x05b8d800

08003820 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003824:	f7ff ffb4 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <HAL_RCC_GetHCLKFreq+0x28>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	4906      	ldr	r1, [pc, #24]	@ (800384c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a05      	ldr	r2, [pc, #20]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x30>)
 800383c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800383e:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x30>)
 8003840:	681b      	ldr	r3, [r3, #0]
}
 8003842:	4618      	mov	r0, r3
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40030c00 	.word	0x40030c00
 800384c:	08006710 	.word	0x08006710
 8003850:	20030000 	.word	0x20030000

08003854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003858:	f7ff ffe2 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	@ (8003878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40030c00 	.word	0x40030c00
 8003878:	08006720 	.word	0x08006720

0800387c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003880:	f7ff ffce 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8003884:	4602      	mov	r2, r0
 8003886:	4b05      	ldr	r3, [pc, #20]	@ (800389c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	4903      	ldr	r1, [pc, #12]	@ (80038a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003892:	5ccb      	ldrb	r3, [r1, r3]
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40030c00 	.word	0x40030c00
 80038a0:	08006720 	.word	0x08006720

080038a4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80038a8:	f7ff ffba 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4903      	ldr	r1, [pc, #12]	@ (80038c8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40030c00 	.word	0x40030c00
 80038c8:	08006720 	.word	0x08006720

080038cc <HAL_RCC_GetMSIKFreq>:
/**
  * @brief  Return the MSIK frequency.
  * @retval MSIK frequency in Hz
  */
uint32_t HAL_RCC_GetMSIKFreq(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
  uint32_t tmp;
  uint32_t msirange;

  /* Compute MSIK frequency ------------------------------------------------*/
  /* Read RCC ICSR1 register */
  tmp = RCC->ICSCR1;
 80038d2:	4b16      	ldr	r3, [pc, #88]	@ (800392c <HAL_RCC_GetMSIKFreq+0x60>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	607b      	str	r3, [r7, #4]

  /* Check which MSIK Range is selected */
  if ((tmp & RCC_ICSCR1_MSIRGSEL) != 0x00u)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00f      	beq.n	8003902 <HAL_RCC_GetMSIKFreq+0x36>
  {
    /* Get MSIK range */
    msirange = (tmp & RCC_ICSCR1_MSIKDIV) >> RCC_ICSCR1_MSIKDIV_Pos;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	0e9b      	lsrs	r3, r3, #26
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	603b      	str	r3, [r7, #0]

    /* Check which MSIRCx is selected as MSIK source */
    if ((tmp & RCC_ICSCR1_MSIKSEL) != 0x00u)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_RCC_GetMSIKFreq+0x30>
    {
      /* MSI RC1 is selected */
      tmp = MSIRC1_VALUE;
 80038f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <HAL_RCC_GetMSIKFreq+0x64>)
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_GetMSIKFreq+0x48>
    }
    else
    {
      /* MSI RC0 is selected */
      tmp = MSIRC0_VALUE;
 80038fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <HAL_RCC_GetMSIKFreq+0x68>)
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	e008      	b.n	8003914 <HAL_RCC_GetMSIKFreq+0x48>
    }
  }
  else
  {
    /* MSI RC1 is selected */
    tmp = MSIRC1_VALUE;
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_RCC_GetMSIKFreq+0x64>)
 8003904:	607b      	str	r3, [r7, #4]

    /* Get MSIK range */
    msirange = (RCC->CSR & (RCC_CSR_MSIKDIVS_1 | RCC_CSR_MSIKDIVS_0)) >> RCC_CSR_MSIKDIVS_Pos;
 8003906:	4b09      	ldr	r3, [pc, #36]	@ (800392c <HAL_RCC_GetMSIKFreq+0x60>)
 8003908:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	603b      	str	r3, [r7, #0]
  }

  /*MSIK frequency in HZ*/
  tmp >>= msirange;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	607b      	str	r3, [r7, #4]

  return tmp;
 800391e:	687b      	ldr	r3, [r7, #4]
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40030c00 	.word	0x40030c00
 8003930:	016e3600 	.word	0x016e3600
 8003934:	05b8d800 	.word	0x05b8d800

08003938 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800394c:	4bad      	ldr	r3, [pc, #692]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800394e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	49aa      	ldr	r1, [pc, #680]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396e:	4ba5      	ldr	r3, [pc, #660]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003970:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003974:	f023 0204 	bic.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	49a1      	ldr	r1, [pc, #644]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART4 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003990:	4b9c      	ldr	r3, [pc, #624]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003992:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003996:	f023 0210 	bic.w	r2, r3, #16
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4999      	ldr	r1, [pc, #612]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- UART5 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039b2:	4b94      	ldr	r3, [pc, #592]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039b8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4990      	ldr	r1, [pc, #576]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    /* Configure the I3C1 clock source */
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
 80039d4:	4b8b      	ldr	r3, [pc, #556]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	4988      	ldr	r1, [pc, #544]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f6:	4b83      	ldr	r3, [pc, #524]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80039f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80039fc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	497f      	ldr	r1, [pc, #508]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a18:	4b7a      	ldr	r3, [pc, #488]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a1a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	4977      	ldr	r1, [pc, #476]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    /* Configure the I3C2 clock source */
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
 8003a3a:	4b72      	ldr	r3, [pc, #456]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a40:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	496e      	ldr	r1, [pc, #440]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
 8003a5c:	4b69      	ldr	r3, [pc, #420]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a5e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	4966      	ldr	r1, [pc, #408]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a7e:	4b61      	ldr	r3, [pc, #388]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a80:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003a84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	495d      	ldr	r1, [pc, #372]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8003aa0:	4b58      	ldr	r3, [pc, #352]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003aa2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003aa6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aae:	4955      	ldr	r1, [pc, #340]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 8003ac2:	4b50      	ldr	r3, [pc, #320]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ac4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003ac8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad0:	494c      	ldr	r1, [pc, #304]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- FDCAN clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ae4:	4b47      	ldr	r3, [pc, #284]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ae6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003aea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af2:	4944      	ldr	r1, [pc, #272]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ICLK clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(PeriphClkInit->IclkClockSelection));

    /* Set the source of ICLK clock*/
    __HAL_RCC_ICLK_CONFIG(PeriphClkInit->IclkClockSelection);
 8003b06:	4b3f      	ldr	r3, [pc, #252]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b08:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b14:	493b      	ldr	r1, [pc, #236]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- USB1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB1) == RCC_PERIPHCLK_USB1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USB1CLKSOURCE(PeriphClkInit->Usb1ClockSelection));

    /* Set the source of USB1 clock*/
    __HAL_RCC_USB1_CONFIG(PeriphClkInit->Usb1ClockSelection);
 8003b28:	4b36      	ldr	r3, [pc, #216]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b2e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	4933      	ldr	r1, [pc, #204]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8003b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b50:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	492a      	ldr	r1, [pc, #168]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  }

  /*-------------------------- ADF1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8003b6c:	4b25      	ldr	r3, [pc, #148]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b6e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	4922      	ldr	r1, [pc, #136]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b90:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003b94:	f023 0208 	bic.w	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9c:	4919      	ldr	r1, [pc, #100]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb0:	4b14      	ldr	r3, [pc, #80]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003bb2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003bb6:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbe:	4911      	ldr	r1, [pc, #68]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- RNG clock source configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003bd4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003bd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	4908      	ldr	r1, [pc, #32]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d019      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(PeriphClkInit->AdcDacClockSelection));
    assert_param(IS_RCC_ADCDAC_DIV(PeriphClkInit->AdcDacClockDivider));

    /* Configure the ADC12 and DAC1 interface clock source */
    __HAL_RCC_ADCDAC_CONFIG(PeriphClkInit->AdcDacClockSelection);
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003bf6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003bfa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	e002      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003c02:	bf00      	nop
 8003c04:	40030c00 	.word	0x40030c00
 8003c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0a:	4980      	ldr	r1, [pc, #512]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104

    /* Configure the ADC12 and DAC1 interface clock divider */
    __HAL_RCC_ADCDAC_DIV_CONFIG(PeriphClkInit->AdcDacClockDivider);
 8003c12:	4b7e      	ldr	r3, [pc, #504]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c14:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003c18:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c20:	497a      	ldr	r1, [pc, #488]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- DAC1SH clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1SH) == RCC_PERIPHCLK_DAC1SH)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1SHCLKSOURCE(PeriphClkInit->Dac1SampleHoldClockSelection));

    /* Configure the DAC1 sample and hold interface clock source */
    __HAL_RCC_DAC1SH_CONFIG(PeriphClkInit->Dac1SampleHoldClockSelection);
 8003c34:	4b75      	ldr	r3, [pc, #468]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c36:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003c3a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c42:	4972      	ldr	r1, [pc, #456]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- OCTOSPI1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OCTOSPI1) == RCC_PERIPHCLK_OCTOSPI1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OCTOSPICLKSOURCE(PeriphClkInit->Octospi1ClockSelection));

    /* Configure the OCTOSPI1 clock source */
    __HAL_RCC_OCTOSPI_CONFIG(PeriphClkInit->Octospi1ClockSelection);
 8003c56:	4b6d      	ldr	r3, [pc, #436]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c58:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003c5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c64:	4969      	ldr	r1, [pc, #420]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3104 	str.w	r3, [r1, #260]	@ 0x104
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c78:	4b64      	ldr	r3, [pc, #400]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003c7e:	f023 0203 	bic.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c86:	4961      	ldr	r1, [pc, #388]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003c9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ca0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ca8:	4958      	ldr	r1, [pc, #352]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM34CLKSOURCE(PeriphClkInit->Lptim34ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM34_CONFIG(PeriphClkInit->Lptim34ClockSelection);
 8003cbc:	4b53      	ldr	r3, [pc, #332]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003cbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003cc2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cca:	4950      	ldr	r1, [pc, #320]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cde:	4b4b      	ldr	r3, [pc, #300]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003ce0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ce4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cec:	4947      	ldr	r1, [pc, #284]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
  }
#endif /* SPI4 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f280 8082 	bge.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is different then axisting one */
    tmpreg1 = RCC->BDCR;
 8003cfe:	4b43      	ldr	r3, [pc, #268]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d00:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003d04:	61fb      	str	r3, [r7, #28]
    tmpreg2 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d06:	4b41      	ldr	r3, [pc, #260]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d08:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003d0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d10:	617b      	str	r3, [r7, #20]

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d072      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      FlagStatus       pwrclkchanged = RESET;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	76fb      	strb	r3, [r7, #27]

      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8003d20:	4b3a      	ldr	r3, [pc, #232]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d110      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x418>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	4b37      	ldr	r3, [pc, #220]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d34:	4a35      	ldr	r2, [pc, #212]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d36:	f043 0304 	orr.w	r3, r3, #4
 8003d3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003d3e:	4b33      	ldr	r3, [pc, #204]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	76fb      	strb	r3, [r7, #27]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d50:	4b2f      	ldr	r3, [pc, #188]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8003d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d54:	4a2e      	ldr	r2, [pc, #184]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00f      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d62:	4b2a      	ldr	r3, [pc, #168]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d64:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003d68:	4a28      	ldr	r2, [pc, #160]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d72:	4b26      	ldr	r3, [pc, #152]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d74:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003d78:	4a24      	ldr	r2, [pc, #144]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
      }

      /* Apply new RTC clock source selection */
      tmpreg1 &= ~(RCC_BDCR_RTCSEL | RCC_BDCR_RTCEN);
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d88:	61fb      	str	r3, [r7, #28]

      /* Check is RTC disable is asked */
      if (PeriphClkInit->RTCClockSelection != RCC_RTCCLKSOURCE_DISABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d006      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x468>
      {
        tmpreg1 |= (RCC_BDCR_RTCEN | PeriphClkInit->RTCClockSelection);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9e:	61fb      	str	r3, [r7, #28]
      }
      RCC->BDCR = tmpreg1;
 8003da0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110

      /* Check if an oscillator was enable */
      if ((tmpreg1 & RCC_BDCR_LSEON) != 0x00u)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01c      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x4b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7fd f9df 	bl	8001174 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8003db8:	e011      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dba:	f7fd f9db 	bl	8001174 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d908      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
          {
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dce:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
            {
              return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e012      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0x00u)
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003de0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0e6      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x482>
            }
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003dec:	7efb      	ldrb	r3, [r7, #27]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df8:	4a04      	ldr	r2, [pc, #16]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40030c00 	.word	0x40030c00
 8003e10:	40030800 	.word	0x40030800

08003e14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *
  *            (*) value not defined in all devices.
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e26:	f000 8469 	beq.w	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e30:	f200 84a0 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e3a:	f000 8420 	beq.w	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e44:	f200 8496 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e4e:	f000 83d3 	beq.w	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e58:	f200 848c 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e62:	f000 83b8 	beq.w	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e6c:	f200 8482 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e76:	f000 8377 	beq.w	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e80:	f200 8478 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e8a:	f000 835c 	beq.w	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e94:	f200 846e 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e9e:	f000 8326 	beq.w	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ea8:	f200 8464 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eb2:	f000 82db 	beq.w	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ebc:	f200 845a 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ec6:	f000 82b9 	beq.w	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ed0:	f200 8450 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003eda:	f000 828c 	beq.w	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ee4:	f200 8446 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eee:	f000 8271 	beq.w	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ef8:	f200 843c 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f02:	f000 8246 	beq.w	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f0c:	f200 8432 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f16:	f000 8228 	beq.w	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f20:	f200 8428 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f2a:	f000 81ef 	beq.w	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f34:	f200 841e 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f3e:	f000 81ce 	beq.w	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f48:	f200 8414 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f52:	f000 8189 	beq.w	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f5c:	f200 840a 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f66:	f000 816e 	beq.w	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f70:	f200 8400 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f7a:	f000 8121 	beq.w	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f84:	f200 83f6 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8e:	f000 8106 	beq.w	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x38a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f98:	f200 83ec 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b80      	cmp	r3, #128	@ 0x80
 8003fa0:	f000 80ec 	beq.w	800417c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b80      	cmp	r3, #128	@ 0x80
 8003fa8:	f200 83e4 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d84c      	bhi.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 83dd 	beq.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	2b1f      	cmp	r3, #31
 8003fc0:	f200 83d8 	bhi.w	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8003fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08004057 	.word	0x08004057
 8003fd0:	08004087 	.word	0x08004087
 8003fd4:	08004775 	.word	0x08004775
 8003fd8:	080040b7 	.word	0x080040b7
 8003fdc:	08004775 	.word	0x08004775
 8003fe0:	08004775 	.word	0x08004775
 8003fe4:	08004775 	.word	0x08004775
 8003fe8:	080040e7 	.word	0x080040e7
 8003fec:	08004775 	.word	0x08004775
 8003ff0:	08004775 	.word	0x08004775
 8003ff4:	08004775 	.word	0x08004775
 8003ff8:	08004775 	.word	0x08004775
 8003ffc:	08004775 	.word	0x08004775
 8004000:	08004775 	.word	0x08004775
 8004004:	08004775 	.word	0x08004775
 8004008:	08004117 	.word	0x08004117
 800400c:	08004775 	.word	0x08004775
 8004010:	08004775 	.word	0x08004775
 8004014:	08004775 	.word	0x08004775
 8004018:	08004775 	.word	0x08004775
 800401c:	08004775 	.word	0x08004775
 8004020:	08004775 	.word	0x08004775
 8004024:	08004775 	.word	0x08004775
 8004028:	08004775 	.word	0x08004775
 800402c:	08004775 	.word	0x08004775
 8004030:	08004775 	.word	0x08004775
 8004034:	08004775 	.word	0x08004775
 8004038:	08004775 	.word	0x08004775
 800403c:	08004775 	.word	0x08004775
 8004040:	08004775 	.word	0x08004775
 8004044:	08004775 	.word	0x08004775
 8004048:	08004139 	.word	0x08004139
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b40      	cmp	r3, #64	@ 0x40
 8004050:	f000 8083 	beq.w	800415a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
      break;

    /* Do nothing for Timer input capture as clock source is selected in timer block */
    case RCC_PERIPHCLK_TIMIC:
    default:
      break;
 8004054:	e38e      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004056:	4ba9      	ldr	r3, [pc, #676]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004058:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8004068:	f7ff fc08 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 800406c:	60f8      	str	r0, [r7, #12]
      break;
 800406e:	e383      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004070:	4ba2      	ldr	r3, [pc, #648]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407c:	f040 837c 	bne.w	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
          frequency = HSI_VALUE;
 8004080:	4b9f      	ldr	r3, [pc, #636]	@ (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004082:	60fb      	str	r3, [r7, #12]
      break;
 8004084:	e378      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004086:	4b9d      	ldr	r3, [pc, #628]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004088:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004098:	f7ff fbdc 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 800409c:	60f8      	str	r0, [r7, #12]
      break;
 800409e:	e36d      	b.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040a0:	4b96      	ldr	r3, [pc, #600]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ac:	f040 8366 	bne.w	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HSI_VALUE;
 80040b0:	4b93      	ldr	r3, [pc, #588]	@ (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80040b2:	60fb      	str	r3, [r7, #12]
      break;
 80040b4:	e362      	b.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80040b6:	4b91      	ldr	r3, [pc, #580]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80040b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HAL_RCC_GetPCLK1Freq();
 80040c8:	f7ff fbc4 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80040cc:	60f8      	str	r0, [r7, #12]
      break;
 80040ce:	e357      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040d0:	4b8a      	ldr	r3, [pc, #552]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040dc:	f040 8350 	bne.w	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HSI_VALUE;
 80040e0:	4b87      	ldr	r3, [pc, #540]	@ (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80040e2:	60fb      	str	r3, [r7, #12]
      break;
 80040e4:	e34c      	b.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80040e6:	4b85      	ldr	r3, [pc, #532]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80040e8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80040ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7ff fbac 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80040fc:	60f8      	str	r0, [r7, #12]
      break;
 80040fe:	e341      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004100:	4b7e      	ldr	r3, [pc, #504]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410c:	f040 833a 	bne.w	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          frequency = HSI_VALUE;
 8004110:	4b7b      	ldr	r3, [pc, #492]	@ (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8004112:	60fb      	str	r3, [r7, #12]
      break;
 8004114:	e336      	b.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
      srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8004116:	4b79      	ldr	r3, [pc, #484]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004118:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004128:	f7ff fb94 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 800412c:	60f8      	str	r0, [r7, #12]
      break;
 800412e:	e340      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8004130:	f7ff fbcc 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 8004134:	60f8      	str	r0, [r7, #12]
      break;
 8004136:	e33c      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004138:	4b70      	ldr	r3, [pc, #448]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800413a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800413e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004142:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
        frequency = HAL_RCC_GetPCLK1Freq();
 800414a:	f7ff fb83 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 800414e:	60f8      	str	r0, [r7, #12]
      break;
 8004150:	e32f      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8004152:	f7ff fbbb 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 8004156:	60f8      	str	r0, [r7, #12]
      break;
 8004158:	e32b      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800415a:	4b68      	ldr	r3, [pc, #416]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800415c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004164:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        frequency = HAL_RCC_GetPCLK1Freq();
 800416c:	f7ff fb72 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 8004170:	60f8      	str	r0, [r7, #12]
      break;
 8004172:	e31e      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8004174:	f7ff fbaa 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 8004178:	60f8      	str	r0, [r7, #12]
      break;
 800417a:	e31a      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800417c:	4b5f      	ldr	r3, [pc, #380]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800417e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004186:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I3C2CLKSOURCE_PCLK2)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
        frequency = HAL_RCC_GetPCLK2Freq();
 800418e:	f7ff fb75 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 8004192:	60f8      	str	r0, [r7, #12]
      break;
 8004194:	e30d      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8004196:	f7ff fb99 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 800419a:	60f8      	str	r0, [r7, #12]
      break;
 800419c:	e309      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800419e:	4b57      	ldr	r3, [pc, #348]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80041a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI2CLKSOURCE_PCLK1)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 80041b0:	f7ff fb50 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80041b4:	60f8      	str	r0, [r7, #12]
      break;
 80041b6:	e2fc      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80041b8:	f7ff fb88 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 80041bc:	60f8      	str	r0, [r7, #12]
      break;
 80041be:	e2f8      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80041c0:	4b4e      	ldr	r3, [pc, #312]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80041c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80041ca:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 80041d2:	f7ff fb3f 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80041d6:	60f8      	str	r0, [r7, #12]
      break;
 80041d8:	e2d6      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_LSI)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041e0:	d116      	bne.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80041e2:	4b46      	ldr	r3, [pc, #280]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80041e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	f040 82cb 	bne.w	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSI_VALUE;
 80041f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80041f6:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80041f8:	4b40      	ldr	r3, [pc, #256]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80041fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	f040 82c0 	bne.w	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency /= 128U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	09db      	lsrs	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]
      break;
 800420e:	e2bb      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      else if (srcclk == RCC_LPTIM2CLKSOURCE_HSI)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004216:	d10a      	bne.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004218:	4b38      	ldr	r3, [pc, #224]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004224:	f040 82b0 	bne.w	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HSI_VALUE;
 8004228:	4b35      	ldr	r3, [pc, #212]	@ (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800422a:	60fb      	str	r3, [r7, #12]
      break;
 800422c:	e2ac      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800422e:	4b33      	ldr	r3, [pc, #204]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004230:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	f040 82a5 	bne.w	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004242:	60fb      	str	r3, [r7, #12]
      break;
 8004244:	e2a0      	b.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
      srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004246:	4b2d      	ldr	r3, [pc, #180]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004248:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800424c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004250:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI1CLKSOURCE_PCLK2)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
        frequency = HAL_RCC_GetPCLK2Freq();
 8004258:	f7ff fb10 	bl	800387c <HAL_RCC_GetPCLK2Freq>
 800425c:	60f8      	str	r0, [r7, #12]
      break;
 800425e:	e2a8      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8004260:	f7ff fb34 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 8004264:	60f8      	str	r0, [r7, #12]
      break;
 8004266:	e2a4      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SYSTICK_SOURCE();
 8004268:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800426a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800426e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004272:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SYSTICKCLKSOURCE_HCLK_DIV8)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d105      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
        frequency = (HAL_RCC_GetHCLKFreq() / 8u);
 800427a:	f7ff fad1 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 800427e:	4603      	mov	r3, r0
 8004280:	08db      	lsrs	r3, r3, #3
 8004282:	60fb      	str	r3, [r7, #12]
      break;
 8004284:	e282      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSE)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800428c:	d10b      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800428e:	4b1b      	ldr	r3, [pc, #108]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8004290:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	f040 8277 	bne.w	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSE_VALUE;
 800429e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042a2:	60fb      	str	r3, [r7, #12]
      break;
 80042a4:	e272      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      else if (srcclk == RCC_SYSTICKCLKSOURCE_LSI)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ac:	f040 826e 	bne.w	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042b0:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80042b2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	f040 8266 	bne.w	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = LSI_VALUE;
 80042c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042c4:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80042c8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	f040 825b 	bne.w	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
            frequency /= 128u;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	09db      	lsrs	r3, r3, #7
 80042da:	60fb      	str	r3, [r7, #12]
      break;
 80042dc:	e256      	b.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80042de:	4b07      	ldr	r3, [pc, #28]	@ (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80042e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80042e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_FDCANCLKSOURCE_MSIK)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042f0:	d108      	bne.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>
        frequency = HAL_RCC_GetMSIKFreq();
 80042f2:	f7ff faeb 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 80042f6:	60f8      	str	r0, [r7, #12]
      break;
 80042f8:	e25b      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80042fa:	bf00      	nop
 80042fc:	40030c00 	.word	0x40030c00
 8004300:	00f42400 	.word	0x00f42400
        frequency = HAL_RCC_GetSysClockFreq();
 8004304:	f7ff fa44 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8004308:	60f8      	str	r0, [r7, #12]
      break;
 800430a:	e252      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800430c:	4ba4      	ldr	r3, [pc, #656]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800430e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004312:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004316:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ICLKCLKSOURCE_HSI48)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800431e:	4ba0      	ldr	r3, [pc, #640]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800432a:	f040 8231 	bne.w	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSI48_VALUE;
 800432e:	4b9d      	ldr	r3, [pc, #628]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004330:	60fb      	str	r3, [r7, #12]
      break;
 8004332:	e22d      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_MSIK)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800433a:	d103      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x530>
        frequency = HAL_RCC_GetMSIKFreq();
 800433c:	f7ff fac6 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 8004340:	60f8      	str	r0, [r7, #12]
      break;
 8004342:	e225      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      else if (srcclk == RCC_ICLKCLKSOURCE_HSE)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800434a:	d10a      	bne.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800434c:	4b94      	ldr	r3, [pc, #592]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004358:	f040 821a 	bne.w	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
          frequency = HSE_VALUE;
 800435c:	4b92      	ldr	r3, [pc, #584]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800435e:	60fb      	str	r3, [r7, #12]
      break;
 8004360:	e216      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004362:	f7ff fa15 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 8004366:	60f8      	str	r0, [r7, #12]
      break;
 8004368:	e212      	b.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>
      frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ICLK);
 800436a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800436e:	f7ff fd51 	bl	8003e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8004372:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_USB1_SOURCE();
 8004374:	4b8a      	ldr	r3, [pc, #552]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004376:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800437a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437e:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USB1CLKSOURCE_ICLK_DIV2)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004386:	f040 8205 	bne.w	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
        frequency = (frequency >> 1u);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	085b      	lsrs	r3, r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
      break;
 8004390:	e200      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004392:	4b83      	ldr	r3, [pc, #524]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004394:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADF1CLKSOURCE_HCLK)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
        frequency = HAL_RCC_GetHCLKFreq();
 80043a4:	f7ff fa3c 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 80043a8:	60f8      	str	r0, [r7, #12]
      break;
 80043aa:	e202      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_PIN)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d103      	bne.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80043b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80043b6:	60fb      	str	r3, [r7, #12]
      break;
 80043b8:	e1fb      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      else if (srcclk == RCC_ADF1CLKSOURCE_MSIK)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d103      	bne.n	80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
        frequency = HAL_RCC_GetMSIKFreq();
 80043c0:	f7ff fa84 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 80043c4:	60f8      	str	r0, [r7, #12]
      break;
 80043c6:	e1f4      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80043c8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80043cc:	f7ff fd22 	bl	8003e14 <HAL_RCCEx_GetPeriphCLKFreq>
 80043d0:	60f8      	str	r0, [r7, #12]
      break;
 80043d2:	e1ee      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80043d4:	4b72      	ldr	r3, [pc, #456]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80043d6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SPI3CLKSOURCE_PCLK1)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
        frequency = HAL_RCC_GetPCLK1Freq();
 80043e6:	f7ff fa35 	bl	8003854 <HAL_RCC_GetPCLK1Freq>
 80043ea:	60f8      	str	r0, [r7, #12]
      break;
 80043ec:	e1e1      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80043ee:	f7ff fa6d 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 80043f2:	60f8      	str	r0, [r7, #12]
      break;
 80043f4:	e1dd      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80043f6:	4b6a      	ldr	r3, [pc, #424]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80043f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80043fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004400:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_SAI1CLKSOURCE_MSIK)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
        frequency = HAL_RCC_GetMSIKFreq();
 8004408:	f7ff fa60 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 800440c:	60f8      	str	r0, [r7, #12]
      break;
 800440e:	e1c3      	b.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b20      	cmp	r3, #32
 8004414:	d103      	bne.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004416:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800441a:	60fb      	str	r3, [r7, #12]
      break;
 800441c:	e1bc      	b.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      else if (srcclk == RCC_SAI1CLKSOURCE_HSE)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b40      	cmp	r3, #64	@ 0x40
 8004422:	f040 81b9 	bne.w	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004426:	4b5e      	ldr	r3, [pc, #376]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004432:	f040 81b1 	bne.w	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
          frequency = HSE_VALUE;
 8004436:	4b5c      	ldr	r3, [pc, #368]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8004438:	60fb      	str	r3, [r7, #12]
      break;
 800443a:	e1ad      	b.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800443c:	4b58      	ldr	r3, [pc, #352]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800443e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004446:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RNGCLKSOURCE_HSI48)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800444e:	4b54      	ldr	r3, [pc, #336]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004456:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445a:	f040 819f 	bne.w	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = HSI48_VALUE;
 800445e:	4b51      	ldr	r3, [pc, #324]	@ (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8004460:	60fb      	str	r3, [r7, #12]
      break;
 8004462:	e19b      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        frequency = HAL_RCC_GetMSIKFreq();
 8004464:	f7ff fa32 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 8004468:	60f8      	str	r0, [r7, #12]
      break;
 800446a:	e197      	b.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
      srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800446c:	4b4c      	ldr	r3, [pc, #304]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800446e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8004472:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004476:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
        frequency = HAL_RCC_GetHCLKFreq();
 800447e:	f7ff f9cf 	bl	8003820 <HAL_RCC_GetHCLKFreq>
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	e014      	b.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_HSE)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800448c:	d109      	bne.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800448e:	4b44      	ldr	r3, [pc, #272]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800449a:	d109      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = HSE_VALUE;
 800449c:	4b42      	ldr	r3, [pc, #264]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e006      	b.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
      else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a8:	d102      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
        frequency = HAL_RCC_GetMSIKFreq();
 80044aa:	f7ff fa0f 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 80044ae:	60f8      	str	r0, [r7, #12]
      srcclk = __HAL_RCC_GET_ADCDAC_DIV();
 80044b0:	4b3b      	ldr	r3, [pc, #236]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80044b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80044b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80044ba:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADCDACCLK_DIV1)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
        srcclk = 0u;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	e00c      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
      else if (srcclk < RCC_CCIPR2_ADCDACPRE_3)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ce:	d202      	bcs.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
        srcclk = 1u;
 80044d0:	2301      	movs	r3, #1
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	e005      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        srcclk = ((srcclk & ~RCC_CCIPR2_ADCDACPRE_3) >> RCC_CCIPR2_ADCDACPRE_Pos) + 2u;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	0b1a      	lsrs	r2, r3, #12
 80044da:	4b34      	ldr	r3, [pc, #208]	@ (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80044dc:	4013      	ands	r3, r2
 80044de:	3302      	adds	r3, #2
 80044e0:	60bb      	str	r3, [r7, #8]
      frequency = (frequency >> srcclk);
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ea:	60fb      	str	r3, [r7, #12]
      break;
 80044ec:	e161      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_DAC1SH_SOURCE();
 80044ee:	4b2c      	ldr	r3, [pc, #176]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80044f0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80044f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f8:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_DAC1SHCLKSOURCE_LSI)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d116      	bne.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004500:	4b27      	ldr	r3, [pc, #156]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004502:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	f040 8148 	bne.w	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSI_VALUE;
 8004510:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004514:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8004516:	4b22      	ldr	r3, [pc, #136]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004518:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	f040 813d 	bne.w	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
            frequency /= 128u;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	09db      	lsrs	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]
      break;
 800452c:	e138      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800452e:	4b1c      	ldr	r3, [pc, #112]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004530:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b02      	cmp	r3, #2
 800453a:	f040 8131 	bne.w	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = LSE_VALUE;
 800453e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004542:	60fb      	str	r3, [r7, #12]
      break;
 8004544:	e12c      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
      srcclk = __HAL_RCC_GET_OCTOSPI_SOURCE();
 8004546:	4b16      	ldr	r3, [pc, #88]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8004548:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800454c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004550:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_OCTOSPICLKSOURCE_SYSCLK)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004558:	f7ff f91a 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 800455c:	60f8      	str	r0, [r7, #12]
      break;
 800455e:	e128      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 8004560:	f7ff f9b4 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 8004564:	60f8      	str	r0, [r7, #12]
      break;
 8004566:	e124      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004568:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800456a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
        frequency = HAL_RCC_GetPCLK3Freq();
 800457a:	f7ff f993 	bl	80038a4 <HAL_RCC_GetPCLK3Freq>
 800457e:	60f8      	str	r0, [r7, #12]
      break;
 8004580:	e110      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d113      	bne.n	80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004594:	f040 8106 	bne.w	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = HSI_VALUE;
 8004598:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800459a:	60fb      	str	r3, [r7, #12]
      break;
 800459c:	e102      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 800459e:	bf00      	nop
 80045a0:	40030c00 	.word	0x40030c00
 80045a4:	02dc6c00 	.word	0x02dc6c00
 80045a8:	00f42400 	.word	0x00f42400
 80045ac:	000ffff7 	.word	0x000ffff7
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d10b      	bne.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045b6:	4b81      	ldr	r3, [pc, #516]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80045b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	f040 80ef 	bne.w	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          frequency = LSE_VALUE;
 80045c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ca:	60fb      	str	r3, [r7, #12]
      break;
 80045cc:	e0ea      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
        frequency = HAL_RCC_GetMSIKFreq();
 80045ce:	f7ff f97d 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 80045d2:	60f8      	str	r0, [r7, #12]
      break;
 80045d4:	e0e6      	b.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80045d6:	4b79      	ldr	r3, [pc, #484]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80045d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
        frequency = HAL_RCC_GetPCLK3Freq();
 80045e8:	f7ff f95c 	bl	80038a4 <HAL_RCC_GetPCLK3Freq>
 80045ec:	60f8      	str	r0, [r7, #12]
      break;
 80045ee:	e0e0      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
        frequency = HAL_RCC_GetMSIKFreq();
 80045f0:	f7ff f96c 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 80045f4:	60f8      	str	r0, [r7, #12]
      break;
 80045f6:	e0dc      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80045f8:	4b70      	ldr	r3, [pc, #448]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80045fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004602:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
        frequency = HAL_RCC_GetMSIKFreq();
 800460a:	f7ff f95f 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 800460e:	60f8      	str	r0, [r7, #12]
      break;
 8004610:	e0ca      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_LSI)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004618:	d116      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800461a:	4b68      	ldr	r3, [pc, #416]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800461c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	f040 80bf 	bne.w	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSI_VALUE;
 800462a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800462e:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8004630:	4b62      	ldr	r3, [pc, #392]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004632:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	f040 80b4 	bne.w	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
            frequency /= 128u;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	09db      	lsrs	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
      break;
 8004646:	e0af      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      else if (srcclk == RCC_LPTIM34CLKSOURCE_HSI)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464e:	d10a      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004650:	4b5a      	ldr	r3, [pc, #360]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800465c:	f040 80a4 	bne.w	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = HSI_VALUE;
 8004660:	4b57      	ldr	r3, [pc, #348]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8004662:	60fb      	str	r3, [r7, #12]
      break;
 8004664:	e0a0      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004666:	4b55      	ldr	r3, [pc, #340]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004668:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b02      	cmp	r3, #2
 8004672:	f040 8099 	bne.w	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
          frequency = LSE_VALUE;
 8004676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800467a:	60fb      	str	r3, [r7, #12]
      break;
 800467c:	e094      	b.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800467e:	4b4f      	ldr	r3, [pc, #316]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004680:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004684:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004688:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        frequency = HAL_RCC_GetMSIKFreq();
 8004690:	f7ff f91c 	bl	80038cc <HAL_RCC_GetMSIKFreq>
 8004694:	60f8      	str	r0, [r7, #12]
      break;
 8004696:	e089      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_LSI)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469e:	d114      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80046a0:	4b46      	ldr	r3, [pc, #280]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80046a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d17e      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSI_VALUE;
 80046ae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80046b2:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80046b4:	4b41      	ldr	r3, [pc, #260]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80046b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d174      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
            frequency /= 128u;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	09db      	lsrs	r3, r3, #7
 80046c6:	60fb      	str	r3, [r7, #12]
      break;
 80046c8:	e070      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      else if (srcclk == RCC_LPTIM1CLKSOURCE_HSI)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046d0:	d109      	bne.n	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046d2:	4b3a      	ldr	r3, [pc, #232]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046de:	d165      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = HSI_VALUE;
 80046e0:	4b37      	ldr	r3, [pc, #220]	@ (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80046e2:	60fb      	str	r3, [r7, #12]
      break;
 80046e4:	e062      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046e6:	4b35      	ldr	r3, [pc, #212]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80046e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d15b      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = LSE_VALUE;
 80046f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046f8:	60fb      	str	r3, [r7, #12]
      break;
 80046fa:	e057      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80046fc:	4b2f      	ldr	r3, [pc, #188]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80046fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004706:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800470e:	d10a      	bne.n	8004726 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004710:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004712:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d148      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004722:	60fb      	str	r3, [r7, #12]
      break;
 8004724:	e044      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472c:	d114      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800472e:	4b23      	ldr	r3, [pc, #140]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004730:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d139      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = LSI_VALUE;
 800473c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004740:	60fb      	str	r3, [r7, #12]
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8004742:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004744:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b04      	cmp	r3, #4
 800474e:	d12f      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
            frequency /= 128u;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	09db      	lsrs	r3, r3, #7
 8004754:	60fb      	str	r3, [r7, #12]
      break;
 8004756:	e02b      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800475e:	d127      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004760:	4b16      	ldr	r3, [pc, #88]	@ (80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800476c:	d120      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
          frequency = HSE_VALUE / 32u;
 800476e:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>)
 8004770:	60fb      	str	r3, [r7, #12]
      break;
 8004772:	e01d      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
      break;
 8004774:	bf00      	nop
 8004776:	e01c      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004778:	bf00      	nop
 800477a:	e01a      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800477c:	bf00      	nop
 800477e:	e018      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004780:	bf00      	nop
 8004782:	e016      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004784:	bf00      	nop
 8004786:	e014      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004788:	bf00      	nop
 800478a:	e012      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800478c:	bf00      	nop
 800478e:	e010      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004790:	bf00      	nop
 8004792:	e00e      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004794:	bf00      	nop
 8004796:	e00c      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 8004798:	bf00      	nop
 800479a:	e00a      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 800479c:	bf00      	nop
 800479e:	e008      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80047a0:	bf00      	nop
 80047a2:	e006      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80047a4:	bf00      	nop
 80047a6:	e004      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
      break;
 80047b0:	bf00      	nop
  }

  return (frequency);
 80047b2:	68fb      	ldr	r3, [r7, #12]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40030c00 	.word	0x40030c00
 80047c0:	00f42400 	.word	0x00f42400
 80047c4:	0007a120 	.word	0x0007a120

080047c8 <HAL_RCCEx_EpodBoosterClkConfig>:
  *         will be ignored
  * @note   When booster is not user, clock source shall be set to RCC_EPODBOOSTER_SOURCE_NONE to save power.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_EpodBoosterClkConfig(uint32_t Source, uint32_t Divider)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]

  assert_param(IS_RCC_EPODBOOSTER_SOURCE(Source));
  assert_param(IS_RCC_EPODBOOSTER_DIV(Divider));

  /* check if any source is selected and ready */
  tmpreg1 = RCC->CR;
 80047d2:	4b1e      	ldr	r3, [pc, #120]	@ (800484c <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60bb      	str	r3, [r7, #8]

  /* MSIS is selected as EPOD Booster clock source, check if MSIS is ready */
  if ((Source == RCC_EPODBOOSTER_SOURCE_MSIS) && ((tmpreg1 & RCC_CR_MSISRDY) == 0U))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_RCCEx_EpodBoosterClkConfig+0x26>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_RCCEx_EpodBoosterClkConfig+0x26>
  {
    status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e027      	b.n	800483e <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSI is selected as EPOD Booster clock source, check if HSI is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSI) && ((tmpreg1 & RCC_CR_HSIRDY) == 0U))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d107      	bne.n	8004804 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <HAL_RCCEx_EpodBoosterClkConfig+0x3c>
  {
    status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
 8004802:	e01c      	b.n	800483e <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  /* HSE is selected as EPOD Booster clock source, check if HSE is ready */
  else if ((Source == RCC_EPODBOOSTER_SOURCE_HSE) && ((tmpreg1 & RCC_CR_HSERDY) == 0U))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d107      	bne.n	800481a <HAL_RCCEx_EpodBoosterClkConfig+0x52>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <HAL_RCCEx_EpodBoosterClkConfig+0x52>
  {
    status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
 8004818:	e011      	b.n	800483e <HAL_RCCEx_EpodBoosterClkConfig+0x76>
  }
  else
  {
    /* Apply configuration */
    tmpreg1 = (RCC->CFGR4 & ~(RCC_CFGR4_BOOSTDIV | RCC_CFGR4_BOOSTSEL));
 800481a:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 800481c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= (Divider | Source);
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4313      	orrs	r3, r2
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4313      	orrs	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
    RCC->CFGR4 = tmpreg1;
 8004834:	4a05      	ldr	r2, [pc, #20]	@ (800484c <HAL_RCCEx_EpodBoosterClkConfig+0x84>)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6293      	str	r3, [r2, #40]	@ 0x28

    /* update status is ok */
    status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40030c00 	.word	0x40030c00

08004850 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d071      	beq.n	8004946 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fc fa64 	bl	8000d44 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004884:	4b32      	ldr	r3, [pc, #200]	@ (8004950 <HAL_RTC_Init+0x100>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d051      	beq.n	8004934 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004890:	4b2f      	ldr	r3, [pc, #188]	@ (8004950 <HAL_RTC_Init+0x100>)
 8004892:	22ca      	movs	r2, #202	@ 0xca
 8004894:	625a      	str	r2, [r3, #36]	@ 0x24
 8004896:	4b2e      	ldr	r3, [pc, #184]	@ (8004950 <HAL_RTC_Init+0x100>)
 8004898:	2253      	movs	r2, #83	@ 0x53
 800489a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f88b 	bl	80049b8 <RTC_EnterInitMode>
 80048a2:	4603      	mov	r3, r0
 80048a4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13f      	bne.n	800492c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80048ac:	4b28      	ldr	r3, [pc, #160]	@ (8004950 <HAL_RTC_Init+0x100>)
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <HAL_RTC_Init+0x100>)
 80048b2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80048b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ba:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80048bc:	4b24      	ldr	r3, [pc, #144]	@ (8004950 <HAL_RTC_Init+0x100>)
 80048be:	699a      	ldr	r2, [r3, #24]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4319      	orrs	r1, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	430b      	orrs	r3, r1
 80048d0:	491f      	ldr	r1, [pc, #124]	@ (8004950 <HAL_RTC_Init+0x100>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	491b      	ldr	r1, [pc, #108]	@ (8004950 <HAL_RTC_Init+0x100>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80048e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004950 <HAL_RTC_Init+0x100>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f6:	430b      	orrs	r3, r1
 80048f8:	4915      	ldr	r1, [pc, #84]	@ (8004950 <HAL_RTC_Init+0x100>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f896 	bl	8004a30 <RTC_ExitInitMode>
 8004904:	4603      	mov	r3, r0
 8004906:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10e      	bne.n	800492c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <HAL_RTC_Init+0x100>)
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a19      	ldr	r1, [r3, #32]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	4319      	orrs	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	430b      	orrs	r3, r1
 8004926:	490a      	ldr	r1, [pc, #40]	@ (8004950 <HAL_RTC_Init+0x100>)
 8004928:	4313      	orrs	r3, r2
 800492a:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800492c:	4b08      	ldr	r3, [pc, #32]	@ (8004950 <HAL_RTC_Init+0x100>)
 800492e:	22ff      	movs	r2, #255	@ 0xff
 8004930:	625a      	str	r2, [r3, #36]	@ 0x24
 8004932:	e001      	b.n	8004938 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40007800 	.word	0x40007800

08004954 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800495c:	4b15      	ldr	r3, [pc, #84]	@ (80049b4 <HAL_RTC_WaitForSynchro+0x60>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a14      	ldr	r2, [pc, #80]	@ (80049b4 <HAL_RTC_WaitForSynchro+0x60>)
 8004962:	f023 0320 	bic.w	r3, r3, #32
 8004966:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004968:	f7fc fc04 	bl	8001174 <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800496e:	e013      	b.n	8004998 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004970:	f7fc fc00 	bl	8001174 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800497e:	d90b      	bls.n	8004998 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004980:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <HAL_RTC_WaitForSynchro+0x60>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10c      	bne.n	80049a6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2203      	movs	r2, #3
 8004990:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e008      	b.n	80049aa <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004998:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <HAL_RTC_WaitForSynchro+0x60>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0e5      	beq.n	8004970 <HAL_RTC_WaitForSynchro+0x1c>
 80049a4:	e000      	b.n	80049a8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80049a6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40007800 	.word	0x40007800

080049b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <RTC_EnterInitMode+0x74>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d128      	bne.n	8004a22 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80049d0:	4b16      	ldr	r3, [pc, #88]	@ (8004a2c <RTC_EnterInitMode+0x74>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a15      	ldr	r2, [pc, #84]	@ (8004a2c <RTC_EnterInitMode+0x74>)
 80049d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049da:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80049dc:	f7fc fbca 	bl	8001174 <HAL_GetTick>
 80049e0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049e2:	e013      	b.n	8004a0c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049e4:	f7fc fbc6 	bl	8001174 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049f2:	d90b      	bls.n	8004a0c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80049f4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <RTC_EnterInitMode+0x74>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10f      	bne.n	8004a20 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2203      	movs	r2, #3
 8004a08:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a0c:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <RTC_EnterInitMode+0x74>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d104      	bne.n	8004a22 <RTC_EnterInitMode+0x6a>
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d1e2      	bne.n	80049e4 <RTC_EnterInitMode+0x2c>
 8004a1e:	e000      	b.n	8004a22 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8004a20:	bf00      	nop
        }
      }
    }
  }

  return status;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40007800 	.word	0x40007800

08004a30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <RTC_ExitInitMode+0x78>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a19      	ldr	r2, [pc, #100]	@ (8004aa8 <RTC_ExitInitMode+0x78>)
 8004a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a46:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a48:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <RTC_ExitInitMode+0x78>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10c      	bne.n	8004a6e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff ff7d 	bl	8004954 <HAL_RTC_WaitForSynchro>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01e      	beq.n	8004a9e <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2203      	movs	r2, #3
 8004a64:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e017      	b.n	8004a9e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <RTC_ExitInitMode+0x78>)
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa8 <RTC_ExitInitMode+0x78>)
 8004a74:	f023 0320 	bic.w	r3, r3, #32
 8004a78:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff ff6a 	bl	8004954 <HAL_RTC_WaitForSynchro>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2203      	movs	r2, #3
 8004a8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a92:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <RTC_ExitInitMode+0x78>)
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	4a04      	ldr	r2, [pc, #16]	@ (8004aa8 <RTC_ExitInitMode+0x78>)
 8004a98:	f043 0320 	orr.w	r3, r3, #32
 8004a9c:	6193      	str	r3, [r2, #24]
  }
  return status;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40007800 	.word	0x40007800

08004aac <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e057      	b.n	8004b78 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8004ad8:	4b29      	ldr	r3, [pc, #164]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	4a28      	ldr	r2, [pc, #160]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004ade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ae2:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8004ae4:	4b26      	ldr	r3, [pc, #152]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004aea:	4b25      	ldr	r3, [pc, #148]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d123      	bne.n	8004b3e <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
  {
    tickstart = HAL_GetTick();
 8004af6:	f7fc fb3d 	bl	8001174 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004afc:	e017      	b.n	8004b2e <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004afe:	f7fc fb39 	bl	8001174 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b0c:	d90f      	bls.n	8004b2e <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d110      	bne.n	8004b3c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
        {
          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e024      	b.n	8004b78 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8004b2e:	4b14      	ldr	r3, [pc, #80]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0e1      	beq.n	8004afe <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
 8004b3a:	e000      	b.n	8004b3e <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
        }
        else
        {
          break;
 8004b3c:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	041a      	lsls	r2, r3, #16
 8004b42:	490f      	ldr	r1, [pc, #60]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f023 0207 	bic.w	r2, r3, #7
 8004b52:	490b      	ldr	r1, [pc, #44]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8004b5a:	4b09      	ldr	r3, [pc, #36]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8004b60:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8004b64:	6193      	str	r3, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40007800 	.word	0x40007800

08004b84 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (CPU_IN_SECURE_STATE)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8004b8c:	4b09      	ldr	r3, [pc, #36]	@ (8004bb4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* defined (CPU_IN_SECURE_STATE) */
  {
    /* Immediately clear flags */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8004b98:	4b06      	ldr	r3, [pc, #24]	@ (8004bb4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call wake up timer registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f80a 	bl	8004bb8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40007800 	.word	0x40007800

08004bb8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4910      	ldr	r1, [pc, #64]	@ (8004c20 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	490c      	ldr	r1, [pc, #48]	@ (8004c24 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6919      	ldr	r1, [r3, #16]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	4905      	ldr	r1, [pc, #20]	@ (8004c24 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40007800 	.word	0x40007800
 8004c24:	40007c00 	.word	0x40007c00

08004c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e042      	b.n	8004cc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fc f80b 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2224      	movs	r2, #36	@ 0x24
 8004c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fce2 	bl	800563c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fb6b 	bl	8005354 <UART_SetConfig>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e01b      	b.n	8004cc0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fd61 	bl	8005780 <UART_CheckIdleState>
 8004cbe:	4603      	mov	r3, r0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b0ba      	sub	sp, #232	@ 0xe8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004cf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11b      	bne.n	8004d3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 82e5 	beq.w	80052fc <HAL_UART_IRQHandler+0x634>
      {
        huart->RxISR(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4798      	blx	r3
      }
      return;
 8004d3a:	e2df      	b.n	80052fc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8123 	beq.w	8004f8c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f80 <HAL_UART_IRQHandler+0x2b8>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d56:	4b8b      	ldr	r3, [pc, #556]	@ (8004f84 <HAL_UART_IRQHandler+0x2bc>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8116 	beq.w	8004f8c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d011      	beq.n	8004d90 <HAL_UART_IRQHandler+0xc8>
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	f043 0201 	orr.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d011      	beq.n	8004dc0 <HAL_UART_IRQHandler+0xf8>
 8004d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2202      	movs	r2, #2
 8004dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d011      	beq.n	8004df0 <HAL_UART_IRQHandler+0x128>
 8004dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de6:	f043 0202 	orr.w	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d017      	beq.n	8004e2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8004f80 <HAL_UART_IRQHandler+0x2b8>)
 8004e0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e22:	f043 0208 	orr.w	r2, r3, #8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <HAL_UART_IRQHandler+0x196>
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00c      	beq.n	8004e5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e54:	f043 0220 	orr.w	r2, r3, #32
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 824b 	beq.w	8005300 <HAL_UART_IRQHandler+0x638>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d013      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb2:	2b40      	cmp	r3, #64	@ 0x40
 8004eb4:	d005      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d054      	beq.n	8004f6c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fd73 	bl	80059ae <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b40      	cmp	r3, #64	@ 0x40
 8004ed4:	d146      	bne.n	8004f64 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1d9      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f32:	4a15      	ldr	r2, [pc, #84]	@ (8004f88 <HAL_UART_IRQHandler+0x2c0>)
 8004f34:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fd fc57 	bl	80027f0 <HAL_DMA_Abort_IT>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d019      	beq.n	8004f7c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004f56:	4610      	mov	r0, r2
 8004f58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5a:	e00f      	b.n	8004f7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f9e3 	bl	8005328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f62:	e00b      	b.n	8004f7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f9df 	bl	8005328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6a:	e007      	b.n	8004f7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9db 	bl	8005328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004f7a:	e1c1      	b.n	8005300 <HAL_UART_IRQHandler+0x638>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	bf00      	nop
    return;
 8004f7e:	e1bf      	b.n	8005300 <HAL_UART_IRQHandler+0x638>
 8004f80:	10000001 	.word	0x10000001
 8004f84:	04000120 	.word	0x04000120
 8004f88:	08005a7b 	.word	0x08005a7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	f040 816a 	bne.w	800526a <HAL_UART_IRQHandler+0x5a2>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8163 	beq.w	800526a <HAL_UART_IRQHandler+0x5a2>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 815c 	beq.w	800526a <HAL_UART_IRQHandler+0x5a2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc4:	2b40      	cmp	r3, #64	@ 0x40
 8004fc6:	f040 80d2 	bne.w	800516e <HAL_UART_IRQHandler+0x4a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80ac 	beq.w	800513a <HAL_UART_IRQHandler+0x472>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fec:	429a      	cmp	r2, r3
 8004fee:	f080 80a4 	bcs.w	800513a <HAL_UART_IRQHandler+0x472>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005004:	2b81      	cmp	r3, #129	@ 0x81
 8005006:	f000 8087 	beq.w	8005118 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800501e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005022:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005026:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005034:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005038:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005040:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800504c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1da      	bne.n	800500a <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3308      	adds	r3, #8
 800505a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005066:	f023 0301 	bic.w	r3, r3, #1
 800506a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005078:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800507c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005080:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800508a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e1      	bne.n	8005054 <HAL_UART_IRQHandler+0x38c>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3308      	adds	r3, #8
 8005096:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e3      	bne.n	8005090 <HAL_UART_IRQHandler+0x3c8>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e4      	bne.n	80050d6 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd faf0 	bl	80026f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800512a:	b29b      	uxth	r3, r3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f902 	bl	800533c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005138:	e0e4      	b.n	8005304 <HAL_UART_IRQHandler+0x63c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005140:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005144:	429a      	cmp	r2, r3
 8005146:	f040 80dd 	bne.w	8005304 <HAL_UART_IRQHandler+0x63c>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005152:	2b81      	cmp	r3, #129	@ 0x81
 8005154:	f040 80d6 	bne.w	8005304 <HAL_UART_IRQHandler+0x63c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8e8 	bl	800533c <HAL_UARTEx_RxEventCallback>
      return;
 800516c:	e0ca      	b.n	8005304 <HAL_UART_IRQHandler+0x63c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800517a:	b29b      	uxth	r3, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80bc 	beq.w	8005308 <HAL_UART_IRQHandler+0x640>
          && (nb_rx_data > 0U))
 8005190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80b7 	beq.w	8005308 <HAL_UART_IRQHandler+0x640>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e4      	bne.n	800519a <HAL_UART_IRQHandler+0x4d2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051da:	e853 3f00 	ldrex	r3, [r3]
 80051de:	623b      	str	r3, [r7, #32]
   return(result);
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005200:	e841 2300 	strex	r3, r2, [r1]
 8005204:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1e1      	bne.n	80051d0 <HAL_UART_IRQHandler+0x508>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	60fb      	str	r3, [r7, #12]
   return(result);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f023 0310 	bic.w	r3, r3, #16
 8005234:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	69b9      	ldr	r1, [r7, #24]
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	617b      	str	r3, [r7, #20]
   return(result);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e4      	bne.n	8005220 <HAL_UART_IRQHandler+0x558>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800525c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f86a 	bl	800533c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005268:	e04e      	b.n	8005308 <HAL_UART_IRQHandler+0x640>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d014      	beq.n	80052a0 <HAL_UART_IRQHandler+0x5d8>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527e:	2b00      	cmp	r3, #0
 8005280:	d105      	bne.n	800528e <HAL_UART_IRQHandler+0x5c6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_UART_IRQHandler+0x5d8>
  {
    if (huart->TxISR != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005292:	2b00      	cmp	r3, #0
 8005294:	d03a      	beq.n	800530c <HAL_UART_IRQHandler+0x644>
    {
      huart->TxISR(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
    }
    return;
 800529e:	e035      	b.n	800530c <HAL_UART_IRQHandler+0x644>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <HAL_UART_IRQHandler+0x5f8>
 80052ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_UART_IRQHandler+0x5f8>
  {
    UART_EndTransmit_IT(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fbf0 	bl	8005a9e <UART_EndTransmit_IT>
    return;
 80052be:	e026      	b.n	800530e <HAL_UART_IRQHandler+0x646>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <HAL_UART_IRQHandler+0x618>
 80052cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_UART_IRQHandler+0x618>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fc15 	bl	8005b08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052de:	e016      	b.n	800530e <HAL_UART_IRQHandler+0x646>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_UART_IRQHandler+0x646>
 80052ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	da0c      	bge.n	800530e <HAL_UART_IRQHandler+0x646>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fbfd 	bl	8005af4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052fa:	e008      	b.n	800530e <HAL_UART_IRQHandler+0x646>
      return;
 80052fc:	bf00      	nop
 80052fe:	e006      	b.n	800530e <HAL_UART_IRQHandler+0x646>
    return;
 8005300:	bf00      	nop
 8005302:	e004      	b.n	800530e <HAL_UART_IRQHandler+0x646>
      return;
 8005304:	bf00      	nop
 8005306:	e002      	b.n	800530e <HAL_UART_IRQHandler+0x646>
      return;
 8005308:	bf00      	nop
 800530a:	e000      	b.n	800530e <HAL_UART_IRQHandler+0x646>
    return;
 800530c:	bf00      	nop
  }
}
 800530e:	37e8      	adds	r7, #232	@ 0xe8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005358:	b08e      	sub	sp, #56	@ 0x38
 800535a:	af00      	add	r7, sp, #0
 800535c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	431a      	orrs	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	431a      	orrs	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	4313      	orrs	r3, r2
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4b9b      	ldr	r3, [pc, #620]	@ (80055f0 <UART_SetConfig+0x29c>)
 8005384:	4013      	ands	r3, r2
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800538c:	430b      	orrs	r3, r1
 800538e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a90      	ldr	r2, [pc, #576]	@ (80055f4 <UART_SetConfig+0x2a0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d004      	beq.n	80053c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053bc:	4313      	orrs	r3, r2
 80053be:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80053ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	f023 010f 	bic.w	r1, r3, #15
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a81      	ldr	r2, [pc, #516]	@ (80055f8 <UART_SetConfig+0x2a4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d102      	bne.n	80053fe <UART_SetConfig+0xaa>
 80053f8:	2301      	movs	r3, #1
 80053fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80053fc:	e022      	b.n	8005444 <UART_SetConfig+0xf0>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a7e      	ldr	r2, [pc, #504]	@ (80055fc <UART_SetConfig+0x2a8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d102      	bne.n	800540e <UART_SetConfig+0xba>
 8005408:	2302      	movs	r3, #2
 800540a:	633b      	str	r3, [r7, #48]	@ 0x30
 800540c:	e01a      	b.n	8005444 <UART_SetConfig+0xf0>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a7b      	ldr	r2, [pc, #492]	@ (8005600 <UART_SetConfig+0x2ac>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d102      	bne.n	800541e <UART_SetConfig+0xca>
 8005418:	2304      	movs	r3, #4
 800541a:	633b      	str	r3, [r7, #48]	@ 0x30
 800541c:	e012      	b.n	8005444 <UART_SetConfig+0xf0>
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a78      	ldr	r2, [pc, #480]	@ (8005604 <UART_SetConfig+0x2b0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d102      	bne.n	800542e <UART_SetConfig+0xda>
 8005428:	2308      	movs	r3, #8
 800542a:	633b      	str	r3, [r7, #48]	@ 0x30
 800542c:	e00a      	b.n	8005444 <UART_SetConfig+0xf0>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a70      	ldr	r2, [pc, #448]	@ (80055f4 <UART_SetConfig+0x2a0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d103      	bne.n	8005440 <UART_SetConfig+0xec>
 8005438:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800543c:	633b      	str	r3, [r7, #48]	@ 0x30
 800543e:	e001      	b.n	8005444 <UART_SetConfig+0xf0>
 8005440:	2300      	movs	r3, #0
 8005442:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a6a      	ldr	r2, [pc, #424]	@ (80055f4 <UART_SetConfig+0x2a0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d16c      	bne.n	8005528 <UART_SetConfig+0x1d4>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800544e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005450:	f7fe fce0 	bl	8003e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8005454:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80da 	beq.w	8005612 <UART_SetConfig+0x2be>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	4a69      	ldr	r2, [pc, #420]	@ (8005608 <UART_SetConfig+0x2b4>)
 8005464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005468:	461a      	mov	r2, r3
 800546a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005470:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	429a      	cmp	r2, r3
 8005480:	d305      	bcc.n	800548e <UART_SetConfig+0x13a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	429a      	cmp	r2, r3
 800548c:	d903      	bls.n	8005496 <UART_SetConfig+0x142>
      {
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005494:	e0bd      	b.n	8005612 <UART_SetConfig+0x2be>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005498:	2200      	movs	r2, #0
 800549a:	60bb      	str	r3, [r7, #8]
 800549c:	60fa      	str	r2, [r7, #12]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	4a59      	ldr	r2, [pc, #356]	@ (8005608 <UART_SetConfig+0x2b4>)
 80054a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2200      	movs	r2, #0
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054b8:	f7fa fedc 	bl	8000274 <__aeabi_uldivmod>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4610      	mov	r0, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	020b      	lsls	r3, r1, #8
 80054ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054d2:	0202      	lsls	r2, r0, #8
 80054d4:	6979      	ldr	r1, [r7, #20]
 80054d6:	6849      	ldr	r1, [r1, #4]
 80054d8:	0849      	lsrs	r1, r1, #1
 80054da:	2000      	movs	r0, #0
 80054dc:	460c      	mov	r4, r1
 80054de:	4605      	mov	r5, r0
 80054e0:	eb12 0804 	adds.w	r8, r2, r4
 80054e4:	eb43 0905 	adc.w	r9, r3, r5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	469a      	mov	sl, r3
 80054f0:	4693      	mov	fp, r2
 80054f2:	4652      	mov	r2, sl
 80054f4:	465b      	mov	r3, fp
 80054f6:	4640      	mov	r0, r8
 80054f8:	4649      	mov	r1, r9
 80054fa:	f7fa febb 	bl	8000274 <__aeabi_uldivmod>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4613      	mov	r3, r2
 8005504:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800550c:	d308      	bcc.n	8005520 <UART_SetConfig+0x1cc>
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005514:	d204      	bcs.n	8005520 <UART_SetConfig+0x1cc>
        {
          huart->Instance->BRR = usartdiv;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	e078      	b.n	8005612 <UART_SetConfig+0x2be>
        }
        else
        {
          ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005526:	e074      	b.n	8005612 <UART_SetConfig+0x2be>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005530:	d137      	bne.n	80055a2 <UART_SetConfig+0x24e>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005532:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005534:	f7fe fc6e 	bl	8003e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8005538:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	2b00      	cmp	r3, #0
 800553e:	d068      	beq.n	8005612 <UART_SetConfig+0x2be>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	4a30      	ldr	r2, [pc, #192]	@ (8005608 <UART_SetConfig+0x2b4>)
 8005546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800554a:	461a      	mov	r2, r3
 800554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005552:	005a      	lsls	r2, r3, #1
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	441a      	add	r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	2b0f      	cmp	r3, #15
 800556a:	d916      	bls.n	800559a <UART_SetConfig+0x246>
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005572:	d212      	bcs.n	800559a <UART_SetConfig+0x246>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	b29b      	uxth	r3, r3
 8005578:	f023 030f 	bic.w	r3, r3, #15
 800557c:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	b29b      	uxth	r3, r3
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	b29a      	uxth	r2, r3
 800558a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800558c:	4313      	orrs	r3, r2
 800558e:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005596:	60da      	str	r2, [r3, #12]
 8005598:	e03b      	b.n	8005612 <UART_SetConfig+0x2be>
      }
      else
      {
        ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80055a0:	e037      	b.n	8005612 <UART_SetConfig+0x2be>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80055a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055a4:	f7fe fc36 	bl	8003e14 <HAL_RCCEx_GetPeriphCLKFreq>
 80055a8:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
 80055aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d030      	beq.n	8005612 <UART_SetConfig+0x2be>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	4a14      	ldr	r2, [pc, #80]	@ (8005608 <UART_SetConfig+0x2b4>)
 80055b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ba:	461a      	mov	r2, r3
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	fbb3 f2f2 	udiv	r2, r3, r2
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	441a      	add	r2, r3
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d918      	bls.n	800560c <UART_SetConfig+0x2b8>
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d214      	bcs.n	800560c <UART_SetConfig+0x2b8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60da      	str	r2, [r3, #12]
 80055ec:	e011      	b.n	8005612 <UART_SetConfig+0x2be>
 80055ee:	bf00      	nop
 80055f0:	cfff69f3 	.word	0xcfff69f3
 80055f4:	40042400 	.word	0x40042400
 80055f8:	40013800 	.word	0x40013800
 80055fc:	40004800 	.word	0x40004800
 8005600:	40004c00 	.word	0x40004c00
 8005604:	40005000 	.word	0x40005000
 8005608:	08006774 	.word	0x08006774
      }
      else
      {
        ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2201      	movs	r2, #1
 8005616:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2201      	movs	r2, #1
 800561e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2200      	movs	r2, #0
 8005626:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2200      	movs	r2, #0
 800562c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800562e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005632:	4618      	mov	r0, r3
 8005634:	3738      	adds	r7, #56	@ 0x38
 8005636:	46bd      	mov	sp, r7
 8005638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800563c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01a      	beq.n	8005752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800573a:	d10a      	bne.n	8005752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b098      	sub	sp, #96	@ 0x60
 8005784:	af02      	add	r7, sp, #8
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005790:	f7fb fcf0 	bl	8001174 <HAL_GetTick>
 8005794:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d12f      	bne.n	8005804 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ac:	2200      	movs	r2, #0
 80057ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f88e 	bl	80058d4 <UART_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d022      	beq.n	8005804 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e6      	bne.n	80057be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e063      	b.n	80058cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b04      	cmp	r3, #4
 8005810:	d149      	bne.n	80058a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005812:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800581a:	2200      	movs	r2, #0
 800581c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f857 	bl	80058d4 <UART_WaitOnFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d03c      	beq.n	80058a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	623b      	str	r3, [r7, #32]
   return(result);
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800584a:	633b      	str	r3, [r7, #48]	@ 0x30
 800584c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e6      	bne.n	800582c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3308      	adds	r3, #8
 8005864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	60fb      	str	r3, [r7, #12]
   return(result);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3308      	adds	r3, #8
 800587c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800587e:	61fa      	str	r2, [r7, #28]
 8005880:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	69b9      	ldr	r1, [r7, #24]
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	617b      	str	r3, [r7, #20]
   return(result);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e5      	bne.n	800585e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e012      	b.n	80058cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3758      	adds	r7, #88	@ 0x58
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e4:	e04f      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d04b      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fb fc41 	bl	8001174 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <UART_WaitOnFlagUntilTimeout+0x30>
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e04e      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d037      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b80      	cmp	r3, #128	@ 0x80
 800591a:	d034      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb2>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b40      	cmp	r3, #64	@ 0x40
 8005920:	d031      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b08      	cmp	r3, #8
 800592e:	d110      	bne.n	8005952 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2208      	movs	r2, #8
 8005936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 f838 	bl	80059ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2208      	movs	r2, #8
 8005942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e029      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800595c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005960:	d111      	bne.n	8005986 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800596a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f81e 	bl	80059ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2220      	movs	r2, #32
 8005976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e00f      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69da      	ldr	r2, [r3, #28]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4013      	ands	r3, r2
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	79fb      	ldrb	r3, [r7, #7]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d0a0      	beq.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b095      	sub	sp, #84	@ 0x54
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e6      	bne.n	80059b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e3      	bne.n	80059e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d118      	bne.n	8005a5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f023 0310 	bic.w	r3, r3, #16
 8005a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6979      	ldr	r1, [r7, #20]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	613b      	str	r3, [r7, #16]
   return(result);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e6      	bne.n	8005a28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a6e:	bf00      	nop
 8005a70:	3754      	adds	r7, #84	@ 0x54
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff fc49 	bl	8005328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b088      	sub	sp, #32
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6979      	ldr	r1, [r7, #20]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e6      	bne.n	8005aa6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff fc14 	bl	8005314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aec:	bf00      	nop
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	@ 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_UARTEx_EnableStopMode+0x16>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e021      	b.n	8005b76 <HAL_UARTEx_EnableStopMode+0x5a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f043 0302 	orr.w	r3, r3, #2
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6979      	ldr	r1, [r7, #20]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	613b      	str	r3, [r7, #16]
   return(result);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e6      	bne.n	8005b3a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3724      	adds	r7, #36	@ 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_UARTEx_EnableFifoMode+0x16>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e02b      	b.n	8005bf0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2224      	movs	r2, #36	@ 0x24
 8005ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005bce:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f889 	bl	8005cf0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e02d      	b.n	8005c6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2224      	movs	r2, #36	@ 0x24
 8005c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f84f 	bl	8005cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e02d      	b.n	8005ce8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2224      	movs	r2, #36	@ 0x24
 8005c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f811 	bl	8005cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d108      	bne.n	8005d12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d10:	e031      	b.n	8005d76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d12:	2308      	movs	r3, #8
 8005d14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d16:	2308      	movs	r3, #8
 8005d18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	0e5b      	lsrs	r3, r3, #25
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	0f5b      	lsrs	r3, r3, #29
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d3a:	7bbb      	ldrb	r3, [r7, #14]
 8005d3c:	7b3a      	ldrb	r2, [r7, #12]
 8005d3e:	4911      	ldr	r1, [pc, #68]	@ (8005d84 <UARTEx_SetNbDataToProcess+0x94>)
 8005d40:	5c8a      	ldrb	r2, [r1, r2]
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d46:	7b3a      	ldrb	r2, [r7, #12]
 8005d48:	490f      	ldr	r1, [pc, #60]	@ (8005d88 <UARTEx_SetNbDataToProcess+0x98>)
 8005d4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	7b7a      	ldrb	r2, [r7, #13]
 8005d5c:	4909      	ldr	r1, [pc, #36]	@ (8005d84 <UARTEx_SetNbDataToProcess+0x94>)
 8005d5e:	5c8a      	ldrb	r2, [r1, r2]
 8005d60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d64:	7b7a      	ldrb	r2, [r7, #13]
 8005d66:	4908      	ldr	r1, [pc, #32]	@ (8005d88 <UARTEx_SetNbDataToProcess+0x98>)
 8005d68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d76:	bf00      	nop
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	0800678c 	.word	0x0800678c
 8005d88:	08006794 	.word	0x08006794

08005d8c <siprintf>:
 8005d8c:	b40e      	push	{r1, r2, r3}
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	b09d      	sub	sp, #116	@ 0x74
 8005d92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d96:	2400      	movs	r4, #0
 8005d98:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d9a:	9002      	str	r0, [sp, #8]
 8005d9c:	9006      	str	r0, [sp, #24]
 8005d9e:	9107      	str	r1, [sp, #28]
 8005da0:	9104      	str	r1, [sp, #16]
 8005da2:	4809      	ldr	r0, [pc, #36]	@ (8005dc8 <siprintf+0x3c>)
 8005da4:	4909      	ldr	r1, [pc, #36]	@ (8005dcc <siprintf+0x40>)
 8005da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005daa:	9105      	str	r1, [sp, #20]
 8005dac:	a902      	add	r1, sp, #8
 8005dae:	6800      	ldr	r0, [r0, #0]
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005db4:	f000 f994 	bl	80060e0 <_svfiprintf_r>
 8005db8:	9b02      	ldr	r3, [sp, #8]
 8005dba:	701c      	strb	r4, [r3, #0]
 8005dbc:	b01d      	add	sp, #116	@ 0x74
 8005dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc2:	b003      	add	sp, #12
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	2003000c 	.word	0x2003000c
 8005dcc:	ffff0208 	.word	0xffff0208

08005dd0 <memset>:
 8005dd0:	4402      	add	r2, r0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d100      	bne.n	8005dda <memset+0xa>
 8005dd8:	4770      	bx	lr
 8005dda:	f803 1b01 	strb.w	r1, [r3], #1
 8005dde:	e7f9      	b.n	8005dd4 <memset+0x4>

08005de0 <__errno>:
 8005de0:	4b01      	ldr	r3, [pc, #4]	@ (8005de8 <__errno+0x8>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	2003000c 	.word	0x2003000c

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4d0d      	ldr	r5, [pc, #52]	@ (8005e24 <__libc_init_array+0x38>)
 8005df0:	2600      	movs	r6, #0
 8005df2:	4c0d      	ldr	r4, [pc, #52]	@ (8005e28 <__libc_init_array+0x3c>)
 8005df4:	1b64      	subs	r4, r4, r5
 8005df6:	10a4      	asrs	r4, r4, #2
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8005e2c <__libc_init_array+0x40>)
 8005dfe:	2600      	movs	r6, #0
 8005e00:	4c0b      	ldr	r4, [pc, #44]	@ (8005e30 <__libc_init_array+0x44>)
 8005e02:	f000 fc75 	bl	80066f0 <_init>
 8005e06:	1b64      	subs	r4, r4, r5
 8005e08:	10a4      	asrs	r4, r4, #2
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e14:	3601      	adds	r6, #1
 8005e16:	4798      	blx	r3
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1e:	3601      	adds	r6, #1
 8005e20:	4798      	blx	r3
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	080067d8 	.word	0x080067d8
 8005e28:	080067d8 	.word	0x080067d8
 8005e2c:	080067d8 	.word	0x080067d8
 8005e30:	080067dc 	.word	0x080067dc

08005e34 <__retarget_lock_acquire_recursive>:
 8005e34:	4770      	bx	lr

08005e36 <__retarget_lock_release_recursive>:
 8005e36:	4770      	bx	lr

08005e38 <_free_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d041      	beq.n	8005ec4 <_free_r+0x8c>
 8005e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e44:	1f0c      	subs	r4, r1, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bfb8      	it	lt
 8005e4a:	18e4      	addlt	r4, r4, r3
 8005e4c:	f000 f8e0 	bl	8006010 <__malloc_lock>
 8005e50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec8 <_free_r+0x90>)
 8005e52:	6813      	ldr	r3, [r2, #0]
 8005e54:	b933      	cbnz	r3, 8005e64 <_free_r+0x2c>
 8005e56:	6063      	str	r3, [r4, #4]
 8005e58:	6014      	str	r4, [r2, #0]
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e60:	f000 b8dc 	b.w	800601c <__malloc_unlock>
 8005e64:	42a3      	cmp	r3, r4
 8005e66:	d908      	bls.n	8005e7a <_free_r+0x42>
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	1821      	adds	r1, r4, r0
 8005e6c:	428b      	cmp	r3, r1
 8005e6e:	bf01      	itttt	eq
 8005e70:	6819      	ldreq	r1, [r3, #0]
 8005e72:	685b      	ldreq	r3, [r3, #4]
 8005e74:	1809      	addeq	r1, r1, r0
 8005e76:	6021      	streq	r1, [r4, #0]
 8005e78:	e7ed      	b.n	8005e56 <_free_r+0x1e>
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	b10b      	cbz	r3, 8005e84 <_free_r+0x4c>
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d9fa      	bls.n	8005e7a <_free_r+0x42>
 8005e84:	6811      	ldr	r1, [r2, #0]
 8005e86:	1850      	adds	r0, r2, r1
 8005e88:	42a0      	cmp	r0, r4
 8005e8a:	d10b      	bne.n	8005ea4 <_free_r+0x6c>
 8005e8c:	6820      	ldr	r0, [r4, #0]
 8005e8e:	4401      	add	r1, r0
 8005e90:	1850      	adds	r0, r2, r1
 8005e92:	6011      	str	r1, [r2, #0]
 8005e94:	4283      	cmp	r3, r0
 8005e96:	d1e0      	bne.n	8005e5a <_free_r+0x22>
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4408      	add	r0, r1
 8005e9e:	6053      	str	r3, [r2, #4]
 8005ea0:	6010      	str	r0, [r2, #0]
 8005ea2:	e7da      	b.n	8005e5a <_free_r+0x22>
 8005ea4:	d902      	bls.n	8005eac <_free_r+0x74>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	e7d6      	b.n	8005e5a <_free_r+0x22>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	1821      	adds	r1, r4, r0
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	bf02      	ittt	eq
 8005eb4:	6819      	ldreq	r1, [r3, #0]
 8005eb6:	685b      	ldreq	r3, [r3, #4]
 8005eb8:	1809      	addeq	r1, r1, r0
 8005eba:	6063      	str	r3, [r4, #4]
 8005ebc:	bf08      	it	eq
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	6054      	str	r4, [r2, #4]
 8005ec2:	e7ca      	b.n	8005e5a <_free_r+0x22>
 8005ec4:	bd38      	pop	{r3, r4, r5, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20030304 	.word	0x20030304

08005ecc <sbrk_aligned>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4e0f      	ldr	r6, [pc, #60]	@ (8005f0c <sbrk_aligned+0x40>)
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	6831      	ldr	r1, [r6, #0]
 8005ed6:	b911      	cbnz	r1, 8005ede <sbrk_aligned+0x12>
 8005ed8:	f000 fba8 	bl	800662c <_sbrk_r>
 8005edc:	6030      	str	r0, [r6, #0]
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 fba3 	bl	800662c <_sbrk_r>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d103      	bne.n	8005ef2 <sbrk_aligned+0x26>
 8005eea:	f04f 34ff 	mov.w	r4, #4294967295
 8005eee:	4620      	mov	r0, r4
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	1cc4      	adds	r4, r0, #3
 8005ef4:	f024 0403 	bic.w	r4, r4, #3
 8005ef8:	42a0      	cmp	r0, r4
 8005efa:	d0f8      	beq.n	8005eee <sbrk_aligned+0x22>
 8005efc:	1a21      	subs	r1, r4, r0
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 fb94 	bl	800662c <_sbrk_r>
 8005f04:	3001      	adds	r0, #1
 8005f06:	d1f2      	bne.n	8005eee <sbrk_aligned+0x22>
 8005f08:	e7ef      	b.n	8005eea <sbrk_aligned+0x1e>
 8005f0a:	bf00      	nop
 8005f0c:	20030300 	.word	0x20030300

08005f10 <_malloc_r>:
 8005f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f14:	1ccd      	adds	r5, r1, #3
 8005f16:	4606      	mov	r6, r0
 8005f18:	f025 0503 	bic.w	r5, r5, #3
 8005f1c:	3508      	adds	r5, #8
 8005f1e:	2d0c      	cmp	r5, #12
 8005f20:	bf38      	it	cc
 8005f22:	250c      	movcc	r5, #12
 8005f24:	2d00      	cmp	r5, #0
 8005f26:	db01      	blt.n	8005f2c <_malloc_r+0x1c>
 8005f28:	42a9      	cmp	r1, r5
 8005f2a:	d904      	bls.n	8005f36 <_malloc_r+0x26>
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	6033      	str	r3, [r6, #0]
 8005f30:	2000      	movs	r0, #0
 8005f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800600c <_malloc_r+0xfc>
 8005f3a:	f000 f869 	bl	8006010 <__malloc_lock>
 8005f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f42:	461c      	mov	r4, r3
 8005f44:	bb44      	cbnz	r4, 8005f98 <_malloc_r+0x88>
 8005f46:	4629      	mov	r1, r5
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff ffbf 	bl	8005ecc <sbrk_aligned>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	4604      	mov	r4, r0
 8005f52:	d158      	bne.n	8006006 <_malloc_r+0xf6>
 8005f54:	f8d8 4000 	ldr.w	r4, [r8]
 8005f58:	4627      	mov	r7, r4
 8005f5a:	2f00      	cmp	r7, #0
 8005f5c:	d143      	bne.n	8005fe6 <_malloc_r+0xd6>
 8005f5e:	2c00      	cmp	r4, #0
 8005f60:	d04b      	beq.n	8005ffa <_malloc_r+0xea>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	4639      	mov	r1, r7
 8005f66:	4630      	mov	r0, r6
 8005f68:	eb04 0903 	add.w	r9, r4, r3
 8005f6c:	f000 fb5e 	bl	800662c <_sbrk_r>
 8005f70:	4581      	cmp	r9, r0
 8005f72:	d142      	bne.n	8005ffa <_malloc_r+0xea>
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	4630      	mov	r0, r6
 8005f78:	1a6d      	subs	r5, r5, r1
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	f7ff ffa6 	bl	8005ecc <sbrk_aligned>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d03a      	beq.n	8005ffa <_malloc_r+0xea>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	442b      	add	r3, r5
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	bb62      	cbnz	r2, 8005fec <_malloc_r+0xdc>
 8005f92:	f8c8 7000 	str.w	r7, [r8]
 8005f96:	e00f      	b.n	8005fb8 <_malloc_r+0xa8>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	1b52      	subs	r2, r2, r5
 8005f9c:	d420      	bmi.n	8005fe0 <_malloc_r+0xd0>
 8005f9e:	2a0b      	cmp	r2, #11
 8005fa0:	d917      	bls.n	8005fd2 <_malloc_r+0xc2>
 8005fa2:	1961      	adds	r1, r4, r5
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	6025      	str	r5, [r4, #0]
 8005fa8:	bf18      	it	ne
 8005faa:	6059      	strne	r1, [r3, #4]
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	bf08      	it	eq
 8005fb0:	f8c8 1000 	streq.w	r1, [r8]
 8005fb4:	5162      	str	r2, [r4, r5]
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f82f 	bl	800601c <__malloc_unlock>
 8005fbe:	f104 000b 	add.w	r0, r4, #11
 8005fc2:	1d23      	adds	r3, r4, #4
 8005fc4:	f020 0007 	bic.w	r0, r0, #7
 8005fc8:	1ac2      	subs	r2, r0, r3
 8005fca:	bf1c      	itt	ne
 8005fcc:	1a1b      	subne	r3, r3, r0
 8005fce:	50a3      	strne	r3, [r4, r2]
 8005fd0:	e7af      	b.n	8005f32 <_malloc_r+0x22>
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	bf0c      	ite	eq
 8005fd8:	f8c8 2000 	streq.w	r2, [r8]
 8005fdc:	605a      	strne	r2, [r3, #4]
 8005fde:	e7eb      	b.n	8005fb8 <_malloc_r+0xa8>
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	6864      	ldr	r4, [r4, #4]
 8005fe4:	e7ae      	b.n	8005f44 <_malloc_r+0x34>
 8005fe6:	463c      	mov	r4, r7
 8005fe8:	687f      	ldr	r7, [r7, #4]
 8005fea:	e7b6      	b.n	8005f5a <_malloc_r+0x4a>
 8005fec:	461a      	mov	r2, r3
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d1fb      	bne.n	8005fec <_malloc_r+0xdc>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	6053      	str	r3, [r2, #4]
 8005ff8:	e7de      	b.n	8005fb8 <_malloc_r+0xa8>
 8005ffa:	230c      	movs	r3, #12
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	6033      	str	r3, [r6, #0]
 8006000:	f000 f80c 	bl	800601c <__malloc_unlock>
 8006004:	e794      	b.n	8005f30 <_malloc_r+0x20>
 8006006:	6005      	str	r5, [r0, #0]
 8006008:	e7d6      	b.n	8005fb8 <_malloc_r+0xa8>
 800600a:	bf00      	nop
 800600c:	20030304 	.word	0x20030304

08006010 <__malloc_lock>:
 8006010:	4801      	ldr	r0, [pc, #4]	@ (8006018 <__malloc_lock+0x8>)
 8006012:	f7ff bf0f 	b.w	8005e34 <__retarget_lock_acquire_recursive>
 8006016:	bf00      	nop
 8006018:	200302fc 	.word	0x200302fc

0800601c <__malloc_unlock>:
 800601c:	4801      	ldr	r0, [pc, #4]	@ (8006024 <__malloc_unlock+0x8>)
 800601e:	f7ff bf0a 	b.w	8005e36 <__retarget_lock_release_recursive>
 8006022:	bf00      	nop
 8006024:	200302fc 	.word	0x200302fc

08006028 <__ssputs_r>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	461f      	mov	r7, r3
 800602e:	688e      	ldr	r6, [r1, #8]
 8006030:	4682      	mov	sl, r0
 8006032:	460c      	mov	r4, r1
 8006034:	42be      	cmp	r6, r7
 8006036:	4690      	mov	r8, r2
 8006038:	680b      	ldr	r3, [r1, #0]
 800603a:	d82d      	bhi.n	8006098 <__ssputs_r+0x70>
 800603c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006040:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006044:	d026      	beq.n	8006094 <__ssputs_r+0x6c>
 8006046:	6965      	ldr	r5, [r4, #20]
 8006048:	6909      	ldr	r1, [r1, #16]
 800604a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800604e:	eba3 0901 	sub.w	r9, r3, r1
 8006052:	1c7b      	adds	r3, r7, #1
 8006054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006058:	444b      	add	r3, r9
 800605a:	106d      	asrs	r5, r5, #1
 800605c:	429d      	cmp	r5, r3
 800605e:	bf38      	it	cc
 8006060:	461d      	movcc	r5, r3
 8006062:	0553      	lsls	r3, r2, #21
 8006064:	d527      	bpl.n	80060b6 <__ssputs_r+0x8e>
 8006066:	4629      	mov	r1, r5
 8006068:	f7ff ff52 	bl	8005f10 <_malloc_r>
 800606c:	4606      	mov	r6, r0
 800606e:	b360      	cbz	r0, 80060ca <__ssputs_r+0xa2>
 8006070:	464a      	mov	r2, r9
 8006072:	6921      	ldr	r1, [r4, #16]
 8006074:	f000 faf8 	bl	8006668 <memcpy>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800607e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	6126      	str	r6, [r4, #16]
 8006086:	444e      	add	r6, r9
 8006088:	6165      	str	r5, [r4, #20]
 800608a:	eba5 0509 	sub.w	r5, r5, r9
 800608e:	6026      	str	r6, [r4, #0]
 8006090:	463e      	mov	r6, r7
 8006092:	60a5      	str	r5, [r4, #8]
 8006094:	42be      	cmp	r6, r7
 8006096:	d900      	bls.n	800609a <__ssputs_r+0x72>
 8006098:	463e      	mov	r6, r7
 800609a:	4632      	mov	r2, r6
 800609c:	4641      	mov	r1, r8
 800609e:	6820      	ldr	r0, [r4, #0]
 80060a0:	f000 faaa 	bl	80065f8 <memmove>
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	2000      	movs	r0, #0
 80060a8:	1b9b      	subs	r3, r3, r6
 80060aa:	60a3      	str	r3, [r4, #8]
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	4433      	add	r3, r6
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b6:	462a      	mov	r2, r5
 80060b8:	f000 fae3 	bl	8006682 <_realloc_r>
 80060bc:	4606      	mov	r6, r0
 80060be:	2800      	cmp	r0, #0
 80060c0:	d1e0      	bne.n	8006084 <__ssputs_r+0x5c>
 80060c2:	6921      	ldr	r1, [r4, #16]
 80060c4:	4650      	mov	r0, sl
 80060c6:	f7ff feb7 	bl	8005e38 <_free_r>
 80060ca:	230c      	movs	r3, #12
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	f8ca 3000 	str.w	r3, [sl]
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060da:	81a3      	strh	r3, [r4, #12]
 80060dc:	e7e9      	b.n	80060b2 <__ssputs_r+0x8a>
	...

080060e0 <_svfiprintf_r>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	4698      	mov	r8, r3
 80060e6:	898b      	ldrh	r3, [r1, #12]
 80060e8:	b09d      	sub	sp, #116	@ 0x74
 80060ea:	4607      	mov	r7, r0
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	460d      	mov	r5, r1
 80060f0:	4614      	mov	r4, r2
 80060f2:	d510      	bpl.n	8006116 <_svfiprintf_r+0x36>
 80060f4:	690b      	ldr	r3, [r1, #16]
 80060f6:	b973      	cbnz	r3, 8006116 <_svfiprintf_r+0x36>
 80060f8:	2140      	movs	r1, #64	@ 0x40
 80060fa:	f7ff ff09 	bl	8005f10 <_malloc_r>
 80060fe:	6028      	str	r0, [r5, #0]
 8006100:	6128      	str	r0, [r5, #16]
 8006102:	b930      	cbnz	r0, 8006112 <_svfiprintf_r+0x32>
 8006104:	230c      	movs	r3, #12
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	b01d      	add	sp, #116	@ 0x74
 800610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006112:	2340      	movs	r3, #64	@ 0x40
 8006114:	616b      	str	r3, [r5, #20]
 8006116:	2300      	movs	r3, #0
 8006118:	f8cd 800c 	str.w	r8, [sp, #12]
 800611c:	f04f 0901 	mov.w	r9, #1
 8006120:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80062c4 <_svfiprintf_r+0x1e4>
 8006124:	9309      	str	r3, [sp, #36]	@ 0x24
 8006126:	2320      	movs	r3, #32
 8006128:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800612c:	2330      	movs	r3, #48	@ 0x30
 800612e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006132:	4623      	mov	r3, r4
 8006134:	469a      	mov	sl, r3
 8006136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800613a:	b10a      	cbz	r2, 8006140 <_svfiprintf_r+0x60>
 800613c:	2a25      	cmp	r2, #37	@ 0x25
 800613e:	d1f9      	bne.n	8006134 <_svfiprintf_r+0x54>
 8006140:	ebba 0b04 	subs.w	fp, sl, r4
 8006144:	d00b      	beq.n	800615e <_svfiprintf_r+0x7e>
 8006146:	465b      	mov	r3, fp
 8006148:	4622      	mov	r2, r4
 800614a:	4629      	mov	r1, r5
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff ff6b 	bl	8006028 <__ssputs_r>
 8006152:	3001      	adds	r0, #1
 8006154:	f000 80a7 	beq.w	80062a6 <_svfiprintf_r+0x1c6>
 8006158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800615a:	445a      	add	r2, fp
 800615c:	9209      	str	r2, [sp, #36]	@ 0x24
 800615e:	f89a 3000 	ldrb.w	r3, [sl]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 809f 	beq.w	80062a6 <_svfiprintf_r+0x1c6>
 8006168:	2300      	movs	r3, #0
 800616a:	f04f 32ff 	mov.w	r2, #4294967295
 800616e:	f10a 0a01 	add.w	sl, sl, #1
 8006172:	9304      	str	r3, [sp, #16]
 8006174:	9307      	str	r3, [sp, #28]
 8006176:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800617a:	931a      	str	r3, [sp, #104]	@ 0x68
 800617c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006180:	4654      	mov	r4, sl
 8006182:	2205      	movs	r2, #5
 8006184:	484f      	ldr	r0, [pc, #316]	@ (80062c4 <_svfiprintf_r+0x1e4>)
 8006186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800618a:	f000 fa5f 	bl	800664c <memchr>
 800618e:	9a04      	ldr	r2, [sp, #16]
 8006190:	b9d8      	cbnz	r0, 80061ca <_svfiprintf_r+0xea>
 8006192:	06d0      	lsls	r0, r2, #27
 8006194:	bf44      	itt	mi
 8006196:	2320      	movmi	r3, #32
 8006198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800619c:	0711      	lsls	r1, r2, #28
 800619e:	bf44      	itt	mi
 80061a0:	232b      	movmi	r3, #43	@ 0x2b
 80061a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061a6:	f89a 3000 	ldrb.w	r3, [sl]
 80061aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ac:	d015      	beq.n	80061da <_svfiprintf_r+0xfa>
 80061ae:	9a07      	ldr	r2, [sp, #28]
 80061b0:	4654      	mov	r4, sl
 80061b2:	2000      	movs	r0, #0
 80061b4:	f04f 0c0a 	mov.w	ip, #10
 80061b8:	4621      	mov	r1, r4
 80061ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061be:	3b30      	subs	r3, #48	@ 0x30
 80061c0:	2b09      	cmp	r3, #9
 80061c2:	d94b      	bls.n	800625c <_svfiprintf_r+0x17c>
 80061c4:	b1b0      	cbz	r0, 80061f4 <_svfiprintf_r+0x114>
 80061c6:	9207      	str	r2, [sp, #28]
 80061c8:	e014      	b.n	80061f4 <_svfiprintf_r+0x114>
 80061ca:	eba0 0308 	sub.w	r3, r0, r8
 80061ce:	46a2      	mov	sl, r4
 80061d0:	fa09 f303 	lsl.w	r3, r9, r3
 80061d4:	4313      	orrs	r3, r2
 80061d6:	9304      	str	r3, [sp, #16]
 80061d8:	e7d2      	b.n	8006180 <_svfiprintf_r+0xa0>
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	9103      	str	r1, [sp, #12]
 80061e4:	bfbb      	ittet	lt
 80061e6:	425b      	neglt	r3, r3
 80061e8:	f042 0202 	orrlt.w	r2, r2, #2
 80061ec:	9307      	strge	r3, [sp, #28]
 80061ee:	9307      	strlt	r3, [sp, #28]
 80061f0:	bfb8      	it	lt
 80061f2:	9204      	strlt	r2, [sp, #16]
 80061f4:	7823      	ldrb	r3, [r4, #0]
 80061f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80061f8:	d10a      	bne.n	8006210 <_svfiprintf_r+0x130>
 80061fa:	7863      	ldrb	r3, [r4, #1]
 80061fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80061fe:	d132      	bne.n	8006266 <_svfiprintf_r+0x186>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	3402      	adds	r4, #2
 8006204:	1d1a      	adds	r2, r3, #4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800620c:	9203      	str	r2, [sp, #12]
 800620e:	9305      	str	r3, [sp, #20]
 8006210:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80062d4 <_svfiprintf_r+0x1f4>
 8006214:	2203      	movs	r2, #3
 8006216:	7821      	ldrb	r1, [r4, #0]
 8006218:	4650      	mov	r0, sl
 800621a:	f000 fa17 	bl	800664c <memchr>
 800621e:	b138      	cbz	r0, 8006230 <_svfiprintf_r+0x150>
 8006220:	eba0 000a 	sub.w	r0, r0, sl
 8006224:	2240      	movs	r2, #64	@ 0x40
 8006226:	9b04      	ldr	r3, [sp, #16]
 8006228:	3401      	adds	r4, #1
 800622a:	4082      	lsls	r2, r0
 800622c:	4313      	orrs	r3, r2
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006234:	2206      	movs	r2, #6
 8006236:	4824      	ldr	r0, [pc, #144]	@ (80062c8 <_svfiprintf_r+0x1e8>)
 8006238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800623c:	f000 fa06 	bl	800664c <memchr>
 8006240:	2800      	cmp	r0, #0
 8006242:	d036      	beq.n	80062b2 <_svfiprintf_r+0x1d2>
 8006244:	4b21      	ldr	r3, [pc, #132]	@ (80062cc <_svfiprintf_r+0x1ec>)
 8006246:	bb1b      	cbnz	r3, 8006290 <_svfiprintf_r+0x1b0>
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	3307      	adds	r3, #7
 800624c:	f023 0307 	bic.w	r3, r3, #7
 8006250:	3308      	adds	r3, #8
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006256:	4433      	add	r3, r6
 8006258:	9309      	str	r3, [sp, #36]	@ 0x24
 800625a:	e76a      	b.n	8006132 <_svfiprintf_r+0x52>
 800625c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006260:	460c      	mov	r4, r1
 8006262:	2001      	movs	r0, #1
 8006264:	e7a8      	b.n	80061b8 <_svfiprintf_r+0xd8>
 8006266:	2300      	movs	r3, #0
 8006268:	3401      	adds	r4, #1
 800626a:	f04f 0c0a 	mov.w	ip, #10
 800626e:	4619      	mov	r1, r3
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	4620      	mov	r0, r4
 8006274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006278:	3a30      	subs	r2, #48	@ 0x30
 800627a:	2a09      	cmp	r2, #9
 800627c:	d903      	bls.n	8006286 <_svfiprintf_r+0x1a6>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0c6      	beq.n	8006210 <_svfiprintf_r+0x130>
 8006282:	9105      	str	r1, [sp, #20]
 8006284:	e7c4      	b.n	8006210 <_svfiprintf_r+0x130>
 8006286:	fb0c 2101 	mla	r1, ip, r1, r2
 800628a:	4604      	mov	r4, r0
 800628c:	2301      	movs	r3, #1
 800628e:	e7f0      	b.n	8006272 <_svfiprintf_r+0x192>
 8006290:	ab03      	add	r3, sp, #12
 8006292:	462a      	mov	r2, r5
 8006294:	a904      	add	r1, sp, #16
 8006296:	4638      	mov	r0, r7
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	4b0d      	ldr	r3, [pc, #52]	@ (80062d0 <_svfiprintf_r+0x1f0>)
 800629c:	f3af 8000 	nop.w
 80062a0:	1c42      	adds	r2, r0, #1
 80062a2:	4606      	mov	r6, r0
 80062a4:	d1d6      	bne.n	8006254 <_svfiprintf_r+0x174>
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	065b      	lsls	r3, r3, #25
 80062aa:	f53f af2d 	bmi.w	8006108 <_svfiprintf_r+0x28>
 80062ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062b0:	e72c      	b.n	800610c <_svfiprintf_r+0x2c>
 80062b2:	ab03      	add	r3, sp, #12
 80062b4:	462a      	mov	r2, r5
 80062b6:	a904      	add	r1, sp, #16
 80062b8:	4638      	mov	r0, r7
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	4b04      	ldr	r3, [pc, #16]	@ (80062d0 <_svfiprintf_r+0x1f0>)
 80062be:	f000 f87d 	bl	80063bc <_printf_i>
 80062c2:	e7ed      	b.n	80062a0 <_svfiprintf_r+0x1c0>
 80062c4:	0800679c 	.word	0x0800679c
 80062c8:	080067a6 	.word	0x080067a6
 80062cc:	00000000 	.word	0x00000000
 80062d0:	08006029 	.word	0x08006029
 80062d4:	080067a2 	.word	0x080067a2

080062d8 <_printf_common>:
 80062d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	4616      	mov	r6, r2
 80062de:	4698      	mov	r8, r3
 80062e0:	688a      	ldr	r2, [r1, #8]
 80062e2:	4607      	mov	r7, r0
 80062e4:	690b      	ldr	r3, [r1, #16]
 80062e6:	460c      	mov	r4, r1
 80062e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	bfb8      	it	lt
 80062f0:	4613      	movlt	r3, r2
 80062f2:	6033      	str	r3, [r6, #0]
 80062f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062f8:	b10a      	cbz	r2, 80062fe <_printf_common+0x26>
 80062fa:	3301      	adds	r3, #1
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	0699      	lsls	r1, r3, #26
 8006302:	bf42      	ittt	mi
 8006304:	6833      	ldrmi	r3, [r6, #0]
 8006306:	3302      	addmi	r3, #2
 8006308:	6033      	strmi	r3, [r6, #0]
 800630a:	6825      	ldr	r5, [r4, #0]
 800630c:	f015 0506 	ands.w	r5, r5, #6
 8006310:	d106      	bne.n	8006320 <_printf_common+0x48>
 8006312:	f104 0a19 	add.w	sl, r4, #25
 8006316:	68e3      	ldr	r3, [r4, #12]
 8006318:	6832      	ldr	r2, [r6, #0]
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	42ab      	cmp	r3, r5
 800631e:	dc2b      	bgt.n	8006378 <_printf_common+0xa0>
 8006320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006324:	6822      	ldr	r2, [r4, #0]
 8006326:	3b00      	subs	r3, #0
 8006328:	bf18      	it	ne
 800632a:	2301      	movne	r3, #1
 800632c:	0692      	lsls	r2, r2, #26
 800632e:	d430      	bmi.n	8006392 <_printf_common+0xba>
 8006330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006334:	4641      	mov	r1, r8
 8006336:	4638      	mov	r0, r7
 8006338:	47c8      	blx	r9
 800633a:	3001      	adds	r0, #1
 800633c:	d023      	beq.n	8006386 <_printf_common+0xae>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	341a      	adds	r4, #26
 8006342:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8006346:	f003 0306 	and.w	r3, r3, #6
 800634a:	2b04      	cmp	r3, #4
 800634c:	bf0a      	itet	eq
 800634e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8006352:	2500      	movne	r5, #0
 8006354:	6833      	ldreq	r3, [r6, #0]
 8006356:	f04f 0600 	mov.w	r6, #0
 800635a:	bf08      	it	eq
 800635c:	1aed      	subeq	r5, r5, r3
 800635e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006362:	bf08      	it	eq
 8006364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006368:	4293      	cmp	r3, r2
 800636a:	bfc4      	itt	gt
 800636c:	1a9b      	subgt	r3, r3, r2
 800636e:	18ed      	addgt	r5, r5, r3
 8006370:	42b5      	cmp	r5, r6
 8006372:	d11a      	bne.n	80063aa <_printf_common+0xd2>
 8006374:	2000      	movs	r0, #0
 8006376:	e008      	b.n	800638a <_printf_common+0xb2>
 8006378:	2301      	movs	r3, #1
 800637a:	4652      	mov	r2, sl
 800637c:	4641      	mov	r1, r8
 800637e:	4638      	mov	r0, r7
 8006380:	47c8      	blx	r9
 8006382:	3001      	adds	r0, #1
 8006384:	d103      	bne.n	800638e <_printf_common+0xb6>
 8006386:	f04f 30ff 	mov.w	r0, #4294967295
 800638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638e:	3501      	adds	r5, #1
 8006390:	e7c1      	b.n	8006316 <_printf_common+0x3e>
 8006392:	18e1      	adds	r1, r4, r3
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	2030      	movs	r0, #48	@ 0x30
 8006398:	3302      	adds	r3, #2
 800639a:	4422      	add	r2, r4
 800639c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063a8:	e7c2      	b.n	8006330 <_printf_common+0x58>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4622      	mov	r2, r4
 80063ae:	4641      	mov	r1, r8
 80063b0:	4638      	mov	r0, r7
 80063b2:	47c8      	blx	r9
 80063b4:	3001      	adds	r0, #1
 80063b6:	d0e6      	beq.n	8006386 <_printf_common+0xae>
 80063b8:	3601      	adds	r6, #1
 80063ba:	e7d9      	b.n	8006370 <_printf_common+0x98>

080063bc <_printf_i>:
 80063bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	7e0f      	ldrb	r7, [r1, #24]
 80063c2:	4691      	mov	r9, r2
 80063c4:	4680      	mov	r8, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	2f78      	cmp	r7, #120	@ 0x78
 80063ca:	469a      	mov	sl, r3
 80063cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063d2:	d807      	bhi.n	80063e4 <_printf_i+0x28>
 80063d4:	2f62      	cmp	r7, #98	@ 0x62
 80063d6:	d80a      	bhi.n	80063ee <_printf_i+0x32>
 80063d8:	2f00      	cmp	r7, #0
 80063da:	f000 80d1 	beq.w	8006580 <_printf_i+0x1c4>
 80063de:	2f58      	cmp	r7, #88	@ 0x58
 80063e0:	f000 80b8 	beq.w	8006554 <_printf_i+0x198>
 80063e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063ec:	e03a      	b.n	8006464 <_printf_i+0xa8>
 80063ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063f2:	2b15      	cmp	r3, #21
 80063f4:	d8f6      	bhi.n	80063e4 <_printf_i+0x28>
 80063f6:	a101      	add	r1, pc, #4	@ (adr r1, 80063fc <_printf_i+0x40>)
 80063f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063fc:	08006455 	.word	0x08006455
 8006400:	08006469 	.word	0x08006469
 8006404:	080063e5 	.word	0x080063e5
 8006408:	080063e5 	.word	0x080063e5
 800640c:	080063e5 	.word	0x080063e5
 8006410:	080063e5 	.word	0x080063e5
 8006414:	08006469 	.word	0x08006469
 8006418:	080063e5 	.word	0x080063e5
 800641c:	080063e5 	.word	0x080063e5
 8006420:	080063e5 	.word	0x080063e5
 8006424:	080063e5 	.word	0x080063e5
 8006428:	08006567 	.word	0x08006567
 800642c:	08006493 	.word	0x08006493
 8006430:	08006521 	.word	0x08006521
 8006434:	080063e5 	.word	0x080063e5
 8006438:	080063e5 	.word	0x080063e5
 800643c:	08006589 	.word	0x08006589
 8006440:	080063e5 	.word	0x080063e5
 8006444:	08006493 	.word	0x08006493
 8006448:	080063e5 	.word	0x080063e5
 800644c:	080063e5 	.word	0x080063e5
 8006450:	08006529 	.word	0x08006529
 8006454:	6833      	ldr	r3, [r6, #0]
 8006456:	1d1a      	adds	r2, r3, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6032      	str	r2, [r6, #0]
 800645c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006460:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006464:	2301      	movs	r3, #1
 8006466:	e09c      	b.n	80065a2 <_printf_i+0x1e6>
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	6820      	ldr	r0, [r4, #0]
 800646c:	1d19      	adds	r1, r3, #4
 800646e:	6031      	str	r1, [r6, #0]
 8006470:	0606      	lsls	r6, r0, #24
 8006472:	d501      	bpl.n	8006478 <_printf_i+0xbc>
 8006474:	681d      	ldr	r5, [r3, #0]
 8006476:	e003      	b.n	8006480 <_printf_i+0xc4>
 8006478:	0645      	lsls	r5, r0, #25
 800647a:	d5fb      	bpl.n	8006474 <_printf_i+0xb8>
 800647c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006480:	2d00      	cmp	r5, #0
 8006482:	da03      	bge.n	800648c <_printf_i+0xd0>
 8006484:	232d      	movs	r3, #45	@ 0x2d
 8006486:	426d      	negs	r5, r5
 8006488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800648c:	4858      	ldr	r0, [pc, #352]	@ (80065f0 <_printf_i+0x234>)
 800648e:	230a      	movs	r3, #10
 8006490:	e011      	b.n	80064b6 <_printf_i+0xfa>
 8006492:	6821      	ldr	r1, [r4, #0]
 8006494:	6833      	ldr	r3, [r6, #0]
 8006496:	0608      	lsls	r0, r1, #24
 8006498:	f853 5b04 	ldr.w	r5, [r3], #4
 800649c:	d402      	bmi.n	80064a4 <_printf_i+0xe8>
 800649e:	0649      	lsls	r1, r1, #25
 80064a0:	bf48      	it	mi
 80064a2:	b2ad      	uxthmi	r5, r5
 80064a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80064a6:	6033      	str	r3, [r6, #0]
 80064a8:	4851      	ldr	r0, [pc, #324]	@ (80065f0 <_printf_i+0x234>)
 80064aa:	bf14      	ite	ne
 80064ac:	230a      	movne	r3, #10
 80064ae:	2308      	moveq	r3, #8
 80064b0:	2100      	movs	r1, #0
 80064b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064b6:	6866      	ldr	r6, [r4, #4]
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	60a6      	str	r6, [r4, #8]
 80064bc:	db05      	blt.n	80064ca <_printf_i+0x10e>
 80064be:	6821      	ldr	r1, [r4, #0]
 80064c0:	432e      	orrs	r6, r5
 80064c2:	f021 0104 	bic.w	r1, r1, #4
 80064c6:	6021      	str	r1, [r4, #0]
 80064c8:	d04b      	beq.n	8006562 <_printf_i+0x1a6>
 80064ca:	4616      	mov	r6, r2
 80064cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80064d0:	fb03 5711 	mls	r7, r3, r1, r5
 80064d4:	5dc7      	ldrb	r7, [r0, r7]
 80064d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064da:	462f      	mov	r7, r5
 80064dc:	460d      	mov	r5, r1
 80064de:	42bb      	cmp	r3, r7
 80064e0:	d9f4      	bls.n	80064cc <_printf_i+0x110>
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d10b      	bne.n	80064fe <_printf_i+0x142>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	07df      	lsls	r7, r3, #31
 80064ea:	d508      	bpl.n	80064fe <_printf_i+0x142>
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	6861      	ldr	r1, [r4, #4]
 80064f0:	4299      	cmp	r1, r3
 80064f2:	bfde      	ittt	le
 80064f4:	2330      	movle	r3, #48	@ 0x30
 80064f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064fe:	1b92      	subs	r2, r2, r6
 8006500:	6122      	str	r2, [r4, #16]
 8006502:	464b      	mov	r3, r9
 8006504:	aa03      	add	r2, sp, #12
 8006506:	4621      	mov	r1, r4
 8006508:	4640      	mov	r0, r8
 800650a:	f8cd a000 	str.w	sl, [sp]
 800650e:	f7ff fee3 	bl	80062d8 <_printf_common>
 8006512:	3001      	adds	r0, #1
 8006514:	d14a      	bne.n	80065ac <_printf_i+0x1f0>
 8006516:	f04f 30ff 	mov.w	r0, #4294967295
 800651a:	b004      	add	sp, #16
 800651c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	f043 0320 	orr.w	r3, r3, #32
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	2778      	movs	r7, #120	@ 0x78
 800652a:	4832      	ldr	r0, [pc, #200]	@ (80065f4 <_printf_i+0x238>)
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006532:	061f      	lsls	r7, r3, #24
 8006534:	6831      	ldr	r1, [r6, #0]
 8006536:	f851 5b04 	ldr.w	r5, [r1], #4
 800653a:	d402      	bmi.n	8006542 <_printf_i+0x186>
 800653c:	065f      	lsls	r7, r3, #25
 800653e:	bf48      	it	mi
 8006540:	b2ad      	uxthmi	r5, r5
 8006542:	6031      	str	r1, [r6, #0]
 8006544:	07d9      	lsls	r1, r3, #31
 8006546:	bf44      	itt	mi
 8006548:	f043 0320 	orrmi.w	r3, r3, #32
 800654c:	6023      	strmi	r3, [r4, #0]
 800654e:	b11d      	cbz	r5, 8006558 <_printf_i+0x19c>
 8006550:	2310      	movs	r3, #16
 8006552:	e7ad      	b.n	80064b0 <_printf_i+0xf4>
 8006554:	4826      	ldr	r0, [pc, #152]	@ (80065f0 <_printf_i+0x234>)
 8006556:	e7e9      	b.n	800652c <_printf_i+0x170>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	f023 0320 	bic.w	r3, r3, #32
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	e7f6      	b.n	8006550 <_printf_i+0x194>
 8006562:	4616      	mov	r6, r2
 8006564:	e7bd      	b.n	80064e2 <_printf_i+0x126>
 8006566:	6833      	ldr	r3, [r6, #0]
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1d18      	adds	r0, r3, #4
 800656c:	6961      	ldr	r1, [r4, #20]
 800656e:	6030      	str	r0, [r6, #0]
 8006570:	062e      	lsls	r6, r5, #24
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	d501      	bpl.n	800657a <_printf_i+0x1be>
 8006576:	6019      	str	r1, [r3, #0]
 8006578:	e002      	b.n	8006580 <_printf_i+0x1c4>
 800657a:	0668      	lsls	r0, r5, #25
 800657c:	d5fb      	bpl.n	8006576 <_printf_i+0x1ba>
 800657e:	8019      	strh	r1, [r3, #0]
 8006580:	2300      	movs	r3, #0
 8006582:	4616      	mov	r6, r2
 8006584:	6123      	str	r3, [r4, #16]
 8006586:	e7bc      	b.n	8006502 <_printf_i+0x146>
 8006588:	6833      	ldr	r3, [r6, #0]
 800658a:	2100      	movs	r1, #0
 800658c:	1d1a      	adds	r2, r3, #4
 800658e:	6032      	str	r2, [r6, #0]
 8006590:	681e      	ldr	r6, [r3, #0]
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	4630      	mov	r0, r6
 8006596:	f000 f859 	bl	800664c <memchr>
 800659a:	b108      	cbz	r0, 80065a0 <_printf_i+0x1e4>
 800659c:	1b80      	subs	r0, r0, r6
 800659e:	6060      	str	r0, [r4, #4]
 80065a0:	6863      	ldr	r3, [r4, #4]
 80065a2:	6123      	str	r3, [r4, #16]
 80065a4:	2300      	movs	r3, #0
 80065a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065aa:	e7aa      	b.n	8006502 <_printf_i+0x146>
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	4632      	mov	r2, r6
 80065b0:	4649      	mov	r1, r9
 80065b2:	4640      	mov	r0, r8
 80065b4:	47d0      	blx	sl
 80065b6:	3001      	adds	r0, #1
 80065b8:	d0ad      	beq.n	8006516 <_printf_i+0x15a>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	079b      	lsls	r3, r3, #30
 80065be:	d413      	bmi.n	80065e8 <_printf_i+0x22c>
 80065c0:	68e0      	ldr	r0, [r4, #12]
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	4298      	cmp	r0, r3
 80065c6:	bfb8      	it	lt
 80065c8:	4618      	movlt	r0, r3
 80065ca:	e7a6      	b.n	800651a <_printf_i+0x15e>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4632      	mov	r2, r6
 80065d0:	4649      	mov	r1, r9
 80065d2:	4640      	mov	r0, r8
 80065d4:	47d0      	blx	sl
 80065d6:	3001      	adds	r0, #1
 80065d8:	d09d      	beq.n	8006516 <_printf_i+0x15a>
 80065da:	3501      	adds	r5, #1
 80065dc:	68e3      	ldr	r3, [r4, #12]
 80065de:	9903      	ldr	r1, [sp, #12]
 80065e0:	1a5b      	subs	r3, r3, r1
 80065e2:	42ab      	cmp	r3, r5
 80065e4:	dcf2      	bgt.n	80065cc <_printf_i+0x210>
 80065e6:	e7eb      	b.n	80065c0 <_printf_i+0x204>
 80065e8:	2500      	movs	r5, #0
 80065ea:	f104 0619 	add.w	r6, r4, #25
 80065ee:	e7f5      	b.n	80065dc <_printf_i+0x220>
 80065f0:	080067ad 	.word	0x080067ad
 80065f4:	080067be 	.word	0x080067be

080065f8 <memmove>:
 80065f8:	4288      	cmp	r0, r1
 80065fa:	b510      	push	{r4, lr}
 80065fc:	eb01 0402 	add.w	r4, r1, r2
 8006600:	d902      	bls.n	8006608 <memmove+0x10>
 8006602:	4284      	cmp	r4, r0
 8006604:	4623      	mov	r3, r4
 8006606:	d807      	bhi.n	8006618 <memmove+0x20>
 8006608:	1e43      	subs	r3, r0, #1
 800660a:	42a1      	cmp	r1, r4
 800660c:	d008      	beq.n	8006620 <memmove+0x28>
 800660e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006612:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006616:	e7f8      	b.n	800660a <memmove+0x12>
 8006618:	4402      	add	r2, r0
 800661a:	4601      	mov	r1, r0
 800661c:	428a      	cmp	r2, r1
 800661e:	d100      	bne.n	8006622 <memmove+0x2a>
 8006620:	bd10      	pop	{r4, pc}
 8006622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800662a:	e7f7      	b.n	800661c <memmove+0x24>

0800662c <_sbrk_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	2300      	movs	r3, #0
 8006630:	4d05      	ldr	r5, [pc, #20]	@ (8006648 <_sbrk_r+0x1c>)
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	f7fa fc10 	bl	8000e5c <_sbrk>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_sbrk_r+0x1a>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_sbrk_r+0x1a>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	200302f8 	.word	0x200302f8

0800664c <memchr>:
 800664c:	b2c9      	uxtb	r1, r1
 800664e:	4603      	mov	r3, r0
 8006650:	4402      	add	r2, r0
 8006652:	b510      	push	{r4, lr}
 8006654:	4293      	cmp	r3, r2
 8006656:	4618      	mov	r0, r3
 8006658:	d101      	bne.n	800665e <memchr+0x12>
 800665a:	2000      	movs	r0, #0
 800665c:	e003      	b.n	8006666 <memchr+0x1a>
 800665e:	7804      	ldrb	r4, [r0, #0]
 8006660:	3301      	adds	r3, #1
 8006662:	428c      	cmp	r4, r1
 8006664:	d1f6      	bne.n	8006654 <memchr+0x8>
 8006666:	bd10      	pop	{r4, pc}

08006668 <memcpy>:
 8006668:	440a      	add	r2, r1
 800666a:	1e43      	subs	r3, r0, #1
 800666c:	4291      	cmp	r1, r2
 800666e:	d100      	bne.n	8006672 <memcpy+0xa>
 8006670:	4770      	bx	lr
 8006672:	b510      	push	{r4, lr}
 8006674:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006678:	4291      	cmp	r1, r2
 800667a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800667e:	d1f9      	bne.n	8006674 <memcpy+0xc>
 8006680:	bd10      	pop	{r4, pc}

08006682 <_realloc_r>:
 8006682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006686:	4607      	mov	r7, r0
 8006688:	4614      	mov	r4, r2
 800668a:	460d      	mov	r5, r1
 800668c:	b921      	cbnz	r1, 8006698 <_realloc_r+0x16>
 800668e:	4611      	mov	r1, r2
 8006690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006694:	f7ff bc3c 	b.w	8005f10 <_malloc_r>
 8006698:	b92a      	cbnz	r2, 80066a6 <_realloc_r+0x24>
 800669a:	4625      	mov	r5, r4
 800669c:	f7ff fbcc 	bl	8005e38 <_free_r>
 80066a0:	4628      	mov	r0, r5
 80066a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a6:	f000 f81a 	bl	80066de <_malloc_usable_size_r>
 80066aa:	4284      	cmp	r4, r0
 80066ac:	4606      	mov	r6, r0
 80066ae:	d802      	bhi.n	80066b6 <_realloc_r+0x34>
 80066b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066b4:	d8f4      	bhi.n	80066a0 <_realloc_r+0x1e>
 80066b6:	4621      	mov	r1, r4
 80066b8:	4638      	mov	r0, r7
 80066ba:	f7ff fc29 	bl	8005f10 <_malloc_r>
 80066be:	4680      	mov	r8, r0
 80066c0:	b908      	cbnz	r0, 80066c6 <_realloc_r+0x44>
 80066c2:	4645      	mov	r5, r8
 80066c4:	e7ec      	b.n	80066a0 <_realloc_r+0x1e>
 80066c6:	42b4      	cmp	r4, r6
 80066c8:	4622      	mov	r2, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	bf28      	it	cs
 80066ce:	4632      	movcs	r2, r6
 80066d0:	f7ff ffca 	bl	8006668 <memcpy>
 80066d4:	4629      	mov	r1, r5
 80066d6:	4638      	mov	r0, r7
 80066d8:	f7ff fbae 	bl	8005e38 <_free_r>
 80066dc:	e7f1      	b.n	80066c2 <_realloc_r+0x40>

080066de <_malloc_usable_size_r>:
 80066de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e2:	1f18      	subs	r0, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bfbc      	itt	lt
 80066e8:	580b      	ldrlt	r3, [r1, r0]
 80066ea:	18c0      	addlt	r0, r0, r3
 80066ec:	4770      	bx	lr
	...

080066f0 <_init>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr

080066fc <_fini>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr
